<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Node.js - 想要利用 call API 的方式執行伺服器端的檔案，然後將檔案執行結果回傳</title>
      <link href="/2020/11/08/202011-node-api-exec/"/>
      <url>/2020/11/08/202011-node-api-exec/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><p>Hi，大家好，最近遇到一個需求</p><p>有一個 EXE，在執行它之後，它會去更新資料庫的資料</p><p>那我想要把這個 EXE 的執行動作包成 API，在客戶端 call 這個 API 時，就去執行 EXE 來進行更新資料</p><p>但是，光是這樣子執行 EXE 而已，我就完全無法得知 EXE 執行的結果到底是成功或是失敗，EXE 必須要回應給我更新的結果是成功或是失敗</p><p>後來想到可以讓 EXE 回 console 的訊息，然後 API 用執行指令的模組就能夠抓到執行後的回應，這樣就能夠正確的得知 EXE 執行到底有沒有成功的完成更新動作</p><p>雖然不確定這樣是不是最穩的方式，不過原先是一直卡不知道要怎麼讓 API 來得到 EXE 的執行結果，一個突然得想到，明明有很多指令是會回應訊息的，如 <code>ls</code> 這個用來查詢當前目錄內的情況，會回傳一堆文字，那一定也會有需要擷取這些文字訊息的時候</p><p><a href="https://i.imgur.com/jCNvGjo.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/jCNvGjo.png" class="lazyload"></a></p><p>所以最後決定實驗一下，如果讓 EXE 在執行完更新資料庫的動作後，回傳成功或失敗的文字到 console，API 就能夠抓到這個文字來當作回傳結果，進而讓客戶端得知最後結果到底是成功還是失敗</p><hr><h2 id="環境說明"><a href="#環境說明" class="headerlink" title="環境說明"></a>環境說明</h2><p>剛剛雖然講了要執行 EXE，不過本篇文要完全以 Node.js 的方式來呈現，蓋一個單純的 .js 執行 console.log，用 express 來開一個最簡易的 get API 來執行它並回應結果</p><hr><h2 id="首先先建一個簡單的-console-回應訊息"><a href="#首先先建一個簡單的-console-回應訊息" class="headerlink" title="首先先建一個簡單的 console 回應訊息"></a>首先先建一個簡單的 console 回應訊息</h2><h4 id="console-js"><a href="#console-js" class="headerlink" title="console.js"></a>console.js</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'回應一個'</span>);</span><br></pre></td></tr></tbody></table></figure></div><hr><h2 id="執行指令的模組就用-child-process-的-execFile"><a href="#執行指令的模組就用-child-process-的-execFile" class="headerlink" title="執行指令的模組就用 child_process 的 execFile"></a>執行指令的模組就用 <code>child_process</code> 的 <code>execFile</code></h2><h4 id="exec-js"><a href="#exec-js" class="headerlink" title="exec.js"></a>exec.js</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> { execFile } = <span class="built_in">require</span>(<span class="string">'child_process'</span>);</span><br><span class="line"></span><br><span class="line">execFile(<span class="string">'node'</span>, [<span class="string">'console.js'</span>], <span class="function">(<span class="params">error, stdout, stderr</span>) =></span> {</span><br><span class="line">  <span class="keyword">if</span> (error) {</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'stderr'</span>, stderr);</span><br><span class="line">    <span class="keyword">throw</span> error;</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'stdout'</span>, stdout);</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure></div><p>執行結果</p><p><a href="https://i.imgur.com/eVB9BNr.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/eVB9BNr.png" class="lazyload"></a></p><hr><h2 id="再來是-API-的部分，用-express-簡單開個-get"><a href="#再來是-API-的部分，用-express-簡單開個-get" class="headerlink" title="再來是 API 的部分，用 express 簡單開個 get"></a>再來是 API 的部分，用 express 簡單開個 get</h2><h4 id="api-js"><a href="#api-js" class="headerlink" title="api.js"></a>api.js</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> port = <span class="number">3156</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">'/'</span>, <span class="function">(<span class="params">req, res</span>) =></span> {</span><br><span class="line">  res.send(<span class="string">'123'</span>);</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line">app.listen(port, <span class="function">() =></span> {</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`localhost:<span class="subst">${port}</span>`</span>)</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure></div><hr><h2 id="最後把-API-跟-execFile-的使用結合起來，將-stdout-當成-get-的回應"><a href="#最後把-API-跟-execFile-的使用結合起來，將-stdout-當成-get-的回應" class="headerlink" title="最後把 API 跟 execFile 的使用結合起來，將 stdout 當成 get 的回應"></a>最後把 API 跟 execFile 的使用結合起來，將 stdout 當成 get 的回應</h2><h4 id="exec-api-js"><a href="#exec-api-js" class="headerlink" title="exec-api.js"></a>exec-api.js</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> { execFile } = <span class="built_in">require</span>(<span class="string">'child_process'</span>);</span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> port = <span class="number">3156</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">'/'</span>, <span class="function">(<span class="params">req, res</span>) =></span> {</span><br><span class="line">  execFile(<span class="string">'node'</span>, [<span class="string">'console.js'</span>], <span class="function">(<span class="params">error, stdout, stderr</span>) =></span> {</span><br><span class="line">    <span class="keyword">if</span> (error) {</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'stderr'</span>, stderr);</span><br><span class="line">      <span class="keyword">throw</span> error;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    res.send(stdout);</span><br><span class="line">  });</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line">app.listen(port, <span class="function">() =></span> {</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`localhost:<span class="subst">${port}</span>`</span>)</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure></div><p>執行結果</p><p>啟動 API 伺服器</p><p><a href="https://i.imgur.com/ri2YHi7.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/ri2YHi7.png" class="lazyload"></a></p><p>瀏覽器輸入 API 網址</p><p><a href="https://i.imgur.com/TYF5zrX.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/TYF5zrX.png" class="lazyload"></a></p><p>正確的取得檔案執行後的回傳結果了</p><hr><h2 id="console-js-的-console-包一層-setTimeout"><a href="#console-js-的-console-包一層-setTimeout" class="headerlink" title="console.js 的 console 包一層 setTimeout"></a>console.js 的 console 包一層 setTimeout</h2><p>另外也有實驗用 setTimeout 來模擬非同步的回傳，畢竟操作資料庫實際是需要一些時間的，改動一點點 console.js 的程式碼</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =></span> {</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'回應一個'</span>);</span><br><span class="line">}, <span class="number">1000</span>);</span><br></pre></td></tr></tbody></table></figure></div><p>這樣瀏覽器在輸入網址後，會轉圈圈個一秒鐘，接著還是能取得到 console.js 的回應結果</p></body></html>]]></content>
      
      
      <categories>
          
          <category> w3HexSchool </category>
          
          <category> node.js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> w3HexSchool </tag>
            
            <tag> node.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>T-SQL COALESCE，只要不是 NULL，那就來一個吧</title>
      <link href="/2020/11/01/202011-t-sql-coalesce/"/>
      <url>/2020/11/01/202011-t-sql-coalesce/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><p>Hi，大家好，之前有寫過一篇用 NULLIF（<a href="https://littlehorseboy.github.io/2020/08/16/202008-t-sql-nullif/">文章連結在此</a>） 來處理 NULL 情況的文章，這次要介紹另一種也是在 T-SQL 上處理 NULL 情況的函式，就先直接來看看範例</p><hr><h2 id="COALESCE"><a href="#COALESCE" class="headerlink" title="COALESCE"></a>COALESCE</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COALESCE</span>(<span class="string">'123'</span>, <span class="string">'456'</span>)</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COALESCE</span>(<span class="keyword">NULL</span>, <span class="string">'123'</span>)</span><br><span class="line"></span><br><span class="line">GO</span><br><span class="line"></span><br><span class="line"><span class="keyword">DECLARE</span> <span class="variable">@null</span> <span class="type">varchar</span>(<span class="number">10</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COALESCE</span>(<span class="keyword">NULL</span>, <span class="variable">@null</span>)</span><br></pre></td></tr></tbody></table></figure></div><p>執行結果</p><p><a href="https://i.imgur.com/g7MY1og.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/g7MY1og.png" class="lazyload"></a></p><p>使用 COALESCE 函數，會依照參數的順序逐一判斷，如果遇到不為 NULL 的參數值，就會直接傳回，不管後續的參數是什麼</p><p>另一種情況是剛好全部的參數值都是 NULL，那最後還是會傳回 NULL</p><p>用 JavaScript 的陣列函式來看，還真是像是 <code>[].find((item) => item !== NULL)</code></p><hr><h2 id="用-COALESCE-來替代-CASE"><a href="#用-COALESCE-來替代-CASE" class="headerlink" title="用 COALESCE 來替代 CASE"></a>用 COALESCE 來替代 CASE</h2><p>接下來是示範 COALESCE 與 CASE 兩者都可以達到一樣的效果的寫法</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DECLARE</span> <span class="variable">@a</span> <span class="type">int</span>;</span><br><span class="line"><span class="keyword">DECLARE</span> <span class="variable">@b</span> <span class="type">int</span>;</span><br><span class="line"><span class="keyword">DECLARE</span> <span class="variable">@c</span> <span class="type">int</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="keyword">CASE</span> <span class="keyword">WHEN</span> <span class="variable">@a</span> <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">THEN</span> <span class="variable">@a</span></span><br><span class="line">     <span class="keyword">WHEN</span> <span class="variable">@b</span> <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">THEN</span> <span class="variable">@b</span></span><br><span class="line">     <span class="keyword">WHEN</span> <span class="variable">@c</span> <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">THEN</span> <span class="variable">@c</span> <span class="keyword">ELSE</span> <span class="keyword">NULL</span> <span class="keyword">END</span> <span class="keyword">AS</span> <span class="keyword">result</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="built_in">COALESCE</span>(<span class="variable">@a</span>, <span class="variable">@b</span>, <span class="variable">@c</span>) <span class="keyword">AS</span> <span class="keyword">result</span></span><br></pre></td></tr></tbody></table></figure></div><p>執行結果</p><p><a href="https://i.imgur.com/aZgEkoj.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/aZgEkoj.png" class="lazyload"></a></p><p>比較後可以看到 COALESCE 的程式碼減少非常多，如果有遇到類似的多次判斷 NULL 這種需求就能派上用場了！</p></body></html>]]></content>
      
      
      <categories>
          
          <category> w3HexSchool </category>
          
          <category> T-SQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> w3HexSchool </tag>
            
            <tag> T-SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>T-SQL - 基本語法</title>
      <link href="/2020/10/25/202010-t-sql-basic/"/>
      <url>/2020/10/25/202010-t-sql-basic/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><p>Hi，大家好，本篇紀錄 T-SQL 最基本的語法的解析</p><hr><h2 id="語法元素"><a href="#語法元素" class="headerlink" title="語法元素"></a>語法元素</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> Salaries</span><br><span class="line"><span class="keyword">WHERE</span> Salary <span class="operator">>=</span> <span class="number">30000</span></span><br></pre></td></tr></tbody></table></figure></div><h3 id="關鍵字（Keywords）"><a href="#關鍵字（Keywords）" class="headerlink" title="關鍵字（Keywords）"></a>關鍵字（Keywords）</h3><p>特殊意義的保留字（Reserved Words），<code>SELECT</code>、<code>FROM</code>、<code>WHERE</code></p><h3 id="識別名稱（Identifiers）"><a href="#識別名稱（Identifiers）" class="headerlink" title="識別名稱（Identifiers）"></a>識別名稱（Identifiers）</h3><p>資料庫物件的名稱</p><h3 id="運算式（Expressions）"><a href="#運算式（Expressions）" class="headerlink" title="運算式（Expressions）"></a>運算式（Expressions）</h3><p>運算式取得值，如 <code>SELECT 欄位1 + 欄位2</code></p><h3 id="資料類型（Data-Types）"><a href="#資料類型（Data-Types）" class="headerlink" title="資料類型（Data Types）"></a>資料類型（Data Types）</h3><p>欄位的資料類型，如 INT、VARCHAR(10)</p><h3 id="函數（Functions）"><a href="#函數（Functions）" class="headerlink" title="函數（Functions）"></a>函數（Functions）</h3><p>有內建函數或是自訂函數，如 <code>GETDATE()</code>，自訂的是 資料表值函式 或是 純量值函式</p><h3 id="註解（Comments）"><a href="#註解（Comments）" class="headerlink" title="註解（Comments）"></a>註解（Comments）</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- SELECT *</span></span><br><span class="line"><span class="comment">-- FROM Salaries</span></span><br><span class="line"><span class="comment">-- WHERE Salary >= 30000</span></span><br></pre></td></tr></tbody></table></figure></div><hr><h2 id="指令種類"><a href="#指令種類" class="headerlink" title="指令種類"></a>指令種類</h2><h3 id="資料定義語言-DDL（Data-Definition-Language）"><a href="#資料定義語言-DDL（Data-Definition-Language）" class="headerlink" title="資料定義語言 DDL（Data Definition Language）"></a>資料定義語言 DDL（Data Definition Language）</h3><p>新增、修改、刪除資料庫物件，資料庫物件有：資料表、檢視表、索引、預存程序、函數、觸發程序等</p><h3 id="資料操作語言-DML（Data-Manipulation-Language）"><a href="#資料操作語言-DML（Data-Manipulation-Language）" class="headerlink" title="資料操作語言 DML（Data Manipulation Language）"></a>資料操作語言 DML（Data Manipulation Language）</h3><p>針對資料表的指令，用來新增、修改、刪除，還有查詢資料表的資料，指令：INSERT、UPDATE、DELETE、SELECT</p><h3 id="資料控制語言-DCL（Data-Control-Language）"><a href="#資料控制語言-DCL（Data-Control-Language）" class="headerlink" title="資料控制語言 DCL（Data Control Language）"></a>資料控制語言 DCL（Data Control Language）</h3><p>資料庫安全管理的權限設定，指令：GRANT、DENY、REVOKE 等等</p></body></html>]]></content>
      
      
      <categories>
          
          <category> w3HexSchool </category>
          
          <category> T-SQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> w3HexSchool </tag>
            
            <tag> T-SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>讀書筆記 - UML 物件導向系統分析與設計（Part 8） 循序圖</title>
      <link href="/2020/10/18/202010-reading-notes-uml-part-8/"/>
      <url>/2020/10/18/202010-reading-notes-uml-part-8/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><p>Hi，大家好，本篇文紀錄 <a href="https://www.books.com.tw/products/0010840839">UML 物件導向系統分析與設計</a> 這本書的節錄</p><hr><h2 id="動態觀點"><a href="#動態觀點" class="headerlink" title="動態觀點"></a>動態觀點</h2><p>物件之間如何互相溝通、傳遞訊息，像是使用者的操作動作，而後對操作動作做出回應</p><p>UML 定義了四種可以描述物件之間互動的圖形</p><ol><li><p>循序圖（Sequence Diagram）</p><p>塑模不同物件之間傳遞訊息的先後順序</p></li><li><p>通訊圖（Communication Diagram）</p><p>強調合作的物件之間的結構</p></li><li><p>互動概觀圖（Interaction Overview Diagram）</p><p>活動圖的變形，描述高層次的控制流程</p></li><li><p>時序圖（Timing Diagram）</p><p>著重在時間，生命線或者生命線在時間軸上的改變</p></li></ol><p>本篇會以 <strong>循序圖</strong> 為主來進行介紹</p><hr><h2 id="生命線（Lifeline）"><a href="#生命線（Lifeline）" class="headerlink" title="生命線（Lifeline）"></a>生命線（Lifeline）</h2><p><a href="https://i.imgur.com/HJmFPsW.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/HJmFPsW.png" class="lazyload"></a></p><p>物件底下垂直的虛線為生命線</p><h2 id="啟動生命線（Activation-Lifeline）"><a href="#啟動生命線（Activation-Lifeline）" class="headerlink" title="啟動生命線（Activation Lifeline）"></a>啟動生命線（Activation Lifeline）</h2><p>也可稱 <strong>控制焦點</strong>（Focus of Control）</p><p><a href="https://i.imgur.com/t9WIRlX.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/t9WIRlX.png" class="lazyload"></a></p><p>上圖的生命線中的長條方形為啟動生命線</p><h2 id="訊息（Message）"><a href="#訊息（Message）" class="headerlink" title="訊息（Message）"></a>訊息（Message）</h2><p><a href="https://i.imgur.com/7grLCqT.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/7grLCqT.png" class="lazyload"></a></p><p>上圖的實心三角形箭頭直線，為同步訊息</p><hr><h2 id="參考來源"><a href="#參考來源" class="headerlink" title="參考來源"></a>參考來源</h2><p><a href="https://www.books.com.tw/products/0010840839">https://www.books.com.tw/products/0010840839</a></p></body></html>]]></content>
      
      
      <categories>
          
          <category> w3HexSchool </category>
          
          <category> UML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> w3HexSchool </tag>
            
            <tag> UML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VSCode - 從 Hello World 開始，自己做一個 VSCode 擴充套件（Extension）</title>
      <link href="/2020/10/11/202010-vscode-first-extension/"/>
      <url>/2020/10/11/202010-vscode-first-extension/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><p>Hi，大家好，最近心血來潮的想做一個程式碼格式化的工具，要針對 SQL 來做處理，格式化的需求想要能完全按照自己的特殊習慣來調整</p><p>原本打算直接用個 HTML 的 textarea 直接寫邏輯來做，但是，沒有那麼簡單啊！比想像中的還要有料，不是，是比想像中的還要困難 XD，在一陣東查查西找找後，覺得這要完全認得一堆 SQL 的關鍵字或什麼小括號、大括號等等的，如果冒冒失失的做成一遇到括號就亂給空白那絕對不行</p><p>後來不知怎的想到可以玩看看還沒有玩過的 VSCode 擴充套件，希望可以藉由練習玩 VSCode 擴充套件，來更了解 IDE 的功能，進而發掘程式碼格式化的眉角</p><hr><h2 id="Your-First-Extension"><a href="#Your-First-Extension" class="headerlink" title="Your First Extension"></a><a href="https://code.visualstudio.com/api/get-started/your-first-extension">Your First Extension</a></h2><h3 id="安裝擴充套件專案生成懶人包"><a href="#安裝擴充套件專案生成懶人包" class="headerlink" title="安裝擴充套件專案生成懶人包"></a>安裝擴充套件專案生成懶人包</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -g yo generator-code</span><br></pre></td></tr></tbody></table></figure></div><hr><h3 id="執行擴充套件專案生成"><a href="#執行擴充套件專案生成" class="headerlink" title="執行擴充套件專案生成"></a>執行擴充套件專案生成</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -g yo generator-code</span><br></pre></td></tr></tbody></table></figure></div><h3 id="選擇-New-Extension-TypeScript"><a href="#選擇-New-Extension-TypeScript" class="headerlink" title="選擇 New Extension (TypeScript)"></a>選擇 New Extension (TypeScript)</h3><p><a href="https://i.imgur.com/b5AzdFu.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/b5AzdFu.png" class="lazyload"></a></p><h3 id="輸入專案名稱-name-，然後就一路-Enter-到底"><a href="#輸入專案名稱-name-，然後就一路-Enter-到底" class="headerlink" title="輸入專案名稱 (name)，然後就一路 Enter 到底"></a>輸入專案名稱 (name)，然後就一路 Enter 到底</h3><p><a href="https://i.imgur.com/SJri9jV.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/SJri9jV.png" class="lazyload"></a></p><hr><h3 id="這時會生成一個-hello-world-的專案資料夾"><a href="#這時會生成一個-hello-world-的專案資料夾" class="headerlink" title="這時會生成一個 hello-world 的專案資料夾"></a>這時會生成一個 hello-world 的專案資料夾</h3><p>專案結構是這個樣子的</p><p><a href="https://i.imgur.com/MA6Ubuh.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/MA6Ubuh.png" class="lazyload"></a></p><hr><h3 id="介紹一下-package-json-的重點部分"><a href="#介紹一下-package-json-的重點部分" class="headerlink" title="介紹一下 package.json 的重點部分"></a>介紹一下 package.json 的重點部分</h3><p><a href="https://i.imgur.com/qboV2Tl.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/qboV2Tl.png" class="lazyload"></a></p><h4 id="activationEvents"><a href="#activationEvents" class="headerlink" title="activationEvents"></a>activationEvents</h4><p>這個屬性設定執行的事件</p><p>onCommand 代表的是 VSCode 執行指令時觸發</p><h4 id="main"><a href="#main" class="headerlink" title="main"></a>main</h4><p>執行的主程式路徑</p><h4 id="contributes"><a href="#contributes" class="headerlink" title="contributes"></a>contributes</h4><p>聲明 VSCode 執行的指令，之後用 Ctrl + Shift + P 然後輸入 title 的內容 Hello World 就可以執行主程式</p><hr><h3 id="src-extensions-ts-預設的程式碼"><a href="#src-extensions-ts-預設的程式碼" class="headerlink" title="src/extensions.ts 預設的程式碼"></a>src/extensions.ts 預設的程式碼</h3><p><a href="https://i.imgur.com/sagfJQn.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/sagfJQn.png" class="lazyload"></a></p><p>16 行 註冊了指令 hello-world.helloWorld</p><p>20 行 執行 show message</p><hr><h3 id="運行起來，F5"><a href="#運行起來，F5" class="headerlink" title="運行起來，F5"></a>運行起來，F5</h3><p><a href="https://i.imgur.com/YgWkL6u.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/YgWkL6u.png" class="lazyload"></a></p><p>開啟了新的編輯器視窗，視窗上的文字有 [延伸模組開發主機]</p><h3 id="Ctrl-Shift-P，然後輸入指令"><a href="#Ctrl-Shift-P，然後輸入指令" class="headerlink" title="Ctrl + Shift + P，然後輸入指令"></a>Ctrl + Shift + P，然後輸入指令</h3><p><a href="https://i.imgur.com/O28U9hS.gif" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/O28U9hS.gif" class="lazyload"></a></p><hr><h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>以上就是自己建一個 VSCode Extension 的基本方式，還有很多 vscode 的屬性還沒介紹到，以及最後一定要發布 Extension，留待之後有機會會再繼續補</p><hr><h2 id="參考來源"><a href="#參考來源" class="headerlink" title="參考來源"></a>參考來源</h2><p><a href="https://code.visualstudio.com/api/get-started/your-first-extension">https://code.visualstudio.com/api/get-started/your-first-extension</a></p></body></html>]]></content>
      
      
      <categories>
          
          <category> w3HexSchool </category>
          
          <category> VSCode </category>
          
          <category> Extension </category>
          
      </categories>
      
      
        <tags>
            
            <tag> w3HexSchool </tag>
            
            <tag> VSCode </tag>
            
            <tag> Extension </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>讀書筆記 - UML 物件導向系統分析與設計（Part 7） 類別圖 - 下</title>
      <link href="/2020/10/04/202010-reading-notes-uml-part-7/"/>
      <url>/2020/10/04/202010-reading-notes-uml-part-7/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><p>Hi，大家好，本篇文紀錄 <a href="https://www.books.com.tw/products/0010840839">UML 物件導向系統分析與設計</a> 這本書的節錄</p><p>類別圖是用來為物件的資料結構塑模，以及表達物件之間的關係</p><hr><h2 id="關聯"><a href="#關聯" class="headerlink" title="關聯"></a>關聯</h2><p>學生修課，老師教導課程</p><p><a href="https://i.imgur.com/71XWVzj.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/71XWVzj.png" class="lazyload"></a></p><h2 id="多重性"><a href="#多重性" class="headerlink" title="多重性"></a>多重性</h2><p>關係之間的物件數量</p><p><a href="https://i.imgur.com/8tuuQyX.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/8tuuQyX.png" class="lazyload"></a></p><hr><h2 id="組合（Composition）"><a href="#組合（Composition）" class="headerlink" title="組合（Composition）"></a>組合（Composition）</h2><p>組合是較強的包含關係，如果教計算機概論的老師沒了，那這個課程也不會存在</p><p><a href="https://i.imgur.com/nsshrFM.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/nsshrFM.png" class="lazyload"></a></p><h2 id="聚合（Aggregation）"><a href="#聚合（Aggregation）" class="headerlink" title="聚合（Aggregation）"></a>聚合（Aggregation）</h2><p>程式設計課會有學生選修，那如果課程沒了，學生也可以選修其他課程</p><p><a href="https://i.imgur.com/wobx52L.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/wobx52L.png" class="lazyload"></a></p><hr><h2 id="一般化（Generalization）"><a href="#一般化（Generalization）" class="headerlink" title="一般化（Generalization）"></a>一般化（Generalization）</h2><p>一般化關係在程式語言中是用 extends 來表示</p><p><a href="https://i.imgur.com/JKEkILl.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/JKEkILl.png" class="lazyload"></a></p><hr><h2 id="相依（Dependency）"><a href="#相依（Dependency）" class="headerlink" title="相依（Dependency）"></a>相依（Dependency）</h2><p><a href="https://i.imgur.com/FG0ndDY.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/FG0ndDY.png" class="lazyload"></a></p><hr><h2 id="具體化（Realization）"><a href="#具體化（Realization）" class="headerlink" title="具體化（Realization）"></a>具體化（Realization）</h2><p>一般化關係在程式語言中是用 implement 來表示</p><h2 id><a href="#" class="headerlink" title></a><a href="https://i.imgur.com/K9dqauZ.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/K9dqauZ.png" class="lazyload"></a></h2><h2 id="參考來源"><a href="#參考來源" class="headerlink" title="參考來源"></a>參考來源</h2><p><a href="https://www.books.com.tw/products/0010840839">https://www.books.com.tw/products/0010840839</a></p></body></html>]]></content>
      
      
      <categories>
          
          <category> w3HexSchool </category>
          
          <category> UML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> w3HexSchool </tag>
            
            <tag> UML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>讀書筆記 - UML 物件導向系統分析與設計（Part 6） 類別圖 - 上</title>
      <link href="/2020/09/27/202009-reading-notes-uml-part-6/"/>
      <url>/2020/09/27/202009-reading-notes-uml-part-6/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><p>Hi，大家好，本篇文紀錄 <a href="https://www.books.com.tw/products/0010840839">UML 物件導向系統分析與設計</a> 這本書的節錄</p><p>類別圖是用來為物件的資料結構塑模，以及表達物件之間的關係</p><hr><h2 id="8-2-符號"><a href="#8-2-符號" class="headerlink" title="8.2 符號"></a>8.2 符號</h2><p>類別圖用來描述屬性（Attribute）與操作（Operation）</p><p><a href="https://i.imgur.com/Ydzd6Pf.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/Ydzd6Pf.png" class="lazyload"></a></p><h2 id="8-2-4-屬性的能見度"><a href="#8-2-4-屬性的能見度" class="headerlink" title="8.2.4 屬性的能見度"></a>8.2.4 屬性的能見度</h2><p>保護類別的封裝機制</p><p><a href="https://i.imgur.com/btPxmzg.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/btPxmzg.png" class="lazyload"></a></p><h2 id="屬性的資料型態"><a href="#屬性的資料型態" class="headerlink" title="屬性的資料型態"></a>屬性的資料型態</h2><p><a href="https://i.imgur.com/yd5Hlq0.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/yd5Hlq0.png" class="lazyload"></a></p><h2 id="8-2-5-操作"><a href="#8-2-5-操作" class="headerlink" title="8.2.5 操作"></a>8.2.5 操作</h2><p><a href="https://i.imgur.com/Ydzd6Pf.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/Ydzd6Pf.png" class="lazyload"></a></p><p>三種基本型態的操作</p><h3 id="1-建構子"><a href="#1-建構子" class="headerlink" title="1. 建構子"></a>1. 建構子</h3><p>建構物件時執行</p><h3 id="2-詢問的操作"><a href="#2-詢問的操作" class="headerlink" title="2. 詢問的操作"></a>2. 詢問的操作</h3><p>getter，用來取得屬性值，如 getName()</p><h3 id="3-更新的操作"><a href="#3-更新的操作" class="headerlink" title="3. 更新的操作"></a>3. 更新的操作</h3><p>setter，用來更新屬性值，如 setName()</p><hr><h2 id="參考來源"><a href="#參考來源" class="headerlink" title="參考來源"></a>參考來源</h2><p><a href="https://www.books.com.tw/products/0010840839">https://www.books.com.tw/products/0010840839</a></p></body></html>]]></content>
      
      
      <categories>
          
          <category> w3HexSchool </category>
          
          <category> UML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> w3HexSchool </tag>
            
            <tag> UML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>讀書筆記 - UML 物件導向系統分析與設計（Part 5） 活動圖</title>
      <link href="/2020/09/20/202009-reading-notes-uml-part-5/"/>
      <url>/2020/09/20/202009-reading-notes-uml-part-5/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><p>Hi，大家好，本篇文紀錄 <a href="https://www.books.com.tw/products/0010840839">UML 物件導向系統分析與設計</a> 這本書的節錄</p><p>活動圖可視為傳統流程圖的延伸，一般可以對以下幾種來塑模</p><ol><li>企業處理工作流程</li><li>使用案例的流程分析</li><li>商務規則邏輯塑模</li><li>功能處理</li><li>使用者介面流程</li></ol><hr><h2 id="7-2-符號"><a href="#7-2-符號" class="headerlink" title="7.2 符號"></a>7.2 符號</h2><p>活動圖由節點（Node）及邊（Edge）所構成</p><ul><li>節點（Node）：表示動作、控制，或是物件</li><li>邊（Edge）：表示活動的流向</li></ul><h3 id="活動起始節點（Activity-Start）"><a href="#活動起始節點（Activity-Start）" class="headerlink" title="活動起始節點（Activity Start）"></a>活動起始節點（Activity Start）</h3><p>代表一個活動的開始</p><p><a href="https://i.imgur.com/F6mVB3r.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/F6mVB3r.png" class="lazyload"></a></p><h3 id="活動終止節點（Activity-Final）"><a href="#活動終止節點（Activity-Final）" class="headerlink" title="活動終止節點（Activity Final）"></a>活動終止節點（Activity Final）</h3><p>代表一個活動的結束</p><p><a href="https://i.imgur.com/ztVOurN.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/ztVOurN.png" class="lazyload"></a></p><h3 id="動作（Action）節點"><a href="#動作（Action）節點" class="headerlink" title="動作（Action）節點"></a>動作（Action）節點</h3><p>表示所執行的動作，一序列的動作稱為活動</p><p><a href="https://i.imgur.com/SYjgjoe.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/SYjgjoe.png" class="lazyload"></a></p><h3 id="控制流程（Control-Flow）"><a href="#控制流程（Control-Flow）" class="headerlink" title="控制流程（Control Flow）"></a>控制流程（Control Flow）</h3><p>表示一個動作到另一個動作的流向</p><p><a href="https://i.imgur.com/kk8dwMB.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/kk8dwMB.png" class="lazyload"></a></p><h3 id="物件流程（Object-Flow）"><a href="#物件流程（Object-Flow）" class="headerlink" title="物件流程（Object Flow）"></a>物件流程（Object Flow）</h3><p>動作旁邊加上小方塊表示此動作是輸出還是輸入物件</p><p><a href="https://i.imgur.com/vXJadF5.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/vXJadF5.png" class="lazyload"></a></p><h3 id="分岔（Fork）節點"><a href="#分岔（Fork）節點" class="headerlink" title="分岔（Fork）節點"></a>分岔（Fork）節點</h3><p>接續的動作分成兩個以上同步進行的動作</p><p><a href="https://i.imgur.com/qVdWN4K.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/qVdWN4K.png" class="lazyload"></a></p><h3 id="結合（Join）節點"><a href="#結合（Join）節點" class="headerlink" title="結合（Join）節點"></a>結合（Join）節點</h3><p>等所有的動作都完成了，才會繼續執行接下來的動作</p><p><a href="https://i.imgur.com/oQWyYr1.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/oQWyYr1.png" class="lazyload"></a></p><h3 id="決策-合併節點（Decision-Merge）"><a href="#決策-合併節點（Decision-Merge）" class="headerlink" title="決策 / 合併節點（Decision/Merge）"></a>決策 / 合併節點（Decision/Merge）</h3><p>一個進入的流向，而後有兩個以上離開的流向可以選</p><p><a href="https://i.imgur.com/9KaZZx8.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/9KaZZx8.png" class="lazyload"></a></p><h3 id="物件（Object）節點"><a href="#物件（Object）節點" class="headerlink" title="物件（Object）節點"></a>物件（Object）節點</h3><p>表示活動是輸入資料還是輸出資料</p><p><a href="https://i.imgur.com/gIpM05S.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/gIpM05S.png" class="lazyload"></a></p><h3 id="送出訊號（Sending-Signal）"><a href="#送出訊號（Sending-Signal）" class="headerlink" title="送出訊號（Sending Signal）"></a>送出訊號（Sending Signal）</h3><p>事件發生所產生的訊號</p><p><a href="https://i.imgur.com/MfJg2Kr.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/MfJg2Kr.png" class="lazyload"></a></p><h3 id="接收訊號（Receiving-Signal）"><a href="#接收訊號（Receiving-Signal）" class="headerlink" title="接收訊號（Receiving Signal）"></a>接收訊號（Receiving Signal）</h3><p>一個動作的執行是因為接收了什麼樣的事件</p><p><a href="https://i.imgur.com/PaSfA50.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/PaSfA50.png" class="lazyload"></a></p><h3 id="流程終止（Flow-Final）節點"><a href="#流程終止（Flow-Final）節點" class="headerlink" title="流程終止（Flow Final）節點"></a>流程終止（Flow Final）節點</h3><p>流程的結束</p><p><a href="https://i.imgur.com/KdXZk1h.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/KdXZk1h.png" class="lazyload"></a></p><h3 id="動作之前置條件-後置條件"><a href="#動作之前置條件-後置條件" class="headerlink" title="動作之前置條件 / 後置條件"></a>動作之前置條件 / 後置條件</h3><p>動作發生前或是發生後所需滿足的條件</p><p><a href="https://i.imgur.com/uvFWHF9.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/uvFWHF9.png" class="lazyload"></a></p><h3 id="時間訊號（Time-Signal）"><a href="#時間訊號（Time-Signal）" class="headerlink" title="時間訊號（Time Signal）"></a>時間訊號（Time Signal）</h3><p>時間，像是排程的應用</p><p><a href="https://i.imgur.com/wRQbkCS.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/wRQbkCS.png" class="lazyload"></a></p><h3 id="可中斷區（Interrupted-Activity-Region）"><a href="#可中斷區（Interrupted-Activity-Region）" class="headerlink" title="可中斷區（Interrupted Activity Region）"></a>可中斷區（Interrupted Activity Region）</h3><p>區域內的動作可能被中斷</p><p><a href="https://i.imgur.com/xDNMOh5.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/xDNMOh5.png" class="lazyload"></a></p><h3 id="中斷（Interrupting-Edge）"><a href="#中斷（Interrupting-Edge）" class="headerlink" title="中斷（Interrupting Edge）"></a><del>中斷</del>（Interrupting Edge）</h3><p>表示中斷活動後的流向</p><h3 id="連結器（Connector）"><a href="#連結器（Connector）" class="headerlink" title="連結器（Connector）"></a><del>連結器</del>（Connector）</h3><p>連結不連續的流向</p><hr><h2 id="參考來源"><a href="#參考來源" class="headerlink" title="參考來源"></a>參考來源</h2><p><a href="https://www.books.com.tw/products/0010840839">https://www.books.com.tw/products/0010840839</a></p></body></html>]]></content>
      
      
      <categories>
          
          <category> w3HexSchool </category>
          
          <category> UML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> w3HexSchool </tag>
            
            <tag> UML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>讀書筆記 - UML 物件導向系統分析與設計（Part 4） 使用案例圖 - 下</title>
      <link href="/2020/09/13/202009-reading-notes-uml-part-4/"/>
      <url>/2020/09/13/202009-reading-notes-uml-part-4/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><p>Hi，大家好，本篇文紀錄 <a href="https://www.books.com.tw/products/0010840839">UML 物件導向系統分析與設計</a> 這本書的節錄</p><p>本篇為書本中第五章的後半段，想要從前半段的開始可以先從我的前一篇文 <a href="https://littlehorseboy.github.io/2020/09/06/202008-reading-notes-uml-part-3/">讀書筆記 - UML 物件導向系統分析與設計（Part 3） 使用案例圖 - 上</a></p><hr><h2 id="5-3-關係"><a href="#5-3-關係" class="headerlink" title="5.3 關係"></a>5.3 關係</h2><p>使用案例的『關係』，最常用到的兩種是『包含關係』（Include）以及『延伸關係』（Extend）</p><hr><h2 id="5-3-1-包含關係"><a href="#5-3-1-包含關係" class="headerlink" title="5.3.1 包含關係"></a>5.3.1 包含關係</h2><p>一個使用案例 A 在執行的過程中一定會使用到使用案例 B，那麼案例 A 包含案例 B</p><p><a href="https://i.imgur.com/pNRHqjR.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/pNRHqjR.png" class="lazyload"></a></p><p>上圖表示圖書館管理員要進行借書或是還書的動作，必定包含要掃條碼的動作來讓系統讀碼</p><hr><h2 id="5-3-2-延伸關係"><a href="#5-3-2-延伸關係" class="headerlink" title="5.3.2 延伸關係"></a>5.3.2 延伸關係</h2><p>在某個條件成立才會產生的延伸</p><p><a href="https://i.imgur.com/0VjHWCh.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/0VjHWCh.png" class="lazyload"></a></p><p>顧客下訂單時，遇到沒有存貨的情況，就會進行訂貨</p><hr><h2 id="Stereotype"><a href="#Stereotype" class="headerlink" title="Stereotype"></a>Stereotype</h2><blockquote><p>TIP<br>在上面兩張使用案例圖中，分別在關聯的虛線旁寫上 <code><<include>></include></code> 及 <code><<extend>></extend></code>，這個符號 + 文字在 UML 稱為 Stereotype，用來擴充 UML 的詞彙</p><p><code>Include</code> 及 <code>Extend</code> 是 UML 本身有針對一些情形所定義的 Stereotype，也可以自行定義 UML 的詞彙來擴充語意，格式: <code><<詞彙>></code></p></blockquote><hr><h2 id="5-3-3-一般化關係"><a href="#5-3-3-一般化關係" class="headerlink" title="5.3.3 一般化關係"></a>5.3.3 一般化關係</h2><p>一般化關係可以加使用案例『細分』，就像是父類別有許多子類別繼承的概念</p><p><a href="https://i.imgur.com/1yFzyec.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/1yFzyec.png" class="lazyload"></a></p><p>訂票細分成了『網路訂票』及『ibon 訂票』兩種</p><hr><h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>使用案例塑模利用圖形的方式從高層次的觀點來描繪系統功能，適合用來與計劃相關人員解說系統功能</p><hr><h2 id="參考來源"><a href="#參考來源" class="headerlink" title="參考來源"></a>參考來源</h2><p><a href="https://www.books.com.tw/products/0010840839">https://www.books.com.tw/products/0010840839</a></p></body></html>]]></content>
      
      
      <categories>
          
          <category> w3HexSchool </category>
          
          <category> UML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> w3HexSchool </tag>
            
            <tag> UML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>讀書筆記 - UML 物件導向系統分析與設計（Part 3） 使用案例圖 - 上</title>
      <link href="/2020/09/06/202009-reading-notes-uml-part-3/"/>
      <url>/2020/09/06/202009-reading-notes-uml-part-3/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><p>Hi，大家好，本篇文紀錄 <a href="https://www.books.com.tw/products/0010840839">UML 物件導向系統分析與設計</a> 這本書的節錄</p><hr><h2 id="5-1-使用案例圖的目的"><a href="#5-1-使用案例圖的目的" class="headerlink" title="5.1 使用案例圖的目的"></a>5.1 使用案例圖的目的</h2><ol><li>系統的需求，塑模系統該做什麼（What）</li><li>從高層次的角度辨識系統提供的功能</li><li>從系統的外部看系統用途</li></ol><p>捕捉系統的需求、塑模系統的功能、系統的用途</p><p>從需求分析文件中找出與系統互動的角色，不同角色與使用案例之間的關聯性、相互關係</p><hr><h2 id="5-2-使用案例圖的符號"><a href="#5-2-使用案例圖的符號" class="headerlink" title="5.2 使用案例圖的符號"></a>5.2 使用案例圖的符號</h2><p>使用案例圖主要的圖形：演員、使用案例、連結線以及關係</p><hr><h2 id="5-2-1-演員（Actor）"><a href="#5-2-1-演員（Actor）" class="headerlink" title="5.2.1 演員（Actor）"></a>5.2.1 演員（Actor）</h2><p><a href="https://i.imgur.com/GlFk6zP.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/GlFk6zP.png" class="lazyload"></a></p><p>可以把演員（Actor）當成使用者、參與者、或是角色，不一定是真正的人，也可以是系統或是排程</p><p><a href="https://i.imgur.com/y8Iv43s.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/y8Iv43s.png" class="lazyload"></a></p><p><a href="https://i.imgur.com/ro3Qu4l.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/ro3Qu4l.png" class="lazyload"></a></p><hr><h2 id="5-2-2-角色的找法"><a href="#5-2-2-角色的找法" class="headerlink" title="5.2.2 角色的找法"></a>5.2.2 角色的找法</h2><ul><li>誰需要使用到此系統？</li><li>誰提供這些資訊？</li><li>誰需要這些資訊？</li><li>誰可以改變這些資訊？</li><li>誰可以刪除這些資訊？</li></ul><hr><h2 id="參考來源"><a href="#參考來源" class="headerlink" title="參考來源"></a>參考來源</h2><p><a href="https://www.books.com.tw/products/0010840839">https://www.books.com.tw/products/0010840839</a></p></body></html>]]></content>
      
      
      <categories>
          
          <category> w3HexSchool </category>
          
          <category> UML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> w3HexSchool </tag>
            
            <tag> UML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>讀書筆記 - UML 物件導向系統分析與設計（Part 2） 事件與功能</title>
      <link href="/2020/08/30/202008-reading-notes-uml-part-2/"/>
      <url>/2020/08/30/202008-reading-notes-uml-part-2/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><p>Hi，大家好，本篇文紀錄 <a href="https://www.books.com.tw/products/0010840839">UML 物件導向系統分析與設計</a> 這本書的節錄</p><hr><h2 id="3-1-計畫"><a href="#3-1-計畫" class="headerlink" title="3.1 - 計畫"></a>3.1 - 計畫</h2><h3 id="可行性評估"><a href="#可行性評估" class="headerlink" title="可行性評估"></a>可行性評估</h3><ol><li>操作可行性：系統開發完成後能夠被有效的應用嗎？</li><li>技術可行性：系統開發相關的硬體、軟體技術評估</li><li>經濟可行性：開發或維護成本，經濟效益</li></ol><hr><h2 id="4-3-1-需求的分類"><a href="#4-3-1-需求的分類" class="headerlink" title="4.3.1 需求的分類"></a>4.3.1 需求的分類</h2><h3 id="功能的需求"><a href="#功能的需求" class="headerlink" title="功能的需求"></a>功能的需求</h3><p>輸入輸出，處理流程與步驟</p><h3 id="非功能的需求"><a href="#非功能的需求" class="headerlink" title="非功能的需求"></a>非功能的需求</h3><ol><li>反應時間（Response Time）：觸發事件執行，花費的時間</li><li>使用性（Usability）：使用者訓練時間</li><li>可靠度（Reliability）：不當機，不存取錯誤</li><li>效能（Performance）：每秒處理交易量</li><li>維護性（Maintainability）：程式碼品質，好的開發文件，最好還要有自動測試</li></ol><hr><h2 id="4-3-3-事件"><a href="#4-3-3-事件" class="headerlink" title="4.3.3 事件"></a>4.3.3 事件</h2><p>系統是與使用者互動的，使用者製造某些事件來驅動系統要做什麼，事件與功能是一體兩面的概念</p><h2 id="4-3-4-事件表"><a href="#4-3-4-事件表" class="headerlink" title="4.3.4 事件表"></a>4.3.4 事件表</h2><table><thead><tr><th>事件名稱</th><th>觸發器</th><th>來源</th><th>活動</th><th>回應</th><th>目的地</th></tr></thead><tbody><tr><td>顧客下訂單</td><td>訂單</td><td>顧客</td><td>產生一筆新訂單</td><td>訂單編號</td><td>使用者</td></tr></tbody></table><h2 id="4-3-6-詞彙表（Glossary）"><a href="#4-3-6-詞彙表（Glossary）" class="headerlink" title="4.3.6 詞彙表（Glossary）"></a>4.3.6 詞彙表（Glossary）</h2><p>事件表紀錄中，如果有牽涉到更多領域知識相關的資料，可以利用詞彙表來記錄，整理</p><table><thead><tr><th>詞彙</th><th>詞彙分解</th><th>附註</th></tr></thead><tbody><tr><td>訂單</td><td>包含有客戶資料、訂購項目</td><td></td></tr></tbody></table><hr><h2 id="參考來源"><a href="#參考來源" class="headerlink" title="參考來源"></a>參考來源</h2><p><a href="https://www.books.com.tw/products/0010840839">https://www.books.com.tw/products/0010840839</a></p></body></html>]]></content>
      
      
      <categories>
          
          <category> w3HexSchool </category>
          
          <category> UML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> w3HexSchool </tag>
            
            <tag> UML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>讀書筆記 - UML 物件導向系統分析與設計（Part 1） RUP 開發方法論與 UML</title>
      <link href="/2020/08/23/202008-reading-notes-uml-part-1/"/>
      <url>/2020/08/23/202008-reading-notes-uml-part-1/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><p>Hi，大家好，本篇文紀錄 <a href="https://www.books.com.tw/products/0010840839">UML 物件導向系統分析與設計</a> 這本書的節錄，想讓自己加深印象</p><p>會選擇這本書的原因是，想要讓自己對於系統開發的面向有更多的理解，以及在各種開發過程中，能夠加強撰寫文件及用圖表來視覺化的能力，更重要的是希望，在系統越來越複雜時，能夠降低系統維護的成本，有好文件紀錄著系統架構，避免零散的程式邏輯，提升系統的品質，且更具有可擴展性及可維護性</p><hr><h2 id="1-3-系統開發生命週期"><a href="#1-3-系統開發生命週期" class="headerlink" title="1.3 - 系統開發生命週期"></a>1.3 - 系統開發生命週期</h2><p>約略分為四個階段</p><p><a href="https://i.imgur.com/8SqjvG6.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/8SqjvG6.png" class="lazyload"></a></p><h3 id="計畫階段"><a href="#計畫階段" class="headerlink" title="計畫階段"></a>計畫階段</h3><p>可行性分析（經濟面、技術面）、實質利益、價值</p><p>文件產出：計畫書及工作報告書</p><p>計畫階段在回答：Why</p><h3 id="分析階段"><a href="#分析階段" class="headerlink" title="分析階段"></a>分析階段</h3><p>分析需求，要提供什麼樣的功能？</p><p>文件產出：需求文件</p><p>需求文件可分為 <code>功能的需求描述</code> 及 <code>非功能的需求描述</code>，不牽涉實作細節</p><p>分析階段在回答：What</p><h3 id="設計階段"><a href="#設計階段" class="headerlink" title="設計階段"></a>設計階段</h3><p>如何達成系統的需求</p><p>系統架構模型，包括硬體設施與配置與組態、軟體架構的模型、使用者介面的設計、輸出報表格式的樣式等等</p><p>文件產出：系統架構書</p><p>設計階段在回答：How</p><h3 id="實作階段"><a href="#實作階段" class="headerlink" title="實作階段"></a>實作階段</h3><p>根據前幾個階段的文件產出，開發團隊開始建立系統</p><p>可能會擬定測試計畫書</p><p>產出為最終的系統成品，有撰寫測試就會有測試文件</p><hr><h2 id="1-4-2-Rational-Unified-Process（RUP）-物件導向系統開發的方法論"><a href="#1-4-2-Rational-Unified-Process（RUP）-物件導向系統開發的方法論" class="headerlink" title="1.4.2 - Rational Unified Process（RUP） 物件導向系統開發的方法論"></a>1.4.2 - Rational Unified Process（RUP） 物件導向系統開發的方法論</h2><p>任何以物件導向為基礎的系統開發，都必須依循三個方向</p><h3 id="1-由使用案例驅動（Use-CaseDriven）"><a href="#1-由使用案例驅動（Use-CaseDriven）" class="headerlink" title="1. 由使用案例驅動（Use-CaseDriven）"></a>1. 由使用案例驅動（Use-CaseDriven）</h3><p>以使用者的角度來看系統該所需的流程並以此為系統開發的出發點</p><h3 id="2-以架構為中心（ArchitectureCentric）"><a href="#2-以架構為中心（ArchitectureCentric）" class="headerlink" title="2. 以架構為中心（ArchitectureCentric）"></a>2. 以架構為中心（ArchitectureCentric）</h3><p>對於系統架構，可以利用許多不同的觀點，如 RUP 所提出有關架構藍圖的 4 + 1 觀點</p><h3 id="3-反覆且漸進（Iterative-and-Incremental）"><a href="#3-反覆且漸進（Iterative-and-Incremental）" class="headerlink" title="3. 反覆且漸進（Iterative and Incremental）"></a>3. 反覆且漸進（Iterative and Incremental）</h3><p>疊代式開發</p><p><a href="https://i.imgur.com/XiPfdWk.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/XiPfdWk.png" class="lazyload"></a></p><hr><h2 id="2-2-UML-中的-4-1-觀點"><a href="#2-2-UML-中的-4-1-觀點" class="headerlink" title="2.2 - UML 中的 4 + 1 觀點"></a>2.2 - UML 中的 4 + 1 觀點</h2><h3 id="1-使用案例觀點（Use-Case-View）"><a href="#1-使用案例觀點（Use-Case-View）" class="headerlink" title="1. 使用案例觀點（Use Case View）"></a>1. 使用案例觀點（Use Case View）</h3><p>從使用者角度，表達系統所提供的功能（4 + 1 中的 1 指的是使用案例觀點）</p><h3 id="2-設計觀點（Design-View）"><a href="#2-設計觀點（Design-View）" class="headerlink" title="2. 設計觀點（Design View）"></a>2. 設計觀點（Design View）</h3><p>系統的靜態結構及動態行為，圍繞在類別、介面及物件的合作等等設計問題上</p><h3 id="3-處理流程觀點（Process-View）"><a href="#3-處理流程觀點（Process-View）" class="headerlink" title="3. 處理流程觀點（Process View）"></a>3. 處理流程觀點（Process View）</h3><p>系統的性能、延展性等非功能性需求</p><h3 id="4-實作觀點（Implementation-View）"><a href="#4-實作觀點（Implementation-View）" class="headerlink" title="4. 實作觀點（Implementation View）"></a>4. 實作觀點（Implementation View）</h3><p>模組或元件來顯示設計觀點的物件是在哪一個模組或元件中實作</p><h3 id="5-部署觀點（Deployment-View）"><a href="#5-部署觀點（Deployment-View）" class="headerlink" title="5. 部署觀點（Deployment View）"></a>5. 部署觀點（Deployment View）</h3><p>系統執行環境的硬體拓樸結構</p><p><a href="https://i.imgur.com/8mXCAbn.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/8mXCAbn.png" class="lazyload"></a></p><hr><h2 id="2-3-UML-圖形簡介"><a href="#2-3-UML-圖形簡介" class="headerlink" title="2.3 - UML 圖形簡介"></a>2.3 - UML 圖形簡介</h2><h3 id="1-使用案例圖（Use-Case-Diagram）"><a href="#1-使用案例圖（Use-Case-Diagram）" class="headerlink" title="1. 使用案例圖（Use Case Diagram）"></a>1. 使用案例圖（Use Case Diagram）</h3><p>塑模出系統應該做什麼（What），描述系統所提供的功能以及其執行時的情節</p><h3 id="2-活動圖（Activity-Diagram）"><a href="#2-活動圖（Activity-Diagram）" class="headerlink" title="2. 活動圖（Activity Diagram）"></a>2. 活動圖（Activity Diagram）</h3><p>塑模出系統的處理邏輯以及執行流程。可用來檢視使用案例圖，找尋使用案例中所可能產生的各種不同情節</p><h3 id="3-類別圖（Class-Diagram）"><a href="#3-類別圖（Class-Diagram）" class="headerlink" title="3. 類別圖（Class Diagram）"></a>3. 類別圖（Class Diagram）</h3><p>塑模出問題領域中所參與的物件類別</p><h3 id="4-物件圖（Object-Diagram）"><a href="#4-物件圖（Object-Diagram）" class="headerlink" title="4. 物件圖（Object Diagram）"></a>4. 物件圖（Object Diagram）</h3><p>塑模出問題領域中所參與的實際物件</p><h3 id="5-循序圖（Sequence-Diagram）"><a href="#5-循序圖（Sequence-Diagram）" class="headerlink" title="5. 循序圖（Sequence Diagram）"></a>5. 循序圖（Sequence Diagram）</h3><p>塑模出問題領域中物件互動的情形，在一個使用案例中，物件與物件之間執行順序的時間性</p><h3 id="6-合作圖（Collaboration-Diagram）"><a href="#6-合作圖（Collaboration-Diagram）" class="headerlink" title="6. 合作圖（Collaboration Diagram）"></a>6. 合作圖（Collaboration Diagram）</h3><p>塑模出問題領域中物件之間互動的情形，合作的物件結構以完成一個使用案例</p><h3 id="7-狀態圖（State-Diagram）"><a href="#7-狀態圖（State-Diagram）" class="headerlink" title="7. 狀態圖（State Diagram）"></a>7. 狀態圖（State Diagram）</h3><p>塑模系統中物件、子系統、系統等，在其生命週期中各種可能的狀態</p><h3 id="8-元件圖（Component-Diagram）"><a href="#8-元件圖（Component-Diagram）" class="headerlink" title="8. 元件圖（Component Diagram）"></a>8. 元件圖（Component Diagram）</h3><p>元件的組織及相依性，也包含實作的介面</p><h3 id="9-部署圖（Deployment-Diagram）"><a href="#9-部署圖（Deployment-Diagram）" class="headerlink" title="9. 部署圖（Deployment Diagram）"></a>9. 部署圖（Deployment Diagram）</h3><p>執行時（Run-time）的配置，或是說硬體配置的靜態觀點以及硬體中的軟體元件</p><h2 id="4-1-觀點的每一個觀點，可以利用-UML-所提供的九種圖形來表達"><a href="#4-1-觀點的每一個觀點，可以利用-UML-所提供的九種圖形來表達" class="headerlink" title="4 + 1 觀點的每一個觀點，可以利用 UML 所提供的九種圖形來表達"></a>4 + 1 觀點的每一個觀點，可以利用 UML 所提供的九種圖形來表達</h2><table><thead><tr><th></th><th>靜態模型</th><th>動態模型</th></tr></thead><tbody><tr><td>使用案例觀點</td><td>使用案例圖</td><td>互動圖、狀態圖、活動圖</td></tr><tr><td>設計觀點</td><td>類別圖、物件圖</td><td>互動圖、狀態圖、活動圖</td></tr><tr><td>處理流程觀點</td><td>類別圖、物件圖</td><td>互動圖、狀態圖、活動圖</td></tr><tr><td>實作觀點</td><td>元件圖</td><td>互動圖、狀態圖、活動圖</td></tr><tr><td>部署網站</td><td>部署圖</td><td>互動圖、狀態圖、活動圖</td></tr></tbody></table><hr><h2 id="參考來源"><a href="#參考來源" class="headerlink" title="參考來源"></a>參考來源</h2><p><a href="https://www.books.com.tw/products/0010840839">https://www.books.com.tw/products/0010840839</a></p></body></html>]]></content>
      
      
      <categories>
          
          <category> w3HexSchool </category>
          
          <category> UML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> w3HexSchool </tag>
            
            <tag> UML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>T-SQL NULLIF - 比對如果相符合就回你一個 NULL 的函式</title>
      <link href="/2020/08/16/202008-t-sql-nullif/"/>
      <url>/2020/08/16/202008-t-sql-nullif/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><p>Hi，大家好，這次要介紹一個在 T-SQL 上的函式，就先直接來看看範例</p><h2 id="NULLIF"><a href="#NULLIF" class="headerlink" title="NULLIF"></a>NULLIF</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">NULLIF</span>(<span class="string">''</span>, <span class="string">''</span>)</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">NULLIF</span>(<span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">NULLIF</span>(<span class="number">123</span>, <span class="string">''</span>)</span><br></pre></td></tr></tbody></table></figure></div><p>執行結果</p><p><a href="https://i.imgur.com/96hJJhA.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/96hJJhA.png" class="lazyload"></a></p><p>可以看到使用 NULLIF 函數，如果兩個參數相符合，會回傳 NULL，如果不符合，就會回傳第一個參數的值</p><p>題外話是覺得 NULLIF 這個函式的命名還蠻妙的 XD，第一次看到沒能直接想到居然是這樣子的功用</p><hr><h2 id="用-NULLIF-來替代-CASE"><a href="#用-NULLIF-來替代-CASE" class="headerlink" title="用 NULLIF 來替代 CASE"></a>用 NULLIF 來替代 CASE</h2><p>接下來是示範 NULLIF 與 CASE 兩者都可以達到一樣的效果的寫法</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DECLARE</span> <span class="variable">@a</span> <span class="type">int</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">DECLARE</span> <span class="variable">@b</span> <span class="type">int</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  <span class="keyword">CASE</span> <span class="keyword">WHEN</span> <span class="variable">@a</span> <span class="operator">=</span> <span class="number">0</span> <span class="keyword">THEN</span> <span class="keyword">NULL</span> <span class="keyword">ELSE</span> <span class="variable">@a</span> <span class="keyword">END</span> <span class="keyword">AS</span> a,</span><br><span class="line">  <span class="keyword">CASE</span> <span class="keyword">WHEN</span> <span class="variable">@b</span> <span class="operator">=</span> <span class="number">0</span> <span class="keyword">THEN</span> <span class="keyword">NULL</span> <span class="keyword">ELSE</span> <span class="variable">@b</span> <span class="keyword">END</span> <span class="keyword">AS</span> b</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="built_in">NULLIF</span>(<span class="variable">@a</span>, <span class="number">0</span>) <span class="keyword">AS</span> a,</span><br><span class="line"><span class="built_in">NULLIF</span>(<span class="variable">@b</span>, <span class="number">0</span>) <span class="keyword">AS</span> b</span><br></pre></td></tr></tbody></table></figure></div><p>執行結果</p><p><a href="https://i.imgur.com/cYuK0rU.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/cYuK0rU.png" class="lazyload"></a></p><p>兩者比較後可以看到 NULLIF 要撰寫的程式碼減少非常多，不過要注意到，也只有真的有需要回傳 NULL 的情境下，才是用 NULLIF，另一種 CASE 能有更多的靈活性</p><p>那需要用到 NULL 的情境真的很多嗎？我也不知道 XD，但最近有遇到一種情境用到可以拿來分享</p><h2 id="用-NULLIF-來排除-JSON-VALUE-會遇到不合法-JSON-格式的錯誤"><a href="#用-NULLIF-來排除-JSON-VALUE-會遇到不合法-JSON-格式的錯誤" class="headerlink" title="用 NULLIF 來排除 JSON_VALUE 會遇到不合法 JSON 格式的錯誤"></a>用 NULLIF 來排除 JSON_VALUE 會遇到不合法 JSON 格式的錯誤</h2><p>會促使想要記錄這個函式的原因，就是因為剛好遇到了資料表內有一欄是存放文字型態的，真的有資料的時候是放 JSON，不然居然是空字串 XD，然後遇到空字串要用 JSON_VALUE 解析就發生了大問題</p><p>先回憶一下 JSON_VALUE 函式的用法，它是用來解析 JSON 取得單個 property 的函式</p><h3 id="JSON-VALUE-解析-JSON-的一般情況"><a href="#JSON-VALUE-解析-JSON-的一般情況" class="headerlink" title="JSON_VALUE 解析 JSON 的一般情況"></a>JSON_VALUE 解析 JSON 的一般情況</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">JSON_VALUE</span>(<span class="string">'{ "a": 123 }'</span>, <span class="string">'$.a'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">JSON_VALUE</span>(<span class="string">'{}'</span>, <span class="string">'$.a'</span>);</span><br></pre></td></tr></tbody></table></figure></div><p><a href="https://i.imgur.com/f5DqYRB.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/f5DqYRB.png" class="lazyload"></a></p><h3 id="JSON-VALUE-解析空字串報錯"><a href="#JSON-VALUE-解析空字串報錯" class="headerlink" title="JSON_VALUE 解析空字串報錯"></a>JSON_VALUE 解析空字串報錯</h3><p>那麼如果第一個參數丟了空字串會怎麼樣呢？</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">JSON_VALUE</span>(<span class="string">''</span>, <span class="string">'$.a'</span>);</span><br></pre></td></tr></tbody></table></figure></div><p><a href="https://i.imgur.com/MgVg56S.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/MgVg56S.png" class="lazyload"></a></p><p>就直接整個報錯</p><h3 id="JSON-VALUE-解析-NULL"><a href="#JSON-VALUE-解析-NULL" class="headerlink" title="JSON_VALUE 解析 NULL"></a>JSON_VALUE 解析 NULL</h3><p>後來有想到可以把空字串轉成 NULL，因為 JSON_VALUE 遇到 NULL 來解析是合法的，就會安全的回傳 NULL</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">JSON_VALUE</span>(<span class="keyword">NULL</span>, <span class="string">'$.a'</span>);</span><br></pre></td></tr></tbody></table></figure></div><p><a href="https://i.imgur.com/X9oRtZY.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/X9oRtZY.png" class="lazyload"></a></p><h3 id="JSON-VALUE-解析字串搭配-NULLIF"><a href="#JSON-VALUE-解析字串搭配-NULLIF" class="headerlink" title="JSON_VALUE 解析字串搭配 NULLIF"></a>JSON_VALUE 解析字串搭配 NULLIF</h3><p>這時就想要把遇到空字串的資料通通轉成 NULL，一開始寫落落長的 CASE WHEN THEN，然後就查到這個簡短寫法 NULL，最後就成了這樣</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">JSON_VALUE</span>(<span class="built_in">NULLIF</span>(<span class="string">''</span>, <span class="string">''</span>), <span class="string">'$.a'</span>);</span><br></pre></td></tr></tbody></table></figure></div><p><a href="https://i.imgur.com/2YCSesz.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/2YCSesz.png" class="lazyload"></a></p><p>這樣就能有效避免 JSON_VALUE 遇到空字串而報錯的情況</p><h3 id="再搭配-ISNULL-來把-NULL-轉成空字串"><a href="#再搭配-ISNULL-來把-NULL-轉成空字串" class="headerlink" title="再搭配 ISNULL 來把 NULL 轉成空字串"></a>再搭配 ISNULL 來把 NULL 轉成空字串</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> ISNULL(<span class="built_in">JSON_VALUE</span>(<span class="built_in">NULLIF</span>(<span class="string">''</span>, <span class="string">''</span>), <span class="string">'$.a'</span>), <span class="string">''</span>);</span><br></pre></td></tr></tbody></table></figure></div><h3 id="也能用函式-ISJSON-判斷字串是否為合法-JSON，可以搭配-CASE-來改寫"><a href="#也能用函式-ISJSON-判斷字串是否為合法-JSON，可以搭配-CASE-來改寫" class="headerlink" title="也能用函式 ISJSON 判斷字串是否為合法 JSON，可以搭配 CASE 來改寫"></a>也能用函式 ISJSON 判斷字串是否為合法 JSON，可以搭配 CASE 來改寫</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DECLARE</span> <span class="variable">@a</span> nvarchar(MAX) <span class="operator">=</span> <span class="string">'{ "a": 123 }'</span>;</span><br><span class="line"><span class="keyword">DECLARE</span> <span class="variable">@b</span> nvarchar(MAX) <span class="operator">=</span> <span class="string">''</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">CASE</span> <span class="keyword">WHEN</span> ISJSON(<span class="variable">@a</span>) <span class="operator">=</span> <span class="number">1</span> <span class="keyword">THEN</span> <span class="built_in">JSON_VALUE</span>(<span class="variable">@a</span>, <span class="string">'$.a'</span>) <span class="keyword">ELSE</span> <span class="string">''</span> <span class="keyword">END</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">CASE</span> <span class="keyword">WHEN</span> ISJSON(<span class="variable">@b</span>) <span class="operator">=</span> <span class="number">1</span> <span class="keyword">THEN</span> <span class="built_in">JSON_VALUE</span>(<span class="variable">@b</span>, <span class="string">'$.a'</span>) <span class="keyword">ELSE</span> <span class="string">''</span> <span class="keyword">END</span>;</span><br></pre></td></tr></tbody></table></figure></div><h2 id="結尾"><a href="#結尾" class="headerlink" title="結尾"></a>結尾</h2><p>本篇是剛好遇到第一次用過的函式 NULLIF，才特別紀錄一下，與 CASE 相比較，一樣的需求搭配 JSON_VALUE 組合出的不一樣寫法</p></body></html>]]></content>
      
      
      <categories>
          
          <category> w3HexSchool </category>
          
          <category> T-SQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> w3HexSchool </tag>
            
            <tag> T-SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>T-SQL MERGE - 一次決定 OPENJSON 的資料要新增或是修改</title>
      <link href="/2020/08/08/202008-t-sql-json-part-4/"/>
      <url>/2020/08/08/202008-t-sql-json-part-4/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><p>Hi，大家好，在前篇文 <a href="https://littlehorseboy.github.io/2020/07/26/202007-t-sql-json-part-3/">T-SQL OPENJSON - 搭配 OPENJSON 實作新增資料或修改資料</a> 中，使用了 INSERT 或 UPDATE，個別的比對 OPENJSON 轉換的 JSON 來分別進行新增或修改</p><p>在本篇要利用 MERGE 將上述的個別比對，然後個別進行新增或修改的這些程式給合成一句</p><hr><h2 id="環境說明"><a href="#環境說明" class="headerlink" title="環境說明"></a>環境說明</h2><p>MERGE 在所有的 SQL Server 版本都有支援，代表很早就已經存在了 MERGE 這個用法，感覺是一種特別而且不常見的用法（也可能只是筆者的歷程剛好都沒用過 XD）</p><p>在現今網路傳輸都是用 JSON 溝通的時代，用 OPENJSON 來解析 JSON，而後再搭配上 MERGE，似乎又擦出了很不一樣的火花</p><h3 id="準備一個示範用的簡單-table，新增幾筆資料進去，後續-UPDATE-時會用到"><a href="#準備一個示範用的簡單-table，新增幾筆資料進去，後續-UPDATE-時會用到" class="headerlink" title="準備一個示範用的簡單 table，新增幾筆資料進去，後續 UPDATE 時會用到"></a>準備一個示範用的簡單 table，新增幾筆資料進去，後續 UPDATE 時會用到</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> [dbo].[Employees]</span><br><span class="line">(</span><br><span class="line"> Id    <span class="type">int</span>            <span class="keyword">IDENTITY</span>(<span class="number">1</span>,<span class="number">1</span>)  <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line"> Name  nvarchar(<span class="number">100</span>)                 <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line"> <span class="keyword">CONSTRAINT</span> [PK_Employees] <span class="keyword">PRIMARY</span> KEY CLUSTERED (</span><br><span class="line">   Id <span class="keyword">ASC</span></span><br><span class="line"> ) <span class="keyword">WITH</span> (</span><br><span class="line">   PAD_INDEX <span class="operator">=</span> OFF, STATISTICS_NORECOMPUTE <span class="operator">=</span> OFF, IGNORE_DUP_KEY <span class="operator">=</span> OFF, ALLOW_ROW_LOCKS <span class="operator">=</span> <span class="keyword">ON</span>, ALLOW_PAGE_LOCKS <span class="operator">=</span> <span class="keyword">ON</span></span><br><span class="line"> ) <span class="keyword">ON</span> [<span class="keyword">PRIMARY</span>]</span><br><span class="line">) <span class="keyword">ON</span> [<span class="keyword">PRIMARY</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> Employees([Name])</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="string">'John'</span>),</span><br><span class="line">       (<span class="string">'Mary'</span>)</span><br></pre></td></tr></tbody></table></figure></div><h3 id="SELECT-結果"><a href="#SELECT-結果" class="headerlink" title="SELECT 結果"></a>SELECT 結果</h3><p><a href="https://i.imgur.com/yVqxtbx.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/yVqxtbx.png" class="lazyload"></a></p><h3 id="還需要有一包-JSON，內容大概是長這樣"><a href="#還需要有一包-JSON，內容大概是長這樣" class="headerlink" title="還需要有一包 JSON，內容大概是長這樣"></a>還需要有一包 JSON，內容大概是長這樣</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">json</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  {</span><br><span class="line">    <span class="attr">"id"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"Otis"</span></span><br><span class="line">  },</span><br><span class="line">  {</span><br><span class="line">    <span class="attr">"id"</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"Alice"</span></span><br><span class="line">  }</span><br><span class="line">]</span><br></pre></td></tr></tbody></table></figure></div><hr><h2 id="MERGE"><a href="#MERGE" class="headerlink" title="MERGE"></a>MERGE</h2><p>MERGE 是利用資料表互相比對，接著按照比對的結果，如果是 <code>WHEN MATCHED</code>，就進行 UPDATE，如果是 <code>WHEN NOT MATCHED</code>，就進行 INSERT，這樣就能用來一次執行就決定一包 JSON 的內容是要對資料表進行新增或是修改的動作</p><p>再來看看原本的寫法</p><h3 id="搭配-OPENJSON-的個別-INSERT-或-UPDATE"><a href="#搭配-OPENJSON-的個別-INSERT-或-UPDATE" class="headerlink" title="搭配 OPENJSON 的個別 INSERT 或 UPDATE"></a>搭配 OPENJSON 的個別 INSERT 或 UPDATE</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> Employees(Name)</span><br><span class="line"><span class="keyword">SELECT</span> Name</span><br><span class="line">  <span class="keyword">FROM</span> OPENJSON(<span class="variable">@json</span>)</span><br><span class="line">       <span class="keyword">WITH</span>(Id    <span class="type">INT</span>           <span class="string">'$.id'</span>,</span><br><span class="line">            Name  NVARCHAR(<span class="number">100</span>) <span class="string">'$.name'</span>)</span><br><span class="line">            </span><br><span class="line">GO</span><br><span class="line"></span><br><span class="line">UPDATE a</span><br><span class="line">   <span class="keyword">SET</span> Name <span class="operator">=</span> b.Name</span><br><span class="line">  <span class="keyword">FROM</span> Employees <span class="keyword">AS</span> a,</span><br><span class="line">       OPENJSON(<span class="variable">@json</span>)</span><br><span class="line">           <span class="keyword">WITH</span>(Id    <span class="type">INT</span>           <span class="string">'$.id'</span>,</span><br><span class="line">                Name  NVARCHAR(<span class="number">100</span>) <span class="string">'$.name'</span>) <span class="keyword">AS</span> b</span><br><span class="line"> <span class="keyword">WHERE</span> a.Id <span class="operator">=</span> b.Id</span><br></pre></td></tr></tbody></table></figure></div><p>這兩句可以合成一句</p><h3 id="改寫成-MERGE-INTO"><a href="#改寫成-MERGE-INTO" class="headerlink" title="改寫成 MERGE INTO"></a>改寫成 MERGE INTO</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DECLARE</span> <span class="variable">@json</span> NVARCHAR(MAX) <span class="operator">=</span> <span class="string">'</span></span><br><span class="line"><span class="string">[</span></span><br><span class="line"><span class="string">  {</span></span><br><span class="line"><span class="string">    "id": 0,</span></span><br><span class="line"><span class="string">    "name": "Otis"</span></span><br><span class="line"><span class="string">  },</span></span><br><span class="line"><span class="string">  {</span></span><br><span class="line"><span class="string">    "id": 2,</span></span><br><span class="line"><span class="string">    "name": "Alice"</span></span><br><span class="line"><span class="string">  }</span></span><br><span class="line"><span class="string">]</span></span><br><span class="line"><span class="string">'</span>;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">MERGE</span> <span class="keyword">INTO</span> Employees <span class="keyword">AS</span> target</span><br><span class="line"> <span class="keyword">USING</span> (<span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line">          <span class="keyword">FROM</span> OPENJSON(<span class="variable">@json</span>)</span><br><span class="line">               <span class="keyword">WITH</span>(Id    <span class="type">INT</span>           <span class="string">'$.id'</span>,</span><br><span class="line">                    Name  NVARCHAR(<span class="number">100</span>) <span class="string">'$.name'</span>))</span><br><span class="line">            <span class="keyword">AS</span> source(Id, Name)</span><br><span class="line">    <span class="keyword">ON</span> (target.Id <span class="operator">=</span> source.Id)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">WHEN</span> MATCHED <span class="keyword">THEN</span></span><br><span class="line">UPDATE <span class="keyword">SET</span> target.Name <span class="operator">=</span> source.Name</span><br><span class="line"></span><br><span class="line">  <span class="keyword">WHEN</span> <span class="keyword">NOT</span> MATCHED <span class="keyword">THEN</span></span><br><span class="line"><span class="keyword">INSERT</span>(Name) <span class="keyword">VALUES</span>(Name);</span><br></pre></td></tr></tbody></table></figure></div><h3 id="執行後查詢結果"><a href="#執行後查詢結果" class="headerlink" title="執行後查詢結果"></a>執行後查詢結果</h3><p><a href="https://i.imgur.com/ebqdyq1.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/ebqdyq1.png" class="lazyload"></a></p><p>可以發現到</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line">  <span class="string">"id"</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="string">"name"</span>: <span class="string">"Otis"</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>JSON 的這一項物件，因為 Id 沒有對應到，所以新增了一筆新的資料</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line">  <span class="string">"id"</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="string">"name"</span>: <span class="string">"Alice"</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>Alice 這一項則是 Id = 2 有資料符合，就做了修改的動作，將 Mary 改成了 Alice</p><h2 id="程式碼逐行說明"><a href="#程式碼逐行說明" class="headerlink" title="程式碼逐行說明"></a>程式碼逐行說明</h2><p><strong>第 14 ~ 20 行</strong> MERGE，USING，ON</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">MERGE</span> <span class="keyword">INTO</span> Employees <span class="keyword">AS</span> target</span><br><span class="line"><span class="keyword">USING</span> (<span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line">         <span class="keyword">FROM</span> OPENJSON(<span class="variable">@json</span>)</span><br><span class="line">              <span class="keyword">WITH</span>(Id    <span class="type">INT</span>           <span class="string">'$.id'</span>,</span><br><span class="line">                   Name  NVARCHAR(<span class="number">100</span>) <span class="string">'$.name'</span>))</span><br><span class="line">           <span class="keyword">AS</span> source(Id, Name)</span><br><span class="line">   <span class="keyword">ON</span> (target.Id <span class="operator">=</span> source.Id)</span><br></pre></td></tr></tbody></table></figure></div><p><code>MERGE</code> 及 <code>USING</code> 分別對應一張資料表，要新增資料的資料表是 MERGE INTO 後的 target，用來比對的資料表為 USING 後的 source，<code>ON (target.Id = source.Id)</code> 是比對兩張表的關鍵</p><p><strong>第 22 ~ 23 行</strong> WHEN MATCHED</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">WHEN</span> MATCHED <span class="keyword">THEN</span></span><br><span class="line">UPDATE <span class="keyword">SET</span> target.Name <span class="operator">=</span> source.Name</span><br></pre></td></tr></tbody></table></figure></div><p><code>ON (target.Id = source.Id)</code> 比對兩張表如果 target 與 source 有對應到的資料，就會進行 UPDATE</p><p><strong>第 25 ~ 26 行</strong> WHEN NOT MATCHED</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">WHEN</span> <span class="keyword">NOT</span> MATCHED <span class="keyword">THEN</span></span><br><span class="line"><span class="keyword">INSERT</span>(Name) <span class="keyword">VALUES</span>(Name);</span><br></pre></td></tr></tbody></table></figure></div><p><code>ON (target.Id = source.Id)</code> 比對兩張表如果 target 沒有對應到 source 的資料，就可以直接將 source 的資料 INSERT 到 target 的資料表之中</p></body></html>]]></content>
      
      
      <categories>
          
          <category> w3HexSchool </category>
          
          <category> T-SQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> w3HexSchool </tag>
            
            <tag> T-SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node.js - 該如何用 Node.js 核心模組發送 request 呢？</title>
      <link href="/2020/08/02/202008-node-request/"/>
      <url>/2020/08/02/202008-node-request/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><p>Hi，大家好，這篇想要紀錄如何用 Node.js 的核心模組 http 來發送 request，http 模組有個 property 是名為 request 的 function，<code>http.request()</code>，可以用它來發送請求，並從其它網站取得需要的各種資料</p><blockquote><p>TIP：<br>另外還有 http.get() 也可以達到與 http.request() 差不多的需求，但是，就沒有提供 http.post，所以筆者就直接選擇都用 http.request()，只要在 options 定義 method 是 <code>GET</code> 或是 <code>POST</code> 等等，感覺比較能方便寫個重複使用，僅變換參數的 function</p></blockquote><hr><h2 id="環境說明"><a href="#環境說明" class="headerlink" title="環境說明"></a>環境說明</h2><p>只需要有安裝 Node.js，http 模組是 Node.js 中標配的模組，可以直接導入來做使用，不需要從 npm 下載其它依賴的第三方</p><hr><h2 id="以前端的角度來看"><a href="#以前端的角度來看" class="headerlink" title="以前端的角度來看"></a>以前端的角度來看</h2><p>前端來看發送請求這件事，應該都會用習慣了像 jQuery 的 $.ajax，亦或是 axios 這種第三方函式庫，它們已經很成熟的封裝掉很多繁瑣的程式，而且使用方式簡便，還有不少延伸功能可以直接做複雜的 ajax 需求，所以可能會覺得在使用 Node.js 的 http.request() 時稍微不那麼 friendly，才促使了想要寫這篇記錄</p><p>那接下來就先請出本篇文章主要的示範程式碼</p><hr><h2 id="從-github-API-取得某個使用者資料的範例"><a href="#從-github-API-取得某個使用者資料的範例" class="headerlink" title="從 github API 取得某個使用者資料的範例"></a>從 github API 取得某個使用者資料的範例</h2><p>目標要取得資料的網址為</p><p><a href="https://api.github.com/users/littlehorseboy">https://api.github.com/users/littlehorseboy</a></p><p>以下為用 <code>GET</code> 請求該網址的完整程式碼</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> { request } = <span class="built_in">require</span>(<span class="string">'https'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> options = {</span><br><span class="line">  <span class="attr">hostname</span>: <span class="string">'api.github.com'</span>,</span><br><span class="line">  <span class="attr">port</span>: <span class="number">443</span>,</span><br><span class="line">  <span class="attr">path</span>: <span class="string">'/users/littlehorseboy'</span>,</span><br><span class="line">  <span class="attr">method</span>: <span class="string">'get'</span>,</span><br><span class="line">  <span class="attr">headers</span>: {</span><br><span class="line">    <span class="string">'User-Agent'</span>: <span class="string">'littlehorseboy'</span>,</span><br><span class="line">  },</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> req = request(options, <span class="function">(<span class="params">res</span>) =></span> {</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`STATUS:  <span class="subst">${res.statusCode}</span>`</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`HEADERS: <span class="subst">${<span class="built_in">JSON</span>.stringify(res.headers)}</span>`</span>);</span><br><span class="line"></span><br><span class="line">  res.setEncoding(<span class="string">'utf8'</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> data = <span class="string">''</span>;</span><br><span class="line"></span><br><span class="line">  res.on(<span class="string">'data'</span>, <span class="function">(<span class="params">chunk</span>) =></span> data += chunk);</span><br><span class="line"></span><br><span class="line">  res.on(<span class="string">'end'</span>, <span class="function">() =></span> <span class="built_in">console</span>.log(data));</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line">req.on(<span class="string">'error'</span>, <span class="function">(<span class="params">error</span>) =></span> <span class="built_in">console</span>.error(error));</span><br><span class="line"></span><br><span class="line">req.end();</span><br></pre></td></tr></tbody></table></figure></div><h2 id="程式碼逐行說明"><a href="#程式碼逐行說明" class="headerlink" title="程式碼逐行說明"></a>程式碼逐行說明</h2><p><strong>第 1 行</strong> <code>require('https')</code></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> { request } = <span class="built_in">require</span>(<span class="string">'https'</span>);</span><br></pre></td></tr></tbody></table></figure></div><p>因為 github API 的網址是 https 開頭，所以這段程式用 https 的 request，如果是向 http 開頭的網址發送請求，就可以改用 http 的 request，主要是 http 是無法正常取得 https 網站的資料的，都會拿到被拒絕的回傳資料，算是個小小需要注意的地方</p><p><strong>第 3 ~ 11 行</strong> 定義描述指定資源的溝通方式</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> options = {</span><br><span class="line">  <span class="attr">hostname</span>: <span class="string">'api.github.com'</span>,</span><br><span class="line">  <span class="attr">port</span>: <span class="number">443</span>,</span><br><span class="line">  <span class="attr">path</span>: <span class="string">'/users/littlehorseboy'</span>,</span><br><span class="line">  <span class="attr">method</span>: <span class="string">'get'</span>,</span><br><span class="line">  <span class="attr">headers</span>: {</span><br><span class="line">    <span class="string">'User-Agent'</span>: <span class="string">'littlehorseboy'</span>,</span><br><span class="line">  },</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure></div><p>用來決定你的請求目標，http method 及 headers，options 是準備要放在 request() 函式的第一個參數中</p><p><code>http.request(options[, callback])</code></p><p>此例中在 headers 寫 User-Agent 並不是必須的，這是要玩 github API 必須加上，github API 文檔有說明</p><p>還有一點要特別說明，上面的程式碼只有說明 GET 請求的寫法，如果是要發送 POST 請求，通常都會多寫入 post data，但是 post data 並不是直接加在 options 內，正確的寫入方式會在文章下方的 <strong>第 28 行</strong> 說明</p><p><strong>第 13 ~ 24 行</strong> 發送請求接到 response 後的處理，此時還未進行發送</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> req = request(options, <span class="function">(<span class="params">res</span>) =></span> {</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`STATUS:  <span class="subst">${res.statusCode}</span>`</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`HEADERS: <span class="subst">${<span class="built_in">JSON</span>.stringify(res.headers)}</span>`</span>);</span><br><span class="line"></span><br><span class="line">  res.setEncoding(<span class="string">'utf8'</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> data = <span class="string">''</span>;</span><br><span class="line"></span><br><span class="line">  res.on(<span class="string">'data'</span>, <span class="function">(<span class="params">chunk</span>) =></span> data += chunk);</span><br><span class="line"></span><br><span class="line">  res.on(<span class="string">'end'</span>, <span class="function">() =></span> <span class="built_in">console</span>.log(data));</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure></div><p>這段程式與串流模組的 Stream 用法非常類似，<code>res.on('data', (chunk) => data += chunk)</code> 逐一接收封包，直到 <code>res.on('end', () => console.log(data))</code> 回應方傳送停止時，就執行最後的動作</p><p>真正的 <strong>發送</strong> 動作在文章下方的 <strong>第 28 行</strong> 說明 </p><p><strong>第 26 行</strong> error 處理</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">req.on(<span class="string">'error'</span>, <span class="function">(<span class="params">error</span>) =></span> <span class="built_in">console</span>.error(error));</span><br></pre></td></tr></tbody></table></figure></div><p><strong>第 28 行</strong> <code>req.end()</code>，http.request() 一定要在使用 req.end() 後才會 <strong>發送</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">req.end();</span><br></pre></td></tr></tbody></table></figure></div><p>一定要在使用 req.end() 後才會 <strong>發送</strong>，然後跑進 <strong>第 13 ~ 24 行</strong> 接到 res 進行後續指令</p><p>另外要補充寫入 post data 的方式，得用到 req.write()，以下為將 <strong>第 28 行</strong> 程式碼改寫的範例</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> { request } = <span class="built_in">require</span>(<span class="string">'https'</span>);</span><br><span class="line"><span class="keyword">const</span> querystring = <span class="built_in">require</span>(<span class="string">'querystring'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 略 ...</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> postData = querystring.stringify({</span><br><span class="line">  <span class="attr">msg</span>: <span class="string">'Hello World!'</span>,</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line">req.write(postData);</span><br><span class="line">req.end();</span><br></pre></td></tr></tbody></table></figure></div><p>或是</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> { request } = <span class="built_in">require</span>(<span class="string">'https'</span>);</span><br><span class="line"><span class="keyword">const</span> querystring = <span class="built_in">require</span>(<span class="string">'querystring'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 略 ...</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> postData = querystring.stringify({</span><br><span class="line">  <span class="attr">msg</span>: <span class="string">'Hello World!'</span>,</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line">req.end(postData);</span><br></pre></td></tr></tbody></table></figure></div><blockquote><p>TIP:<br>原來 Node.js 的核心模組標配中就有 querystring<br>如果是前端還有用過 axios，可能就有曾經下載過 npm 上的第三方 querystring 函式庫<br>差點以為在後端沒有這模組也要去下載</p></blockquote><hr><h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>以上就是對 Node.js 核心模組 request 的不專業分析</p><p>其實大可以直接 <code>npm i axios</code> 來替代 <code>http.request</code> 使用，不過出於好奇心又想都通通清楚，就栽下去多看了一些官方文件說明來研究看看</p></body></html>]]></content>
      
      
      <categories>
          
          <category> w3HexSchool </category>
          
          <category> node.js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> w3HexSchool </tag>
            
            <tag> node.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>T-SQL OPENJSON - 搭配 OPENJSON 實作新增資料或修改資料</title>
      <link href="/2020/07/26/202007-t-sql-json-part-3/"/>
      <url>/2020/07/26/202007-t-sql-json-part-3/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><p>Hi，大家好，最近都在大玩特玩 T-SQL，如果網頁開發的模式是前後端分離時，那要對資料庫做新增或修改，前端會把一整包 JSON 丟給後端 API，後端再想辦法用程式來解析這包 JSON ，最後組成 SQL 指令丟給 SQL 服務進行執行</p><p>這篇文章提供了一種不一樣的選擇，就是直接的把 JSON 丟給 SQL，讓 SQL 來直接處理 JSON，而後進行新增資料或修改資料</p><hr><h2 id="環境說明"><a href="#環境說明" class="headerlink" title="環境說明"></a>環境說明</h2><p>必須是 SQL Server 2016 以上，其他資料庫就不清楚是否有類似的 JSON 函式</p><p>本篇文章主要搭配來做新增或修改的是 OPENJSON 函式，如果還不知道 OPENJSON 是什麼的讀者們，可以看看筆者之前寫的 <a href="https://littlehorseboy.github.io/2020/06/28/2020-t-sql-json-part-1/">T-SQL OPENJSON，想不到能直接用 SQL 來處理 JSON</a></p><h3 id="準備一個簡單的-table"><a href="#準備一個簡單的-table" class="headerlink" title="準備一個簡單的 table"></a>準備一個簡單的 table</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> [dbo].[Employees]</span><br><span class="line">(</span><br><span class="line"> Id    <span class="type">int</span>            <span class="keyword">IDENTITY</span>(<span class="number">1</span>,<span class="number">1</span>)  <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line"> Name  nvarchar(<span class="number">100</span>)                 <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line"> <span class="keyword">CONSTRAINT</span> [PK_Employees] <span class="keyword">PRIMARY</span> KEY CLUSTERED (</span><br><span class="line">   Id <span class="keyword">ASC</span></span><br><span class="line"> ) <span class="keyword">WITH</span> (</span><br><span class="line">   PAD_INDEX <span class="operator">=</span> OFF, STATISTICS_NORECOMPUTE <span class="operator">=</span> OFF, IGNORE_DUP_KEY <span class="operator">=</span> OFF, ALLOW_ROW_LOCKS <span class="operator">=</span> <span class="keyword">ON</span>, ALLOW_PAGE_LOCKS <span class="operator">=</span> <span class="keyword">ON</span></span><br><span class="line"> ) <span class="keyword">ON</span> [<span class="keyword">PRIMARY</span>]</span><br><span class="line">) <span class="keyword">ON</span> [<span class="keyword">PRIMARY</span>]</span><br></pre></td></tr></tbody></table></figure></div><p><a href="https://i.imgur.com/ZXvTOPB.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/ZXvTOPB.png" class="lazyload"></a></p><h3 id="還需要有一包-JSON"><a href="#還需要有一包-JSON" class="headerlink" title="還需要有一包 JSON"></a>還需要有一包 JSON</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">json</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  {</span><br><span class="line">    <span class="attr">"id"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"Otis"</span></span><br><span class="line">  }</span><br><span class="line">]</span><br></pre></td></tr></tbody></table></figure></div><hr><h2 id="首先就將這包-JSON-直接-OPENJSON-起來做-INSERT"><a href="#首先就將這包-JSON-直接-OPENJSON-起來做-INSERT" class="headerlink" title="首先就將這包 JSON 直接 OPENJSON 起來做 INSERT"></a>首先就將這包 JSON 直接 OPENJSON 起來做 INSERT</h2><h3 id="JSON-陣列內只有一筆物件做新增時"><a href="#JSON-陣列內只有一筆物件做新增時" class="headerlink" title="JSON 陣列內只有一筆物件做新增時"></a>JSON 陣列內只有一筆物件做新增時</h3><p>請各位把 <code>@json</code> 當作是 API 收到的 JSON 來看</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DECLARE</span> <span class="variable">@json</span> NVARCHAR(MAX) <span class="operator">=</span> <span class="string">'</span></span><br><span class="line"><span class="string">[</span></span><br><span class="line"><span class="string">  {</span></span><br><span class="line"><span class="string">    "id": 0,</span></span><br><span class="line"><span class="string">    "name": "Otis"</span></span><br><span class="line"><span class="string">  }</span></span><br><span class="line"><span class="string">]</span></span><br><span class="line"><span class="string">'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> Employees (</span><br><span class="line">       Name)</span><br><span class="line"><span class="keyword">SELECT</span> Name</span><br><span class="line">  <span class="keyword">FROM</span> OPENJSON(<span class="variable">@json</span>)</span><br><span class="line">       <span class="keyword">WITH</span>(Id    <span class="type">INT</span>           <span class="string">'$.id'</span>,</span><br><span class="line">            Name  NVARCHAR(<span class="number">100</span>) <span class="string">'$.name'</span>)</span><br></pre></td></tr></tbody></table></figure></div><p>執行後資料表新增了一筆資料</p><p><a href="https://i.imgur.com/tBgnaC9.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/tBgnaC9.png" class="lazyload"></a></p><p>這段程式碼可以看到 OPENJSON 就是把 JSON 當成一張資料表的概念</p><p>所以就能直接從這張資料表拉出所需的欄位來做新增的動作</p><h3 id="JSON-陣列內有兩筆以上物件做新增時"><a href="#JSON-陣列內有兩筆以上物件做新增時" class="headerlink" title="JSON 陣列內有兩筆以上物件做新增時"></a>JSON 陣列內有兩筆以上物件做新增時</h3><p>SQL 程式碼的 INSERT 那段沒改動，只有改變 JSON 陣列的內容</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DECLARE</span> <span class="variable">@json</span> NVARCHAR(MAX) <span class="operator">=</span> <span class="string">'</span></span><br><span class="line"><span class="string">[</span></span><br><span class="line"><span class="string">  {</span></span><br><span class="line"><span class="string">    "id": 0,</span></span><br><span class="line"><span class="string">    "name": "Mary"</span></span><br><span class="line"><span class="string">  },</span></span><br><span class="line"><span class="string">  {</span></span><br><span class="line"><span class="string">    "id": 0,</span></span><br><span class="line"><span class="string">    "name": "John"</span></span><br><span class="line"><span class="string">  }</span></span><br><span class="line"><span class="string">]</span></span><br><span class="line"><span class="string">'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> Employees (</span><br><span class="line">       Name)</span><br><span class="line"><span class="keyword">SELECT</span> Name</span><br><span class="line">  <span class="keyword">FROM</span> OPENJSON(<span class="variable">@json</span>)</span><br><span class="line">       <span class="keyword">WITH</span>(Id    <span class="type">INT</span>           <span class="string">'$.id'</span>,</span><br><span class="line">            Name  NVARCHAR(<span class="number">100</span>) <span class="string">'$.name'</span>)</span><br></pre></td></tr></tbody></table></figure></div><p>執行後資料表新增了兩筆資料</p><p><a href="https://i.imgur.com/QVhI7sY.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/QVhI7sY.png" class="lazyload"></a></p><p>想必各位應該可以體會到，OPENJSON 能夠在每次接到 API 傳來陣列內物件數量不一的 JSON 時，進行靈活的因應並新增資料</p><hr><h2 id="那-UPDATE-也是一包-JSON-直接做掉嗎？"><a href="#那-UPDATE-也是一包-JSON-直接做掉嗎？" class="headerlink" title="那 UPDATE 也是一包 JSON 直接做掉嗎？"></a>那 UPDATE 也是一包 JSON 直接做掉嗎？</h2><p>沒錯，因為 OPENJSON 能夠把 JSON 當成一張資料表，只要有給正確的 <code>id</code>，搭配 UPDATE 的 WHERE 條件，就能直接多筆資料進行 UPDATE</p><h3 id="原本資料表內的資料"><a href="#原本資料表內的資料" class="headerlink" title="原本資料表內的資料"></a>原本資料表內的資料</h3><p><a href="https://i.imgur.com/QVhI7sY.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/QVhI7sY.png" class="lazyload"></a></p><p>這時筆者想要將 Mary 改成 Otis、以及 John 改成 Otis</p><p>準備的程式如下</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DECLARE</span> <span class="variable">@json</span> NVARCHAR(MAX) <span class="operator">=</span> <span class="string">'</span></span><br><span class="line"><span class="string">[</span></span><br><span class="line"><span class="string">  {</span></span><br><span class="line"><span class="string">    "id": 2,</span></span><br><span class="line"><span class="string">    "name": "Otis"</span></span><br><span class="line"><span class="string">  },</span></span><br><span class="line"><span class="string">  {</span></span><br><span class="line"><span class="string">    "id": 3,</span></span><br><span class="line"><span class="string">    "name": "Otis"</span></span><br><span class="line"><span class="string">  }</span></span><br><span class="line"><span class="string">]</span></span><br><span class="line"><span class="string">'</span>;</span><br><span class="line"></span><br><span class="line">UPDATE a</span><br><span class="line">   <span class="keyword">SET</span> Name    <span class="operator">=</span> b.Name</span><br><span class="line">  <span class="keyword">FROM</span> Employees <span class="keyword">AS</span> a,</span><br><span class="line">       OPENJSON(<span class="variable">@json</span>)</span><br><span class="line">           <span class="keyword">WITH</span>(Id    <span class="type">INT</span>           <span class="string">'$.id'</span>,</span><br><span class="line">                Name  NVARCHAR(<span class="number">100</span>) <span class="string">'$.name'</span>) <span class="keyword">AS</span> b</span><br><span class="line"> <span class="keyword">WHERE</span> a.Id <span class="operator">=</span> b.Id</span><br></pre></td></tr></tbody></table></figure></div><p>執行後就會對 id = 2 及 id = 3 的兩筆資料進行修改啦</p><p><a href="https://i.imgur.com/VcRApa5.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/VcRApa5.png" class="lazyload"></a></p><hr><h2 id="那-DELETE-會如何呢？"><a href="#那-DELETE-會如何呢？" class="headerlink" title="那 DELETE 會如何呢？"></a>那 DELETE 會如何呢？</h2><p>把剛剛的 UPDATE SQL 指令改寫一點點就 OK 了</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> a</span><br><span class="line">  <span class="keyword">FROM</span> Employees <span class="keyword">AS</span> a,</span><br><span class="line">       OPENJSON(<span class="variable">@json</span>)</span><br><span class="line">           <span class="keyword">WITH</span>(Id    <span class="type">INT</span>           <span class="string">'$.id'</span>,</span><br><span class="line">                Name  NVARCHAR(<span class="number">100</span>) <span class="string">'$.name'</span>) <span class="keyword">AS</span> b</span><br><span class="line"> <span class="keyword">WHERE</span> a.Id <span class="operator">=</span> b.Id</span><br></pre></td></tr></tbody></table></figure></div><p>用什麼樣的 JSON 資料以及執行後會出現什麼結果想必讀者們應該都能在心裡推算出來了吧 XD</p><hr><h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>這樣玩就會把後端寫在 API 上的邏輯，部分給轉移到 SQL 的撰寫上，像是有一大堆的 Stored Procedure XD，當然要寫在哪沒有絕對，有達成團隊共識即可</p></body></html>]]></content>
      
      
      <categories>
          
          <category> w3HexSchool </category>
          
          <category> T-SQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> w3HexSchool </tag>
            
            <tag> T-SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>T-SQL JSON 函式，想不到能直接用 SQL 來處理 JSON</title>
      <link href="/2020/07/19/202007-t-sql-json-part-2/"/>
      <url>/2020/07/19/202007-t-sql-json-part-2/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><p>Hi，大家好，前陣子寫了一篇 T-SQL 使用 OPENJSON 函式，可以將 JSON 當成資料表來使用的文章（<a href="https://littlehorseboy.github.io/2020/06/28/2020-t-sql-json-part-1/">T-SQL OPENJSON，想不到能直接用 SQL 來處理 JSON</a>），這次要介紹一些也是處理 JSON 的 T-SQL 函式，可以用來直接擷取 JSON 的某個 property 的值，或是變更 property 的值</p><hr><h2 id="JSON-函式"><a href="#JSON-函式" class="headerlink" title="JSON 函式"></a>JSON 函式</h2><p>以下就是本次文章所要實際用範例介紹並示範的 JSON 函式</p><table><thead><tr><th>函式</th><th>描述</th></tr></thead><tbody><tr><td>JSON_VALUE</td><td>從 JSON 字串擷取值</td></tr><tr><td>JSON_QUERY</td><td>從 JSON 字串擷取 Object 或 Array</td></tr><tr><td>JSON_MODIFY</td><td>變更 JSON 字串的屬性值</td></tr></tbody></table><hr><h2 id="JSON-VALUE"><a href="#JSON-VALUE" class="headerlink" title="JSON_VALUE"></a>JSON_VALUE</h2><p>從 JSON 字串擷取某 property 的純量值，傳回型別為 NVARCHAR(4000)</p><blockquote><p>Note:<br>JSON_VALUE 的傳回值型態是 NVARCHAR(4000)，如果擷取的值大於 4000 個字的話，會回傳 NULL，如果沒有讀到文檔這段說明，可能會因為不小心抓的 property 超過字數，但卻沒有看到任何錯誤訊息而感到困惑（有被雷過 XD）</p></blockquote><h2 id="JSON-VALUE-擷取純量值"><a href="#JSON-VALUE-擷取純量值" class="headerlink" title="JSON_VALUE 擷取純量值"></a>JSON_VALUE 擷取純量值</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DECLARE</span> <span class="variable">@json</span> <span class="type">VARCHAR</span>(MAX) <span class="operator">=</span> <span class="string">'</span></span><br><span class="line"><span class="string">{</span></span><br><span class="line"><span class="string">  "name": "horse",</span></span><br><span class="line"><span class="string">  "age": 18,</span></span><br><span class="line"><span class="string">  "isHandsome": true,</span></span><br><span class="line"><span class="string">  "nullValue": null,</span></span><br><span class="line"><span class="string">  "arrayValue": [1, 2, 3],</span></span><br><span class="line"><span class="string">  "objectValue": { "obj": "objString" }</span></span><br><span class="line"><span class="string">}</span></span><br><span class="line"><span class="string">'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">JSON_VALUE</span>(<span class="variable">@json</span>, <span class="string">'$.name'</span>)            <span class="keyword">AS</span> Name,</span><br><span class="line">       <span class="built_in">JSON_VALUE</span>(<span class="variable">@json</span>, <span class="string">'$.age'</span>)             <span class="keyword">AS</span> Age,</span><br><span class="line">       <span class="built_in">JSON_VALUE</span>(<span class="variable">@json</span>, <span class="string">'$.isHandsome'</span>)      <span class="keyword">AS</span> IsHandsome,</span><br><span class="line">       <span class="built_in">JSON_VALUE</span>(<span class="variable">@json</span>, <span class="string">'$.nullValue'</span>)       <span class="keyword">AS</span> NullValue,</span><br><span class="line">       <span class="built_in">JSON_VALUE</span>(<span class="variable">@json</span>, <span class="string">'$.arrayValue'</span>)      <span class="keyword">AS</span> ArrayValue,</span><br><span class="line">       <span class="built_in">JSON_VALUE</span>(<span class="variable">@json</span>, <span class="string">'$.objectValue'</span>)     <span class="keyword">AS</span> ObjectValue,</span><br><span class="line">       <span class="built_in">JSON_VALUE</span>(<span class="variable">@json</span>, <span class="string">'$.objectValue.obj'</span>) <span class="keyword">AS</span> Obj</span><br></pre></td></tr></tbody></table></figure></div><h2 id="SELECT-結果"><a href="#SELECT-結果" class="headerlink" title="SELECT 結果"></a>SELECT 結果</h2><p><a href="https://i.imgur.com/bXFcexF.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/bXFcexF.png" class="lazyload"></a></p><p>arrayValue 及 objectValue 的值分別是 <code>[1, 2, 3]</code>、<code>{ "obj": "objString" }</code></p><p>因為是 JSON，所以用 JSON_VALUE 取會得到 NULL</p><p>如果想要取得 JSON 得使用 JSON_QUERY 才是正確的方式</p><hr><h2 id="JSON-QUERY"><a href="#JSON-QUERY" class="headerlink" title="JSON_QUERY"></a>JSON_QUERY</h2><p>從 JSON 字串擷取物件或陣列，傳回型別為 NVARCHAR(MAX)</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DECLARE</span> <span class="variable">@json</span> <span class="type">VARCHAR</span>(MAX) <span class="operator">=</span> <span class="string">'</span></span><br><span class="line"><span class="string">{</span></span><br><span class="line"><span class="string">  "name": "horse",</span></span><br><span class="line"><span class="string">  "age": 18,</span></span><br><span class="line"><span class="string">  "isHandsome": true,</span></span><br><span class="line"><span class="string">  "nullValue": null,</span></span><br><span class="line"><span class="string">  "arrayValue": [1, 2, 3],</span></span><br><span class="line"><span class="string">  "objectValue": { "obj": "objString" }</span></span><br><span class="line"><span class="string">}</span></span><br><span class="line"><span class="string">'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">JSON_VALUE</span>(<span class="variable">@json</span>, <span class="string">'$.name'</span>)            <span class="keyword">AS</span> Name,</span><br><span class="line">       <span class="built_in">JSON_VALUE</span>(<span class="variable">@json</span>, <span class="string">'$.age'</span>)             <span class="keyword">AS</span> Age,</span><br><span class="line">       <span class="built_in">JSON_VALUE</span>(<span class="variable">@json</span>, <span class="string">'$.isHandsome'</span>)      <span class="keyword">AS</span> IsHandsome,</span><br><span class="line">       <span class="built_in">JSON_VALUE</span>(<span class="variable">@json</span>, <span class="string">'$.nullValue'</span>)       <span class="keyword">AS</span> NullValue,</span><br><span class="line">       <span class="built_in">JSON_QUERY</span>(<span class="variable">@json</span>, <span class="string">'$.arrayValue'</span>)      <span class="keyword">AS</span> ArrayValue,</span><br><span class="line">       <span class="built_in">JSON_QUERY</span>(<span class="variable">@json</span>, <span class="string">'$.objectValue'</span>)     <span class="keyword">AS</span> ObjectValue,</span><br><span class="line">       <span class="built_in">JSON_VALUE</span>(<span class="variable">@json</span>, <span class="string">'$.objectValue.obj'</span>) <span class="keyword">AS</span> Obj</span><br></pre></td></tr></tbody></table></figure></div><p>這裡把擷取 arrayValue 及 objectValue 的函式改成用 JSON_QUERY 取值，就能得到 JSON 物件或陣列</p><h2 id="SELECT-結果-1"><a href="#SELECT-結果-1" class="headerlink" title="SELECT 結果"></a>SELECT 結果</h2><p><a href="https://i.imgur.com/proYxVr.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/proYxVr.png" class="lazyload"></a></p><hr><h2 id="JSON-MODIFY"><a href="#JSON-MODIFY" class="headerlink" title="JSON_MODIFY"></a>JSON_MODIFY</h2><p>更新 JSON 字串中的 property 的值，並傳回更新後的 JSON 字串</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DECLARE</span> <span class="variable">@json</span> <span class="type">VARCHAR</span>(MAX) <span class="operator">=</span> <span class="string">'</span></span><br><span class="line"><span class="string">{</span></span><br><span class="line"><span class="string">  "name": "horse",</span></span><br><span class="line"><span class="string">  "arrayValue": [1, 2, 3],</span></span><br><span class="line"><span class="string">  "objectValue": { "obj": "objString" }</span></span><br><span class="line"><span class="string">}</span></span><br><span class="line"><span class="string">'</span>;</span><br><span class="line"></span><br><span class="line">PRINT JSON_MODIFY(<span class="variable">@json</span>, <span class="string">'$.name'</span>, <span class="string">'Otis'</span>);</span><br><span class="line"></span><br><span class="line">PRINT JSON_MODIFY(<span class="variable">@json</span>, <span class="string">'$.arrayValue[0]'</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">PRINT JSON_MODIFY(<span class="variable">@json</span>, <span class="string">'$.objectValue.obj'</span>, <span class="string">'newValue'</span>);</span><br></pre></td></tr></tbody></table></figure></div><p>每一列 PRINT 的呈現結果如下</p><h2 id="JSON-MODIFY-改-name-的-PRINT-結果"><a href="#JSON-MODIFY-改-name-的-PRINT-結果" class="headerlink" title="JSON_MODIFY 改 name 的 PRINT 結果"></a>JSON_MODIFY 改 name 的 PRINT 結果</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PRINT JSON_MODIFY(<span class="variable">@json</span>, <span class="string">'$.name'</span>, <span class="string">'Otis'</span>);</span><br></pre></td></tr></tbody></table></figure></div><a href="https://i.imgur.com/89axFpp.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img style="border: 1px solid #ccc" data-src="https://i.imgur.com/89axFpp.png" class="lazyload"></a><h2 id="JSON-MODIFY-改-arrayValue-0-的-PRINT-結果"><a href="#JSON-MODIFY-改-arrayValue-0-的-PRINT-結果" class="headerlink" title="JSON_MODIFY 改 arrayValue[0] 的 PRINT 結果"></a>JSON_MODIFY 改 arrayValue[0] 的 PRINT 結果</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PRINT JSON_MODIFY(<span class="variable">@json</span>, <span class="string">'$.arrayValue[0]'</span>, <span class="number">0</span>);</span><br></pre></td></tr></tbody></table></figure></div><a href="https://i.imgur.com/lPaT1ic.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img style="border: 1px solid #ccc" data-src="https://i.imgur.com/lPaT1ic.png" class="lazyload"></a><h2 id="JSON-MODIFY-改-objectValue-obj-的-PRINT-結果"><a href="#JSON-MODIFY-改-objectValue-obj-的-PRINT-結果" class="headerlink" title="JSON_MODIFY 改 objectValue.obj 的 PRINT 結果"></a>JSON_MODIFY 改 objectValue.obj 的 PRINT 結果</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PRINT JSON_MODIFY(<span class="variable">@json</span>, <span class="string">'$.objectValue.obj'</span>, <span class="string">'newValue'</span>);</span><br></pre></td></tr></tbody></table></figure></div><a href="https://i.imgur.com/PW4tyYl.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img style="border: 1px solid #ccc" data-src="https://i.imgur.com/PW4tyYl.png" class="lazyload"></a><h2 id="如果要保留每次的改動，得-SET-回變數"><a href="#如果要保留每次的改動，得-SET-回變數" class="headerlink" title="如果要保留每次的改動，得 SET 回變數"></a>如果要保留每次的改動，得 SET 回變數</h2><p>前幾個使用 JSON_MODIFY 後可以發現到使用該函式是會回傳新的物件</p><p>需要用 <code>SET @json</code> 的方式來讓變數紀錄住回傳的新物件</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DECLARE</span> <span class="variable">@json</span> <span class="type">VARCHAR</span>(MAX) <span class="operator">=</span> <span class="string">'</span></span><br><span class="line"><span class="string">{</span></span><br><span class="line"><span class="string">  "name": "horse",</span></span><br><span class="line"><span class="string">  "arrayValue": [1, 2, 3],</span></span><br><span class="line"><span class="string">  "objectValue": { "obj": "objString" }</span></span><br><span class="line"><span class="string">}</span></span><br><span class="line"><span class="string">'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> <span class="variable">@json</span> <span class="operator">=</span> JSON_MODIFY(<span class="variable">@json</span>, <span class="string">'$.name'</span>, <span class="string">'Otis'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> <span class="variable">@json</span> <span class="operator">=</span> JSON_MODIFY(<span class="variable">@json</span>, <span class="string">'$.arrayValue[0]'</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> <span class="variable">@json</span> <span class="operator">=</span> JSON_MODIFY(<span class="variable">@json</span>, <span class="string">'$.objectValue.obj'</span>, <span class="string">'newValue'</span>);</span><br><span class="line"></span><br><span class="line">PRINT <span class="variable">@json</span>;</span><br></pre></td></tr></tbody></table></figure></div><h2 id="PRINT-json-結果"><a href="#PRINT-json-結果" class="headerlink" title="PRINT @json 結果"></a>PRINT @json 結果</h2><a href="https://i.imgur.com/T3eBhQK.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img style="border: 1px solid #ccc" data-src="https://i.imgur.com/T3eBhQK.png" class="lazyload"></a><hr><h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>以上就是 JSON_VALUE、JSON_QUERY、JSON_MODIFY 的簡單示範</p><p>下一篇預計會講到 MEAGE INTO 搭配 OPENJSON 是如何直截了當的用 JSON 來做 INSERT 或 UPDATE</p></body></html>]]></content>
      
      
      <categories>
          
          <category> w3HexSchool </category>
          
          <category> T-SQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> w3HexSchool </tag>
            
            <tag> T-SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Puppeteer，該如何判斷登入失敗跳出提示的動作？（順便想記錄第一次用到 Promise.race() XD）</title>
      <link href="/2020/07/11/202007-puppeteer-dialog-promise-race/"/>
      <url>/2020/07/11/202007-puppeteer-dialog-promise-race/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><p>Hi，大家好，最近在用網頁爬蟲 Puppeteer 做一些日常的網頁操作動作，中間有個動作是登入頁面輸入帳密，然後按下 Enter，這時帳密驗證成功後，就會進到下一頁，但是如果帳密有錯誤導致登入失敗呢？</p><h2 id="爬蟲目標網站說明"><a href="#爬蟲目標網站說明" class="headerlink" title="爬蟲目標網站說明"></a>爬蟲目標網站說明</h2><p>筆者準備了一個網頁 <a href="https://littlehorseboy.github.io/angular-for-puppeteer/dist/angular-for-puppeteer/">https://littlehorseboy.github.io/angular-for-puppeteer/dist/angular-for-puppeteer/</a></p><p>一進去會看到是一個簡易的帳密表單欄位及送出按鈕</p><p>帳號 123，密碼 321（只是寫在前端測試用的，沒有連線到資料庫）</p><a href="https://i.imgur.com/N6dgRtN.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img style="border: 1px solid #CCC" data-src="https://i.imgur.com/N6dgRtN.png" class="lazyload"></a><h3 id="如果登入成功"><a href="#如果登入成功" class="headerlink" title="如果登入成功"></a>如果登入成功</h3><p>會跳到這個畫面，有成功換頁時就會抓取到的這畫面上的某個元件（程式利用此方式判斷）</p><a href="https://i.imgur.com/GHwOoZH.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img style="border: 1px solid #CCC" data-src="https://i.imgur.com/GHwOoZH.png" class="lazyload"></a><h3 id="如果登入失敗"><a href="#如果登入失敗" class="headerlink" title="如果登入失敗"></a>如果登入失敗</h3><p>會跳出 alert，告訴你帳號密碼錯誤</p><a href="https://i.imgur.com/1ByT7Xe.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img style="border: 1px solid #CCC" data-src="https://i.imgur.com/1ByT7Xe.png" class="lazyload"></a><hr><p>所以，輸入帳密登入時，會有成功登入跳到新頁面或是跳出帳密錯誤提示的兩種情況</p><p>筆者希望讓利用 Puppeteer 撰寫的爬蟲程式，能夠隨機應變這兩種狀況，如果是登入成功，就繼續執行後續要做的事情，如果是登入失敗，就直接停止動作，並關閉瀏覽器</p><hr><h2 id="監聽-dialog"><a href="#監聽-dialog" class="headerlink" title="監聽 dialog"></a>監聽 dialog</h2><p>依照 <a href="https://pptr.dev/#?product=Puppeteer&version=v5.0.0&show=api-class-dialog">Puppeteer 官方文件</a> 的說明，要達成抓到 alert 的內容，得用這種掛事件的方式</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">page.on(<span class="string">'dialog'</span>, <span class="keyword">async</span> dialog => {</span><br><span class="line">  <span class="built_in">console</span>.log(dialog.message());</span><br><span class="line">  <span class="keyword">await</span> dialog.dismiss();</span><br><span class="line">  <span class="keyword">await</span> browser.close();</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure></div><p>然後改成符合筆者這裡需求的方式，用 Promise 包一層，而後立刻執行，讓它是 <code>Promise {pending}</code> 的狀態，因為還沒有真的按下表單送出，送出後才會判斷帳密是否正確</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> loginDialog = <span class="function">() =></span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =></span> {</span><br><span class="line">  page.on(<span class="string">'dialog'</span>, <span class="keyword">async</span> (dialog) => {</span><br><span class="line">    <span class="keyword">await</span> dialog.dismiss();</span><br><span class="line">    resolve(dialog.message());</span><br><span class="line">  });</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> startLoginDialog = loginDialog(); <span class="comment">// Promise {<pending>} 的狀態</pending></span></span><br></pre></td></tr></tbody></table></figure></div><p>OK，事件掛上去，如果直接 .then，又不一定會接到 resolve，可能會出現一大堆紅色字的 UnhandledPromiseRejectionWarning 錯誤訊息，因為有登入成功或登入失敗兩種情況，進入任一種就不會做另一種</p><ol><li>登入成功，完全不跳 alert</li><li>登入失敗，就反而是抓不到新頁面上的元件</li></ol><h2 id="Promise-race"><a href="#Promise-race" class="headerlink" title="Promise.race()"></a>Promise.race()</h2><p>原本想破頭這種一堆 Promise 的東西要怎麼寫 if/else 才能漂亮</p><p>不知為何一個靈光乍現，想到這個不曾用過的 <code>Promise.race</code>，只要任何一個 Promise 參數回了 resolve 或 reject，就會直接抓第一名的回傳內容往下做，還能省掉用不到的 Promise 所耗費的資源時間</p><p>最後程式就變成這樣一串（只擷取一部分，非完整程式碼）</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 監聽登入失敗的 alert</span></span><br><span class="line"><span class="keyword">const</span> loginDialog = <span class="function">() =></span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =></span> {</span><br><span class="line">  page.on(<span class="string">'dialog'</span>, <span class="keyword">async</span> (dialog) => {</span><br><span class="line">    <span class="keyword">await</span> dialog.dismiss();</span><br><span class="line">    resolve(dialog.message());</span><br><span class="line">  });</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line"><span class="comment">// 執行監聽，用新變數來等待 Promise {<pending>} 的狀態改變</pending></span></span><br><span class="line"><span class="keyword">const</span> startLoginDialog = loginDialog();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'按下 Enter'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">await</span> page.keyboard.press(<span class="string">'Enter'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 登入成功 - 跳轉頁面，可以取得頁面上的送出按鈕</span></span><br><span class="line"><span class="comment">// 登入失敗 - 跳出 alert 訊息框，提前結束動作，關閉瀏覽器</span></span><br><span class="line"><span class="keyword">const</span> elementOrMessage = <span class="keyword">await</span> <span class="built_in">Promise</span>.race([</span><br><span class="line">  page.waitFor(<span class="string">'body > app-root > app-record > button'</span>),</span><br><span class="line">  startLoginDialog,</span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (elementOrMessage === <span class="string">'帳號或密碼錯誤！'</span>) {</span><br><span class="line">  <span class="built_in">console</span>.log(elementOrMessage);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'登入失敗，關閉瀏覽器'</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">await</span> closeBrowser();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>程式的 18 行，用 Promise.race([Promise, Promise])，只要其中一個有回傳，就將回傳值拿來做後續判斷，如果是登入失敗的訊息，就關閉瀏覽器不做後續動作</p><h2 id="登入成功的-log"><a href="#登入成功的-log" class="headerlink" title="登入成功的 log"></a>登入成功的 log</h2><p><a href="https://i.imgur.com/HHOzITa.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/HHOzITa.png" class="lazyload"></a></p><h2 id="登入失敗的-log"><a href="#登入失敗的-log" class="headerlink" title="登入失敗的 log"></a>登入失敗的 log</h2><p><a href="https://i.imgur.com/bqBspJN.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/bqBspJN.png" class="lazyload"></a></p><h2 id="程式碼"><a href="#程式碼" class="headerlink" title="程式碼"></a>程式碼</h2><p>完整專案程式碼在此</p><p><a href="https://github.com/littlehorseboy/puppeteer-practice2/tree/20200711">https://github.com/littlehorseboy/puppeteer-practice2/tree/20200711</a></p><h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>會做這種判斷來區分流程，是因為筆者想要把寫好的爬蟲程式分發出去，每個人的帳密都各有不同，所以有可能輸入錯誤，對吧 XD？所以才想要做點防呆，搭配一堆 console.log，來明確知道爬蟲發生了什麼，有些流程上可能還可以玩 Node.js 的 readline 模組，給一些 question 來依照回饋做下一步動作，想著想著又多出一些想玩的東西了 XD</p></body></html>]]></content>
      
      
      <categories>
          
          <category> w3HexSchool </category>
          
          <category> Puppeteer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> w3HexSchool </tag>
            
            <tag> Puppeteer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>T-SQL TRANSACTION - 巢狀交易原來是要這樣思考的阿！？</title>
      <link href="/2020/07/05/202007-t-sql-save-tran/"/>
      <url>/2020/07/05/202007-t-sql-save-tran/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><p>Hi，大家好，最近在玩 T-SQL，如果是要讓一次執行中的多種的 INSERT、UPDATE、DELETE 語法能在其中任何一種發生錯誤時，就全部退回去，將資料回復成原樣，這時就可以用交易（TRANSACTION）的功能，讓執行的語法全部成功會正常寫入或一有失敗就沒改變任何資料，TRANSACTION 可以滿足 ACID 的規範（<strong>不可分割性</strong>、<strong>一致性</strong>、<strong>隔離性</strong>、<strong>持久性</strong>）</p><p>這次是用 T-SQL 寫了巢狀交易的程式，一支 SP 來執行另外兩支 SP，三支 SP 的程式碼都有用到 TRAN，結果丟資料執行後雖然看起來有正常執行，但如果故意弄錯誤資料來讓它跑 ROLLBACK，卻是報錯說 <code>找不到該名稱的交易或儲存點</code>，一開始對這個錯誤訊息真的摸不著頭緒，卡了好一陣子，甚至一度誤認為巢狀交易是不是無法做到的</p><p>但就在某個寂靜的夜晚，Google 搜尋了 「巢狀交易」，才終於發現真理以及原來是還有額外的語法要使用，才能讓 <code>找不到該名稱的交易或儲存點</code> 這個錯誤訊息消失</p><p>接下來會先示範簡單的 TRANSACTION 範例，而後示範筆者原本寫到會報錯的巢狀交易寫法，最後就是正確的巢狀交易寫法，因為希望能在文中簡易呈現，所以不是用 SP 來示範</p><hr><h2 id="簡單的-TRANSACTION-範例"><a href="#簡單的-TRANSACTION-範例" class="headerlink" title="簡單的 TRANSACTION 範例"></a>簡單的 TRANSACTION 範例</h2><h3 id="建立一張-Table-來-INSERT"><a href="#建立一張-Table-來-INSERT" class="headerlink" title="建立一張 Table 來 INSERT"></a>建立一張 Table 來 INSERT</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> [dbo].[Employees]</span><br><span class="line">(</span><br><span class="line"> Id    <span class="type">int</span>            <span class="keyword">IDENTITY</span>(<span class="number">1</span>,<span class="number">1</span>)  <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line"> Name  nvarchar(<span class="number">100</span>)                 <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line"> <span class="keyword">CONSTRAINT</span> [PK_Employees] <span class="keyword">PRIMARY</span> KEY CLUSTERED (</span><br><span class="line">   Id <span class="keyword">ASC</span></span><br><span class="line"> ) <span class="keyword">WITH</span> (</span><br><span class="line">   PAD_INDEX <span class="operator">=</span> OFF, STATISTICS_NORECOMPUTE <span class="operator">=</span> OFF, IGNORE_DUP_KEY <span class="operator">=</span> OFF, ALLOW_ROW_LOCKS <span class="operator">=</span> <span class="keyword">ON</span>, ALLOW_PAGE_LOCKS <span class="operator">=</span> <span class="keyword">ON</span></span><br><span class="line"> ) <span class="keyword">ON</span> [<span class="keyword">PRIMARY</span>]</span><br><span class="line">) <span class="keyword">ON</span> [<span class="keyword">PRIMARY</span>]</span><br></pre></td></tr></tbody></table></figure></div><p>寫兩段 INSERT 指令來執行一次</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> [dbo].[Employees] ([Name])</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="string">'Otis'</span>) <span class="comment">-- 這筆能正常 INSERT</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> [dbo].[Employees] ([Name])</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="keyword">NULL</span>) <span class="comment">-- 這筆因為不能 NULL 而失敗</span></span><br></pre></td></tr></tbody></table></figure></div><p>執行結果</p><p><a href="https://i.imgur.com/l1Ya3eN.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/l1Ya3eN.png" class="lazyload"></a></p><p>SELECT 結果就是有成功寫入一筆</p><p><a href="https://i.imgur.com/QgR8Eqj.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/QgR8Eqj.png" class="lazyload"></a></p><h3 id="加上-TRY-CATCH-及-TRANSACTION"><a href="#加上-TRY-CATCH-及-TRANSACTION" class="headerlink" title="加上 TRY CATCH 及 TRANSACTION"></a>加上 TRY CATCH 及 TRANSACTION</h3><p>先執行了這段讓 TABLE 回到沒資料的狀態，IDENTITY 也會重新開始編號</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">TRUNCATE</span> <span class="keyword">TABLE</span> Employees <span class="comment">-- 移除 TABLE Employees 的所有資料列</span></span><br></pre></td></tr></tbody></table></figure></div><p>現在筆者希望這兩段語法，如果有其中一筆失敗了，就不能夠寫入到資料庫</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">BEGIN</span> TRY</span><br><span class="line">      <span class="keyword">BEGIN</span> TRAN; <span class="comment">-- 啟動交易</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">INSERT</span> <span class="keyword">INTO</span> [dbo].[Employees] ([Name])</span><br><span class="line">      <span class="keyword">VALUES</span> (<span class="string">'Otis'</span>);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">INSERT</span> <span class="keyword">INTO</span> [dbo].[Employees] ([Name])</span><br><span class="line">      <span class="keyword">VALUES</span> (<span class="keyword">NULL</span>); <span class="comment">-- 這筆因為不能 NULL 而失敗，會進到 CATCH 區塊進行 ROLLBACK</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">COMMIT</span> TRAN; <span class="comment">-- 交易成功</span></span><br><span class="line"><span class="keyword">END</span> TRY</span><br><span class="line"><span class="keyword">BEGIN</span> CATCH</span><br><span class="line">      <span class="keyword">ROLLBACK</span> TRAN; <span class="comment">-- 回復到交易的開頭</span></span><br><span class="line"></span><br><span class="line">      THROW; <span class="comment">-- 拋出錯誤訊息</span></span><br><span class="line"><span class="keyword">END</span> CATCH</span><br></pre></td></tr></tbody></table></figure></div><p>執行結果</p><p><a href="https://i.imgur.com/FA5gIbq.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/FA5gIbq.png" class="lazyload"></a></p><blockquote><p>Note:<br>如果沒有寫 THROW，就不會顯示紅色字那段錯誤訊息</p></blockquote><p>SELECT 結果就是沒資料被寫入，原本能夠成功寫入的那段語法，被 ROLLBACK 給回復了</p><p><a href="https://i.imgur.com/2uJusvB.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/2uJusvB.png" class="lazyload"></a></p><p>如此這個簡單的 TRANSACTION 範例就完成了</p><blockquote><p>Note:<br>Rollback 回復交易後，雖然執行的 INSERT 都會被回復掉，但是 IDENTITY 不會被重置，也就是 Id 這個欄位因為 INSERT 過兩筆而跳了兩號</p><p>讀者們可以試試看再 INSERT 成功的指令，就能夠觀察到 IDENTITY 是從 3 開始</p></blockquote><hr><h2 id="巢狀交易，錯誤的寫法"><a href="#巢狀交易，錯誤的寫法" class="headerlink" title="巢狀交易，錯誤的寫法"></a>巢狀交易，錯誤的寫法</h2><p>原本以為交易包交易很單純，結構有正確應該就會乖乖的按照區塊 ROLLBACK 才是</p><h3 id="錯誤的寫法-1"><a href="#錯誤的寫法-1" class="headerlink" title="錯誤的寫法 - 1"></a>錯誤的寫法 - 1</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">BEGIN</span> TRY</span><br><span class="line">      <span class="keyword">BEGIN</span> TRAN;</span><br><span class="line"></span><br><span class="line">      <span class="comment">-- innerTran</span></span><br><span class="line">      <span class="keyword">BEGIN</span> TRY</span><br><span class="line">            <span class="keyword">BEGIN</span> TRAN;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">INSERT</span> <span class="keyword">INTO</span> [dbo].[Employees] ([Name])</span><br><span class="line">            <span class="keyword">VALUES</span> (<span class="string">'Otis'</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">INSERT</span> <span class="keyword">INTO</span> [dbo].[Employees] ([Name])</span><br><span class="line">            <span class="keyword">VALUES</span> (<span class="keyword">NULL</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">COMMIT</span> TRAN;</span><br><span class="line">      <span class="keyword">END</span> TRY</span><br><span class="line">      <span class="keyword">BEGIN</span> CATCH</span><br><span class="line">            <span class="keyword">ROLLBACK</span> TRAN;</span><br><span class="line"></span><br><span class="line">            THROW;</span><br><span class="line">      <span class="keyword">END</span> CATCH</span><br><span class="line">      <span class="comment">-- end innerTran</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">COMMIT</span> TRAN;</span><br><span class="line"><span class="keyword">END</span> TRY</span><br><span class="line"><span class="keyword">BEGIN</span> CATCH</span><br><span class="line">      <span class="keyword">ROLLBACK</span> TRAN;</span><br><span class="line"></span><br><span class="line">      THROW;</span><br><span class="line"><span class="keyword">END</span> CATCH</span><br></pre></td></tr></tbody></table></figure></div><p>執行結果</p><p><a href="https://i.imgur.com/j9rlQQ1.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/j9rlQQ1.png" class="lazyload"></a></p><p>內心 OS</p><p>筆者：沒有對應的 BEGIN TRANSACTION！？</p><p>筆者：那是不是我只要把每一個 TRAN 給它們名字呢，它們就會各自對應了呢？</p><p>筆者：就加吧加吧</p><hr><h3 id="錯誤的寫法-2"><a href="#錯誤的寫法-2" class="headerlink" title="錯誤的寫法 - 2"></a>錯誤的寫法 - 2</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">BEGIN</span> TRY</span><br><span class="line">      <span class="keyword">BEGIN</span> TRAN outterTran;</span><br><span class="line"></span><br><span class="line">      <span class="comment">-- innerTran</span></span><br><span class="line">      <span class="keyword">BEGIN</span> TRY</span><br><span class="line">            <span class="keyword">BEGIN</span> TRAN innerTran;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">INSERT</span> <span class="keyword">INTO</span> [dbo].[Employees] ([Name])</span><br><span class="line">            <span class="keyword">VALUES</span> (<span class="string">'Otis'</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">INSERT</span> <span class="keyword">INTO</span> [dbo].[Employees] ([Name])</span><br><span class="line">            <span class="keyword">VALUES</span> (<span class="keyword">NULL</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">COMMIT</span> TRAN innerTran;</span><br><span class="line">      <span class="keyword">END</span> TRY</span><br><span class="line">      <span class="keyword">BEGIN</span> CATCH</span><br><span class="line">            <span class="keyword">ROLLBACK</span> TRAN innerTran;</span><br><span class="line"></span><br><span class="line">            THROW;</span><br><span class="line">      <span class="keyword">END</span> CATCH</span><br><span class="line">      <span class="comment">-- end innerTran</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">COMMIT</span> TRAN outterTran;</span><br><span class="line"><span class="keyword">END</span> TRY</span><br><span class="line"><span class="keyword">BEGIN</span> CATCH</span><br><span class="line">      <span class="keyword">ROLLBACK</span> TRAN outterTran;</span><br><span class="line"></span><br><span class="line">      THROW;</span><br><span class="line"><span class="keyword">END</span> CATCH</span><br></pre></td></tr></tbody></table></figure></div><p>執行結果</p><p><a href="https://i.imgur.com/8hbjrHd.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/8hbjrHd.png" class="lazyload"></a></p><p>內心 OS</p><p>筆者：What！？</p><p>筆者：怎麼反而是很明確的告訴了我 innerTran 無法回復，程式不就整齊的 BEGIN + END 嗎，到底是什麼問題ㄚㄚㄚ？？？</p><p>筆者：而且還少了應該出現的無法插入 NULL 的錯誤訊息，但是的確都還是有執行 ROLLBACK，資料表都沒有被寫入資料</p><p>筆者：（左思右想，胡思亂想）</p><p>這邊開始就卡了好一段時間，甚至是放棄了巢狀寫法，畢竟有錯誤訊息感覺就很不穩，把內層的 TRAN 給拿掉了</p><hr><h2 id="巢狀交易，正確的寫法"><a href="#巢狀交易，正確的寫法" class="headerlink" title="巢狀交易，正確的寫法"></a>巢狀交易，正確的寫法</h2><p>後來因為查到一篇文章寫到這句（文章連結附在文末的參考資料，超級推薦）</p><blockquote><p>Note:<br>巢狀交易時，ROLLBACK 不管在哪一層，它會 ROLLBACK 巢狀中的所有交易</p></blockquote><p>這一句猶如醍醐灌頂，原來無法回復，找不到交易或儲存點就是因為這個原因！！</p><p>另外還有在文中看到 SAVE TRANSACTION 這個在交易內設定儲存點的指令，可以用來回復局部 ROLLBACK</p><p>查了一下官方文檔，還直接有 <a href="https://docs.microsoft.com/zh-tw/sql/t-sql/language-elements/save-transaction-transact-sql?view=sql-server-ver15">程式碼範例</a>，拿來邊參考邊改程式</p><h3 id="正確的寫法"><a href="#正確的寫法" class="headerlink" title="正確的寫法"></a>正確的寫法</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">BEGIN</span> TRY</span><br><span class="line">      <span class="keyword">BEGIN</span> TRAN outterTran;</span><br><span class="line"></span><br><span class="line">      <span class="comment">-- innerTran</span></span><br><span class="line">      <span class="keyword">DECLARE</span> <span class="variable">@TranCounter</span> <span class="type">INT</span> <span class="operator">=</span> @<span class="variable">@TRANCOUNT</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">BEGIN</span> TRY</span><br><span class="line">            <span class="comment">-- @TranCounter > 0 代表目前已經是在交易內，改用 SAVE TRAN</span></span><br><span class="line">            IF (<span class="variable">@TranCounter</span> <span class="operator">></span> <span class="number">0</span>) SAVE TRAN innerTran;</span><br><span class="line">            <span class="keyword">ELSE</span> <span class="keyword">BEGIN</span> TRAN innerTran;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">INSERT</span> <span class="keyword">INTO</span> [dbo].[Employees] ([Name])</span><br><span class="line">            <span class="keyword">VALUES</span> (<span class="string">'Otis'</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">INSERT</span> <span class="keyword">INTO</span> [dbo].[Employees] ([Name])</span><br><span class="line">            <span class="keyword">VALUES</span> (<span class="keyword">NULL</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">-- SAVE TRAN 不做 COMMIT</span></span><br><span class="line">            IF (<span class="variable">@TranCounter</span> <span class="operator">=</span> <span class="number">0</span>) <span class="keyword">COMMIT</span> TRAN innerTran;</span><br><span class="line">      <span class="keyword">END</span> TRY</span><br><span class="line">      <span class="keyword">BEGIN</span> CATCH</span><br><span class="line">            <span class="comment">-- SAVE TRAN 局部交易回復</span></span><br><span class="line">            <span class="keyword">ROLLBACK</span> TRAN innerTran;</span><br><span class="line"></span><br><span class="line">            THROW;</span><br><span class="line">      <span class="keyword">END</span> CATCH</span><br><span class="line">      <span class="comment">-- end innerTran</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">COMMIT</span> TRAN outterTran;</span><br><span class="line"><span class="keyword">END</span> TRY</span><br><span class="line"><span class="keyword">BEGIN</span> CATCH</span><br><span class="line">      <span class="keyword">ROLLBACK</span> TRAN outterTran;</span><br><span class="line"></span><br><span class="line">      THROW;</span><br><span class="line"><span class="keyword">END</span> CATCH</span><br></pre></td></tr></tbody></table></figure></div><blockquote><p>Note:<br>@@TRANCOUNT = 0 代表是最底層的 TRANSACTION</p><p>@@TRANCOUNT > 0 則是巢狀內的 TRANSACTION</p></blockquote><p>執行結果</p><p><a href="https://i.imgur.com/TvHHZEa.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/TvHHZEa.png" class="lazyload"></a></p><p>終於沒有那種找不到交易的錯誤訊息了 XD！！可喜可賀</p><h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>「巢狀交易」這四個字是在 <a href="https://docs.microsoft.com/zh-tw/sql/t-sql/language-elements/begin-transaction-transact-sql?view=sql-server-ver15#general-remarks">官方文件的 BEGIN TRANSACTION</a> 看到的</p><p>有一段時間是這樣子的歷程，雖然看的是官方文件，但因為 T-SQL 的經驗不夠，反而誤解了文件所表達的東西，以為巢狀交易是無法達成的 XD</p><p>後來就是反覆的實驗，寫 CODE 執行，爬更多文，再重新讀文檔，這樣的循環，才終於弄清楚那段錯誤訊息的含意，真的花了不少時間 XD，也就這麼催生了想寫這篇文的想法</p><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><p><a href="https://docs.microsoft.com/zh-tw/sql/t-sql/language-elements/begin-transaction-transact-sql?view=sql-server-ver15#general-remarks">https://docs.microsoft.com/zh-tw/sql/t-sql/language-elements/begin-transaction-transact-sql?view=sql-server-ver15#general-remarks</a></p><p><a href="https://docs.microsoft.com/zh-tw/sql/t-sql/language-elements/save-transaction-transact-sql?view=sql-server-ver15">https://docs.microsoft.com/zh-tw/sql/t-sql/language-elements/save-transaction-transact-sql?view=sql-server-ver15</a></p><p>大推這位大大的 Understanding Transaction，它就是在那個寂靜的夜晚，Google 搜尋「巢狀交易」四個字查到，然後直接打通我的任督二脈的超厲害文章<br><a href="http://vito-note.blogspot.com/2013/05/transactions.html">http://vito-note.blogspot.com/2013/05/transactions.html</a></p></body></html>]]></content>
      
      
      <categories>
          
          <category> w3HexSchool </category>
          
          <category> T-SQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> w3HexSchool </tag>
            
            <tag> T-SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>T-SQL OPENJSON，想不到能直接用 SQL 來處理 JSON</title>
      <link href="/2020/06/28/2020-t-sql-json-part-1/"/>
      <url>/2020/06/28/2020-t-sql-json-part-1/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><p>Hi，大家好，最近玩 T-SQL 用到了很特別的 OPENJSON 函式，以往處理 JSON 都會在前後端解決，想不到 SQL 能利用 OPENJSON 函式直接把 JSON 當成一個資料表來存取</p><blockquote><p>NOTE</p><p>T-SQL OPENJSON 函式適用於 SQL Server 2016 以上</p></blockquote><h2 id="OPENJSON-預設輸出"><a href="#OPENJSON-預設輸出" class="headerlink" title="OPENJSON 預設輸出"></a>OPENJSON 預設輸出</h2><p>OPENJSON 大多會搭配 WITH 子句來使用（稍後會使用到），如果不搭配 WITH，會傳回預設輸出</p><ol><li>key: 物件屬性名稱</li><li>value: 值</li><li>type: 類型<ul><li>0 -> null</li><li>1 -> String</li><li>2 -> Number</li><li>3 -> Boolean</li><li>4 -> Array</li><li>5 -> Object</li></ul>類型是隨 JSON 值的型態不同而產生的數字，詳情可以看到 <a href="https://docs.microsoft.com/zh-tw/sql/t-sql/functions/openjson-transact-sql?view=sql-server-ver15#return-value">官方文檔</a> 有對傳回值做詳細說明</li></ol><h3 id="使用-OPENJSON-剖析轉換-JSON"><a href="#使用-OPENJSON-剖析轉換-JSON" class="headerlink" title="使用 OPENJSON 剖析轉換 JSON"></a>使用 OPENJSON 剖析轉換 JSON</h3><h4 id="剖析-JSON-物件"><a href="#剖析-JSON-物件" class="headerlink" title="剖析 JSON 物件"></a>剖析 JSON 物件</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DECLARE</span> <span class="variable">@json</span> <span class="type">VARCHAR</span>(MAX) <span class="operator">=</span> <span class="string">'</span></span><br><span class="line"><span class="string">{</span></span><br><span class="line"><span class="string">  "name": "horse",</span></span><br><span class="line"><span class="string">  "age": 18,</span></span><br><span class="line"><span class="string">  "isHandsome": true,</span></span><br><span class="line"><span class="string">  "nullValue": null,</span></span><br><span class="line"><span class="string">  "arrayValue": [1, 2, 3],</span></span><br><span class="line"><span class="string">  "objectValue": { "obj": "objString" }</span></span><br><span class="line"><span class="string">}</span></span><br><span class="line"><span class="string">'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> OPENJSON(<span class="variable">@json</span>);</span><br></pre></td></tr></tbody></table></figure></div><p><a href="https://i.imgur.com/6p7JUGH.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/6p7JUGH.png" class="lazyload"></a></p><h4 id="剖析-JSON-物件陣列"><a href="#剖析-JSON-物件陣列" class="headerlink" title="剖析 JSON 物件陣列"></a>剖析 JSON 物件陣列</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DECLARE</span> <span class="variable">@json</span> <span class="type">VARCHAR</span>(MAX) <span class="operator">=</span> <span class="string">'</span></span><br><span class="line"><span class="string">[</span></span><br><span class="line"><span class="string">  {</span></span><br><span class="line"><span class="string">    "name": "horse",</span></span><br><span class="line"><span class="string">     "age": 18</span></span><br><span class="line"><span class="string">  },</span></span><br><span class="line"><span class="string">  {</span></span><br><span class="line"><span class="string">    "name": "Otis",</span></span><br><span class="line"><span class="string">    "age": 18</span></span><br><span class="line"><span class="string">  }</span></span><br><span class="line"><span class="string">]</span></span><br><span class="line"><span class="string">'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> OPENJSON(<span class="variable">@json</span>);</span><br></pre></td></tr></tbody></table></figure></div><p><a href="https://i.imgur.com/mC2lyLd.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/mC2lyLd.png" class="lazyload"></a></p><p>這種預設結構的顯示結果應該是或多或少會有需要用到的時候，不過筆者主要使用到的是下一種搭配 WITH 的用法，能夠帶有明確的結構，簡直就像是把 JSON 當作一張資料表來使用</p><h2 id="有明確結構的-OPENJSON-輸出"><a href="#有明確結構的-OPENJSON-輸出" class="headerlink" title="有明確結構的 OPENJSON 輸出"></a>有明確結構的 OPENJSON 輸出</h2><p>使用 OPENJSON 函數的 WITH 子句指定結果的結構描述時，會傳回在 WITH 子句中所定義之資料行的資料表，逐一查看 JSON 物件陣列、讀取為每個資料行指定的值，並將值轉換成指定的型別</p><h3 id="剖析物件陣列，搭配-WITH"><a href="#剖析物件陣列，搭配-WITH" class="headerlink" title="剖析物件陣列，搭配 WITH"></a>剖析物件陣列，搭配 WITH</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DECLARE</span> <span class="variable">@json</span> <span class="type">VARCHAR</span>(MAX) <span class="operator">=</span> <span class="string">'</span></span><br><span class="line"><span class="string">[</span></span><br><span class="line"><span class="string">  {</span></span><br><span class="line"><span class="string">    "name": "horse",</span></span><br><span class="line"><span class="string">     "age": 18</span></span><br><span class="line"><span class="string">  },</span></span><br><span class="line"><span class="string">  {</span></span><br><span class="line"><span class="string">    "name": "Otis",</span></span><br><span class="line"><span class="string">    "age": 18</span></span><br><span class="line"><span class="string">  }</span></span><br><span class="line"><span class="string">]</span></span><br><span class="line"><span class="string">'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> OPENJSON(<span class="variable">@json</span>)</span><br><span class="line"><span class="keyword">WITH</span> (name  <span class="type">VARCHAR</span>(<span class="number">100</span>)  <span class="string">'$.name'</span>,</span><br><span class="line">      age   <span class="type">INT</span>           <span class="string">'$.age'</span>)</span><br></pre></td></tr></tbody></table></figure></div><p><a href="https://i.imgur.com/U2hra0B.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/U2hra0B.png" class="lazyload"></a></p><p>可以看到他把陣列內的兩筆物件給按照 WITH 子句所寫的結構描述來呈現</p><h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>本篇只有帶出最簡易的 OPENJSON 用法，有時 JSON 結構可能會更複雜，那要處理時所寫的 SQL 程式就不只這樣，其實還有很多操作 JSON 的函式還沒有寫到</p><p>另外，在實務上，接到一包 JSON，後續通常是要用來做 INSERT 或 UPDATE 等等的 SQL 操作</p><p>這些就留待後續的文章補上</p><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ol><li><a href="https://docs.microsoft.com/zh-tw/sql/relational-databases/json/convert-json-data-to-rows-and-columns-with-openjson-sql-server?view=sql-server-ver15">使用 OPENJSON 剖析及轉換 JSON 資料 (SQL Server)</a></li></ol></body></html>]]></content>
      
      
      <categories>
          
          <category> w3HexSchool </category>
          
          <category> T-SQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> w3HexSchool </tag>
            
            <tag> T-SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>learnyounode（Exercise 12 - HTTP 回傳大寫字體）</title>
      <link href="/2020/06/21/2020-learnyounode-exercise-12/"/>
      <url>/2020/06/21/2020-learnyounode-exercise-12/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><p>Hi，大家好，今天要來解 Node.js 的練習題，題目來源為 <a href="https://nodeschool.io/zh-tw/">NODESCHOOL</a> 的 <a href="https://github.com/workshopper/learnyounode">learnyounode</a>，期望透過解題來了解更多關於 Node.js 的基礎應用知識</p><p>如果還不知道題目是怎麼得來的，或是想知道更詳細的 learnyounode 使用教學，可以到我這個系列的第一篇文章 <a href="https://littlehorseboy.github.io/2020/03/13/2020-learnyounode-exercise-1/">learnyounode (Exercise 1 of 13)</a> 看看</p><p>那麼就開始練習本次的題目吧！這次要解的是第十二題的『HTTP 回傳大寫字體』</p><blockquote><p><strong>TIP</strong></p><p>以下內容暴雷了題目的解答，如果是想要先自己嘗試思考並解開題目的人，請斟酌觀看</p></blockquote><hr><h2 id="挑戰-Exercise-12-『HTTP-回傳大寫字體』"><a href="#挑戰-Exercise-12-『HTTP-回傳大寫字體』" class="headerlink" title="挑戰 Exercise 12 - 『HTTP 回傳大寫字體』"></a>挑戰 Exercise 12 - 『HTTP 回傳大寫字體』</h2><blockquote><p><strong>Q：</strong></p><p>撰寫一個只能接收 POST 請求的 HTTP 伺服器，這個伺服器會把收到的 POST 內容字元轉換成大寫，並回應給客戶端。</p><p>您的伺服器應該監聽在第一個參數所給予的 port 上。</p></blockquote><h3 id="劃重點"><a href="#劃重點" class="headerlink" title="劃重點"></a>劃重點</h3><p>循著提示來了解幾個重點</p><ul><li>必須建立一個 HTTP 伺服器</li><li>接收 POST 請求</li><li>回傳大寫文字</li></ul><h3 id="程式碼"><a href="#程式碼" class="headerlink" title="程式碼"></a>程式碼</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* exercise12.js */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> server = http</span><br><span class="line">  .createServer(<span class="function">(<span class="params">req, res</span>) =></span> {</span><br><span class="line">    <span class="keyword">let</span> body = <span class="string">''</span>;</span><br><span class="line">    req.on(<span class="string">'data'</span>, <span class="function">(<span class="params">chunk</span>) =></span> {</span><br><span class="line">      <span class="keyword">if</span> (req.method !== <span class="string">'POST'</span>) {</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'error'</span>);</span><br><span class="line">      }</span><br><span class="line">      body += chunk;</span><br><span class="line">    });</span><br><span class="line">    req.on(<span class="string">'end'</span>, <span class="function">() =></span> {</span><br><span class="line">      res.writeHead(<span class="number">200</span>, { <span class="string">'content-type'</span>: <span class="string">'application/json'</span> });</span><br><span class="line">      res.write(body.toUpperCase());</span><br><span class="line">      res.end();</span><br><span class="line">    });</span><br><span class="line">  })</span><br><span class="line">  .on(<span class="string">'error'</span>, <span class="function">(<span class="params">err</span>) =></span> {</span><br><span class="line">    <span class="keyword">throw</span> err;</span><br><span class="line">  });</span><br><span class="line"></span><br><span class="line">server.listen(process.argv[<span class="number">2</span>], <span class="function">() =></span> {</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'opened server on'</span>, server.address());</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure></div><p>這樣就可以執行 <code>learnyounode verify exercise12.js</code> 來通過測驗了</p><hr><h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>本篇挑戰的第十二題，感覺算是比較簡單的建立伺服器 XD，只要記得判斷 req.method 等於 POST 及回傳內容要轉大寫即可</p></body></html>]]></content>
      
      
      <categories>
          
          <category> w3HexSchool </category>
          
          <category> node.js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> w3HexSchool </tag>
            
            <tag> node.js </tag>
            
            <tag> learnyounode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>learnyounode（Exercise 11 - HTTP 檔案伺服器）</title>
      <link href="/2020/06/14/2020-learnyounode-exercise-11/"/>
      <url>/2020/06/14/2020-learnyounode-exercise-11/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><p>Hi，大家好，今天要來解 Node.js 的練習題，題目來源為 <a href="https://nodeschool.io/zh-tw/">NODESCHOOL</a> 的 <a href="https://github.com/workshopper/learnyounode">learnyounode</a>，期望透過解題來了解更多關於 Node.js 的基礎應用知識</p><p>如果還不知道題目是怎麼得來的，或是想知道更詳細的 learnyounode 使用教學，可以到我這個系列的第一篇文章 <a href="https://littlehorseboy.github.io/2020/03/13/2020-learnyounode-exercise-1/">learnyounode (Exercise 1 of 13)</a> 看看</p><p>那麼就開始練習本次的題目吧！這次要解的是第十一題的『HTTP 檔案伺服器』</p><blockquote><p><strong>TIP</strong></p><p>以下內容暴雷了題目的解答，如果是想要先自己嘗試思考並解開題目的人，請斟酌觀看</p></blockquote><hr><h2 id="挑戰-Exercise-11-『HTTP-檔案伺服器』"><a href="#挑戰-Exercise-11-『HTTP-檔案伺服器』" class="headerlink" title="挑戰 Exercise 11 - 『HTTP 檔案伺服器』"></a>挑戰 Exercise 11 - 『HTTP 檔案伺服器』</h2><blockquote><p><strong>Q：</strong></p><p>撰寫一個 HTTP 伺服器 ，可以提供它收到的 text 檔案給所有收到的請求。</p><p>第一個參數是 port ，您的伺服器應該監聽在第一個參數所給予的 port 上。</p><p>第二個參數是提供的檔案。必須使用 <code>fs.createReadStream()</code> 方法將檔案內容傳遞到回應上。</p></blockquote><h3 id="劃重點"><a href="#劃重點" class="headerlink" title="劃重點"></a>劃重點</h3><p>循著提示來了解幾個重點</p><ul><li>必須建立一個 HTTP 伺服器</li><li>fs 核心模組也有一些針對檔案的串流 API 可以用。將會需要用 fs.createReadStream()</li><li>fs.createReadStream() 將第一個參數指定的檔案建立成串流</li><li>.pipe(res) 把檔案系統串流和 HTTP 回應串流連在一起</li></ul><h3 id="程式碼"><a href="#程式碼" class="headerlink" title="程式碼"></a>程式碼</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* exercise11.js */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> server = http</span><br><span class="line">  .createServer(<span class="function">(<span class="params">req, res</span>) =></span> {</span><br><span class="line">    res.writeHead(<span class="number">200</span>, { <span class="string">'content-type'</span>: <span class="string">'text/plain'</span> });</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> readStream = fs.createReadStream(process.argv[<span class="number">3</span>]);</span><br><span class="line"></span><br><span class="line">    readStream</span><br><span class="line">      .on(<span class="string">'open'</span>, <span class="function">() =></span> {</span><br><span class="line">        readStream.pipe(res);</span><br><span class="line">      })</span><br><span class="line">      .on(<span class="string">'error'</span>, <span class="function">(<span class="params">err</span>) =></span> {</span><br><span class="line">        res.end(err);</span><br><span class="line">      });</span><br><span class="line">  })</span><br><span class="line">  .on(<span class="string">'error'</span>, <span class="function">(<span class="params">err</span>) =></span> {</span><br><span class="line">    <span class="keyword">throw</span> err;</span><br><span class="line">  });</span><br><span class="line"></span><br><span class="line">server.listen(process.argv[<span class="number">2</span>], <span class="function">() =></span> {</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'opened server on'</span>, server.address());</span><br><span class="line">});</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></div><p>這樣就可以執行 <code>learnyounode verify exercise11.js</code> 來通過測驗了</p><hr><h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>本篇所挑戰的第十一題，fs.readFile 也能達到一樣的事情，達到讀取檔案並回傳，但如果讀取的檔案有 200MB，那使用 readFile 可能會瞬間占掉 200MB 的內存來放這個檔案</p><p>fs.createReadStream() 不同的是，它用串流的方式來讀取檔案，切成一塊一塊 chunk(大多是 16k) 傳給發送請求的地方，在讀取到大容量的文件時，能有效控制 I/O 開銷</p></body></html>]]></content>
      
      
      <categories>
          
          <category> w3HexSchool </category>
          
          <category> node.js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> w3HexSchool </tag>
            
            <tag> node.js </tag>
            
            <tag> learnyounode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>learnyounode（Exercise 10 - 報時伺服器）</title>
      <link href="/2020/06/05/2020-learnyounode-exercise-10/"/>
      <url>/2020/06/05/2020-learnyounode-exercise-10/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><p>Hi，大家好，今天要來解 Node.js 的練習題，題目來源為 <a href="https://nodeschool.io/zh-tw/">NODESCHOOL</a> 的 <a href="https://github.com/workshopper/learnyounode">learnyounode</a>，期望透過解題來了解更多關於 Node.js 的基礎應用知識</p><p>如果還不知道題目是怎麼得來的，或是想知道更詳細的 learnyounode 使用教學，可以到我這個系列的第一篇文章 <a href="https://littlehorseboy.github.io/2020/03/13/2020-learnyounode-exercise-1/">learnyounode (Exercise 1 of 13)</a> 看看</p><p>那麼就開始練習本次的題目吧！這次要解的是第十題的『報時伺服器』</p><blockquote><p><strong>TIP</strong></p><p>以下內容暴雷了題目的解答，如果是想要先自己嘗試思考並解開題目的人，請斟酌觀看</p></blockquote><hr><h2 id="挑戰-Exercise-10-『報時伺服器』"><a href="#挑戰-Exercise-10-『報時伺服器』" class="headerlink" title="挑戰 Exercise 10 - 『報時伺服器』"></a>挑戰 Exercise 10 - 『報時伺服器』</h2><blockquote><p><strong>Q：</strong></p><p>撰寫一個 TCP 時間伺服器！</p><p>您的伺服器應該持續堅聽在第一個參數提供的 port 上。每個連線，您都必須以底下的格式回應當前的日期及24小時制的時間：</p><p>“YYYY-MM-DD hh:mm”</p><p>緊接著是一個 換行（newline） 字元。月、日、小時、時間都必須 填入零到成為2位數。例如：</p><p>“2013-07-06 17:42”</p></blockquote><h3 id="劃重點"><a href="#劃重點" class="headerlink" title="劃重點"></a>劃重點</h3><p>循著提示來了解幾個重點</p><ul><li>必須建立一個 TCP 伺服器</li><li>Node 核心的 net 模組</li><li>net 模組有一個名為 net.createServer() 的方法</li><li>net.createServer() 還會回傳一個 server 的實例（instance）。必須呼叫 server.listen(portNumber) 以開始監聽特定的 port</li><li>第一個參數給 port number</li><li>socket 物件包含一堆和連線有關的 meta-data ，不過這也是一個可讀、可寫的 Node 雙工串流（duplex Stream）。在這個習題中，我們只需要寫入資料，然後關閉 socket</li><li>使用 socket.write(data) 可以對 socket 寫入資料，以及使用 socket.end() 以關閉 socket 。另外， .end() 方法也可以加上一個 data 物件作為參數，所以您可以很簡單的這樣使用： socket.end(data)</li></ul><h3 id="程式碼"><a href="#程式碼" class="headerlink" title="程式碼"></a>程式碼</h3><p>程式中引入 Node 核心模組 net，使用 net.createServer() 得到的回傳值為 socket，用 socket.end() 達成在連線時回傳一個值</p><p>回傳值需要是 “2013-07-06 17:42” 這種日期字串，new Date() 的 getMonth() 記得要 + 1，因為它是從 0 開始算是一月，幾乎都用了 ES6+ 的字串函式 padStart(2, ‘0’) 來將個位數的值補 0</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* exercise10.js */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> net = <span class="built_in">require</span>(<span class="string">'net'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> server = net</span><br><span class="line">  .createServer(<span class="function">(<span class="params">socket</span>) =></span> {</span><br><span class="line">    <span class="keyword">const</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">    <span class="keyword">const</span> str = date.getFullYear()</span><br><span class="line">      + <span class="string">'-'</span></span><br><span class="line">      + <span class="built_in">String</span>(date.getMonth() + <span class="number">1</span>).padStart(<span class="number">2</span>, <span class="string">'0'</span>)</span><br><span class="line">      + <span class="string">'-'</span></span><br><span class="line">      + <span class="built_in">String</span>(date.getDate()).padStart(<span class="number">2</span>, <span class="string">'0'</span>)</span><br><span class="line">      + <span class="string">' '</span></span><br><span class="line">      + <span class="built_in">String</span>(date.getHours()).padStart(<span class="number">2</span>, <span class="string">'0'</span>)</span><br><span class="line">      + <span class="string">':'</span></span><br><span class="line">      + <span class="built_in">String</span>(date.getMinutes()).padStart(<span class="number">2</span>, <span class="string">'0'</span>);</span><br><span class="line"></span><br><span class="line">    socket.end(str + <span class="string">'\n'</span>);</span><br><span class="line">  })</span><br><span class="line">  .on(<span class="string">'error'</span>, <span class="function">(<span class="params">err</span>) =></span> {</span><br><span class="line">    <span class="keyword">throw</span> err;</span><br><span class="line">  });</span><br><span class="line"></span><br><span class="line">server.listen(process.argv[<span class="number">2</span>], <span class="function">() =></span> {</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'opened server on'</span>, server.address());</span><br><span class="line">});</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></div><p>這樣就可以執行 <code>learnyounode verify exercise10.js</code> 來通過測驗了</p><hr><h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>本篇所挑戰的第十題，很特別是建立了 TCP 伺服器，筆者只懂 Http Request 怎麼發送，就算稍微有聽過三向交握，還是不太了解怎麼對 TCP 伺服器進行溝通 XD，卡了好久才摸索著用提示配不斷的驗證答案來解題 XD</p></body></html>]]></content>
      
      
      <categories>
          
          <category> w3HexSchool </category>
          
          <category> node.js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> w3HexSchool </tag>
            
            <tag> node.js </tag>
            
            <tag> learnyounode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>T-SQL 旋轉 SELECT 結果，用 PIVOT 就能輕鬆達到需求</title>
      <link href="/2020/05/31/2020-t-sql-pivot/"/>
      <url>/2020/05/31/2020-t-sql-pivot/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><p>Hi，大家好，最近在工作上玩 T-SQL，正巧遇到需要將一列一列的資料</p><p>像這樣</p><p><a href="https://i.imgur.com/GbM5MS4.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/GbM5MS4.png" class="lazyload"></a></p><p>給旋轉成這種一列的結果</p><p><a href="https://i.imgur.com/Zb7hRic.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/Zb7hRic.png" class="lazyload"></a></p><p>正巧得知 PIVOT 可以輕鬆達到這種需求，成功解決後就想特別寫這篇來記錄一下 PIVOT 的使用心得</p><h2 id="建立-TempTable-的示範資料"><a href="#建立-TempTable-的示範資料" class="headerlink" title="建立 #TempTable 的示範資料"></a>建立 #TempTable 的示範資料</h2><p>在 Microsoft Docs 的文檔中，<code>CREATE TABLE #table</code> 這個技巧稱為 <a href="https://docs.microsoft.com/zh-tw/sql/t-sql/statements/create-table-transact-sql?view=sql-server-ver15#temporary-tables">暫存資料表</a>，詳細可以點連結進去看看，文檔超詳細說明了暫存資料表的細節</p><p>這邊寫的 SQL 程式碼就是利用 <code>CREATE TABLE #table</code> 來建立暫存資料表，並且在執行完動作馬上 <code>DROP TABLE</code>，如果沒有 DROP，這個 #table 則會在中斷連接時清除，在這裡是為了讓每次執行 SQL 都有一個乾淨 table 來呈現，所以都有用 DROP</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> #<span class="keyword">table</span> (</span><br><span class="line"><span class="keyword">No</span> <span class="type">INT</span> <span class="keyword">IDENTITY</span>(<span class="number">1</span>, <span class="number">1</span>) <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">Name <span class="type">VARCHAR</span>(<span class="number">10</span>),</span><br><span class="line"><span class="keyword">Value</span> <span class="type">VARCHAR</span>(<span class="number">10</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> #<span class="keyword">table</span> (Name, <span class="keyword">Value</span>)</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="string">'1001'</span>, <span class="string">'32'</span>), (<span class="string">'1002'</span>, <span class="string">'14'</span>), (<span class="string">'1003'</span>, <span class="string">'48.3'</span>), (<span class="string">'1004'</span>, <span class="string">'7'</span>), (<span class="string">'1005'</span>, <span class="string">'46'</span>)</span><br><span class="line">    </span><br><span class="line"><span class="comment">----------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> #<span class="keyword">table</span></span><br><span class="line"></span><br><span class="line"><span class="comment">----------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> #<span class="keyword">table</span></span><br></pre></td></tr></tbody></table></figure></div><p>本次要拿來玩的資料就長這樣</p><p><a href="https://i.imgur.com/GbM5MS4.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/GbM5MS4.png" class="lazyload"></a></p><hr><h2 id="利用-PIVOT-來旋轉結果"><a href="#利用-PIVOT-來旋轉結果" class="headerlink" title="利用 PIVOT 來旋轉結果"></a>利用 PIVOT 來旋轉結果</h2><p>在資料中，欄位 No 只是用來當 primary key 的流水號，所以這邊沒使用到 No</p><p>用 PIVOT 是想要讓 <code>欄位 Name 的值</code> 可以 <code>成為欄位名稱</code>，<code>欄位 Value 的值</code> 對應使用了哪些 Name，就會將值帶入旋轉後的結果</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> #<span class="keyword">table</span> (</span><br><span class="line"><span class="keyword">No</span> <span class="type">INT</span> <span class="keyword">IDENTITY</span>(<span class="number">1</span>, <span class="number">1</span>) <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">Name <span class="type">VARCHAR</span>(<span class="number">10</span>),</span><br><span class="line"><span class="keyword">Value</span> <span class="type">VARCHAR</span>(<span class="number">10</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> #<span class="keyword">table</span> (Name, <span class="keyword">Value</span>)</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="string">'1001'</span>, <span class="string">'32'</span>), (<span class="string">'1002'</span>, <span class="string">'14'</span>), (<span class="string">'1003'</span>, <span class="string">'48.3'</span>), (<span class="string">'1004'</span>, <span class="string">'7'</span>), (<span class="string">'1005'</span>, <span class="string">'46'</span>)</span><br><span class="line">    </span><br><span class="line"><span class="comment">----------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span>  [<span class="number">1001</span>], [<span class="number">1002</span>], [<span class="number">1003</span>], [<span class="number">1004</span>], [<span class="number">1005</span>] <span class="keyword">FROM</span> (</span><br><span class="line"><span class="keyword">SELECT</span> Name, <span class="keyword">Value</span></span><br><span class="line"><span class="keyword">FROM</span> #<span class="keyword">table</span></span><br><span class="line">) <span class="keyword">AS</span> SourceTable</span><br><span class="line">PIVOT</span><br><span class="line">(</span><br><span class="line"><span class="built_in">MAX</span>(<span class="keyword">Value</span>)</span><br><span class="line"><span class="keyword">FOR</span> Name <span class="keyword">IN</span> ([<span class="number">1001</span>], [<span class="number">1002</span>], [<span class="number">1003</span>], [<span class="number">1004</span>], [<span class="number">1005</span>])</span><br><span class="line">) <span class="keyword">AS</span> PivotTable</span><br><span class="line"></span><br><span class="line"><span class="comment">----------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> #<span class="keyword">table</span></span><br></pre></td></tr></tbody></table></figure></div><blockquote><p>要注意到的是 PIVOT 勢必要搭配一個彙總函式，例如 SUM、COUNT 或這邊用了 MAX</p><p>SUM 或是 COUNT 這些勢必要是 <code>數值</code> 內容才能使用</p><p>不過 MAX 可以用在 VARCHAR NVACHAR 之類的欄位值</p></blockquote><p>結果如下，輕輕鬆鬆就能達成旋轉資料囉</p><p><a href="https://i.imgur.com/Zb7hRic.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/Zb7hRic.png" class="lazyload"></a></p><hr><h2 id="特別加映，動態-PIVOT，使用-EXEC-sp-executesql"><a href="#特別加映，動態-PIVOT，使用-EXEC-sp-executesql" class="headerlink" title="特別加映，動態 PIVOT，使用 EXEC sp_executesql"></a>特別加映，動態 PIVOT，使用 <code>EXEC sp_executesql</code></h2><p>因為需求變更，不是每次都需要拿 [1001], [1002], [1003], [1004], [1005] 這五個 Name 的值來做旋轉查詢，有時可能只要 [1001], [1003] 兩個 Name 的值，亦或是 Name 的值其實有十種，那寫 PIVOT 就會因為 <code>FOR Name IN ([1001], [1002], [1003], [1004], [1005])</code> 必須要指定需要的值，而有所限制，改動起來就些許麻煩</p><p>想必各位在寫後端就有常常利用後端程式碼來組 SQL 字串，現在筆者就是要利用組字串的方式，來讓 PIVOT 可以突破 FOR IN () 的限制</p><p>程式碼中宣告一個 @PivotSQL 放 SQL 字串，@ColumnGroup 則是需要旋轉的 Name 的值</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> #<span class="keyword">table</span> (</span><br><span class="line"><span class="keyword">No</span> <span class="type">INT</span> <span class="keyword">IDENTITY</span>(<span class="number">1</span>, <span class="number">1</span>) <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">Name <span class="type">VARCHAR</span>(<span class="number">10</span>),</span><br><span class="line"><span class="keyword">Value</span> <span class="type">VARCHAR</span>(<span class="number">10</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> #<span class="keyword">table</span> (Name, <span class="keyword">Value</span>)</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="string">'1001'</span>, <span class="string">'32'</span>), (<span class="string">'1002'</span>, <span class="string">'14'</span>), (<span class="string">'1003'</span>, <span class="string">'48.3'</span>), (<span class="string">'1004'</span>, <span class="string">'7'</span>), (<span class="string">'1005'</span>, <span class="string">'46'</span>)</span><br><span class="line">    </span><br><span class="line"><span class="comment">----------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">DECLARE</span> <span class="variable">@ColumnGroup</span> NVARCHAR(<span class="number">200</span>) <span class="operator">=</span> <span class="string">'[1001], [1002], [1003], [1006]'</span></span><br><span class="line"><span class="keyword">DECLARE</span> <span class="variable">@PivotSQL</span> NVARCHAR(MAX)</span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> <span class="variable">@PivotSQL</span> <span class="operator">=</span> N<span class="string">'</span></span><br><span class="line"><span class="string">SELECT  '</span> <span class="operator">+</span> <span class="variable">@ColumnGroup</span> <span class="operator">+</span> N<span class="string">' FROM (</span></span><br><span class="line"><span class="string">SELECT Name, Value</span></span><br><span class="line"><span class="string">FROM #table</span></span><br><span class="line"><span class="string">) AS SourceTable</span></span><br><span class="line"><span class="string">PIVOT</span></span><br><span class="line"><span class="string">(</span></span><br><span class="line"><span class="string">MAX(Value)</span></span><br><span class="line"><span class="string">FOR Name IN ( '</span> <span class="operator">+</span> <span class="variable">@ColumnGroup</span> <span class="operator">+</span> N<span class="string">')</span></span><br><span class="line"><span class="string">) AS PivotTable</span></span><br><span class="line"><span class="string">'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">EXEC</span> sp_executesql <span class="variable">@PivotSQL</span></span><br><span class="line"></span><br><span class="line"><span class="comment">----------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> #<span class="keyword">table</span></span><br></pre></td></tr></tbody></table></figure></div><p>[1006] 因為 Name 沒有這個值，會回 NULL 給你</p><p><a href="https://i.imgur.com/QvOaGfs.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/QvOaGfs.png" class="lazyload"></a></p><p>可以看到只要改變 @ColumnGroup，就能達到動態需求的旋轉結果，那麼就將這包寫成 SP 或是資料表值函式，用傳進參數的方式就 OK 了</p><h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>在這篇文中用到 #TempTable 暫存資料表、PIVOT 旋轉查詢結果 以及 EXEC sp_executesql 執行 SQL 字串，這些技巧再搭配上 SP 或是函數撰寫都是相當有幫助的</p><p>其實使用 PIVOT 的情境，筆者認為最大宗的應該是統計分析查詢，像是月報表，年報表之類的，用 SUM 或是 AVG 搭配 FOR IN ([月份])，來取得一年之中的每月總合或每月平均這種查詢</p></body></html>]]></content>
      
      
      <categories>
          
          <category> w3HexSchool </category>
          
          <category> T-SQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> w3HexSchool </tag>
            
            <tag> T-SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>learnyounode（Exercise 8 - HTTP 資料收集，Exercise 9 - 玩轉非同步）</title>
      <link href="/2020/05/24/2020-learnyounode-exercise-8-9/"/>
      <url>/2020/05/24/2020-learnyounode-exercise-8-9/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><p>Hi，大家好，今天要來解 Node.js 的練習題，題目來源為 <a href="https://nodeschool.io/zh-tw/">NODESCHOOL</a> 的 <a href="https://github.com/workshopper/learnyounode">learnyounode</a>，期望透過解題來了解更多關於 Node.js 的基礎應用知識</p><p>如果還不知道題目是怎麼得來的，或是想知道更詳細的 learnyounode 使用教學，可以到我這個系列的第一篇文章 <a href="https://littlehorseboy.github.io/2020/03/13/2020-learnyounode-exercise-1/">learnyounode (Exercise 1 of 13)</a> 看看</p><p>那麼就開始練習本次的題目吧！這次要解的是第八題的『HTTP 資料收集』以及第九題的『玩轉非同步』</p><blockquote><p><strong>TIP</strong></p><p>以下內容暴雷了題目的解答，如果是想要先自己嘗試思考並解開題目的人，請斟酌觀看</p></blockquote><hr><h2 id="挑戰-Exercise-8-『HTTP-資料收集』"><a href="#挑戰-Exercise-8-『HTTP-資料收集』" class="headerlink" title="挑戰 Exercise 8 - 『HTTP 資料收集』"></a>挑戰 Exercise 8 - 『HTTP 資料收集』</h2><blockquote><p><strong>Q：</strong><br>撰寫一個會對第一個參數所提供之 URL 發出 HTTP GET 請求（request）的程式<br>收集每個「data」事件回傳的字串內容，最後 console.log 出來<br>需求要 log 出兩行，一是<strong>字串的字數</strong>，二是<strong>完整字串內容</strong></p></blockquote><h3 id="劃重點"><a href="#劃重點" class="headerlink" title="劃重點"></a>劃重點</h3><p>循著提示來了解幾個重點</p><ul><li>第一個參數 process.argv[2] 是 url 網址，例如 <a href="http://google.com/">http://google.com</a> </li><li>使用 Node.js 內建核心模組的 http.get() 發出請求</li><li>callback 回傳的是 response 物件，它是一個 Node Stream 物件，可以對 Stream 掛上 data、error、end 事件來監聽以取得資料來進行處理</li><li>掛上 data 的監聽事件回傳的內容為 Buffer 物件，可以先將 Stream 物件 setEncoding(‘utf8’)，直接將回傳內容轉成 string</li><li>設置一個變數將 data 事件的回傳值 += 存入</li><li>在 end 事件做最終的 console.log 處理 </li></ul><h3 id="程式碼"><a href="#程式碼" class="headerlink" title="程式碼"></a>程式碼</h3><p>程式中引入 Node 核心模組 http，使用 http.get() 得到的回傳值為 Stream 物件，得再對 Stream 物件掛上 on(‘data’, (chunk) => { }) 進行處理，data 事件回傳值的是 Buffer 物件，也得要特別處理成字串</p><p>增加一個變數 result，接下 data 事件回傳的 chunk 內容，最後在 end 事件輸出</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* exercise8.js */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"></span><br><span class="line">http</span><br><span class="line">  .get(process.argv[<span class="number">2</span>], <span class="function">(<span class="params">res</span>) =></span> {</span><br><span class="line">    <span class="keyword">let</span> data = <span class="string">''</span>;</span><br><span class="line">    res.setEncoding(<span class="string">'utf8'</span>);</span><br><span class="line">    res.on(<span class="string">'data'</span>, <span class="function">(<span class="params">chunk</span>) =></span> {</span><br><span class="line">      data += chunk;</span><br><span class="line">    });</span><br><span class="line">    res.on(<span class="string">'end'</span>, <span class="function">() =></span> {</span><br><span class="line">      <span class="built_in">console</span>.log(data.length);</span><br><span class="line">      <span class="built_in">console</span>.log(data);</span><br><span class="line">    });</span><br><span class="line">    res.on(<span class="string">'error'</span>, <span class="function">(<span class="params">err</span>) =></span> {</span><br><span class="line">      <span class="built_in">console</span>.error(err);</span><br><span class="line">    });</span><br><span class="line">  })</span><br><span class="line">  .on(<span class="string">'error'</span>, <span class="built_in">console</span>.error);</span><br></pre></td></tr></tbody></table></figure></div><p>手動輸入指令來看看執行情況，網址是故意打錯的，剛好得到回傳內容不會太多，不然截圖截不下 XD</p><p><a href="https://i.imgur.com/nSYDR7y.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/nSYDR7y.png" class="lazyload"></a></p><p>這樣就可以執行 <code>learnyounode verify exercise8.js</code> 來通過測驗了</p><hr><h2 id="挑戰-Exercise-9-『玩轉非同步』"><a href="#挑戰-Exercise-9-『玩轉非同步』" class="headerlink" title="挑戰 Exercise 9 - 『玩轉非同步』"></a>挑戰 Exercise 9 - 『玩轉非同步』</h2><blockquote><p><strong>Q：</strong><br>與前一題類似，但會有三個命令列參數取得 URL 來發出 HTTP GET 請求（request），完整收集三個網址的內容後才輸出，必須按照參數的 URL 順序來顯示對應的內容</p></blockquote><h3 id="劃重點-1"><a href="#劃重點-1" class="headerlink" title="劃重點"></a>劃重點</h3><p>循著提示來了解幾個重點</p><ul><li>http.get() 在非同步處理完畢後是觸發 end 事件</li><li>要在三個 http.get() 的 end 非同步事件回傳後進行輸出</li></ul><h3 id="程式碼-1"><a href="#程式碼-1" class="headerlink" title="程式碼"></a>程式碼</h3><p>定義一個接受 url 參數而後回傳 Promise 的 function，function 內使用 http.get()，在 end 事件用 resolve 回傳 result</p><p>這是有三個 url 參數，就執行三次剛剛定義的 function，傳入不同 url，得到各自不同 get 目標的 Promise</p><p>最後用 Promise.all 將有各自不同目標的 Promise 包成陣列來執行，就能得到非同步回傳且會照順序排列的結果</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* exercise9.js */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">asyncGet</span>(<span class="params">url</span>) </span>{</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =></span> {</span><br><span class="line">    http</span><br><span class="line">      .get(url, <span class="function">(<span class="params">res</span>) =></span> {</span><br><span class="line">        <span class="keyword">let</span> result = <span class="string">''</span>;</span><br><span class="line">        res.setEncoding(<span class="string">'utf8'</span>);</span><br><span class="line">        res.on(<span class="string">'data'</span>, <span class="function">(<span class="params">chunk</span>) =></span> {</span><br><span class="line">          result += chunk;</span><br><span class="line">        });</span><br><span class="line">        res.on(<span class="string">'end'</span>, <span class="function">() =></span> {</span><br><span class="line">          resolve(result);</span><br><span class="line">        });</span><br><span class="line">        res.on(<span class="string">'error'</span>, <span class="function">(<span class="params">err</span>) =></span> {</span><br><span class="line">          reject(err);</span><br><span class="line">        });</span><br><span class="line">      })</span><br><span class="line">      .on(<span class="string">'error'</span>, reject);</span><br><span class="line">  });</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.all([</span><br><span class="line">  asyncGet(process.argv[<span class="number">2</span>]),</span><br><span class="line">  asyncGet(process.argv[<span class="number">3</span>]),</span><br><span class="line">  asyncGet(process.argv[<span class="number">4</span>]),</span><br><span class="line">])</span><br><span class="line">  .then(<span class="function">(<span class="params">values</span>) =></span> {</span><br><span class="line">    values.forEach(<span class="function">(<span class="params">value</span>) =></span> {</span><br><span class="line">      <span class="built_in">console</span>.log(value);</span><br><span class="line">    });</span><br><span class="line">  })</span><br><span class="line">  .catch(<span class="function">(<span class="params">error</span>) =></span> {</span><br><span class="line">    <span class="built_in">console</span>.error(error);</span><br><span class="line">  });</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></div><p>手動輸入指令來看看執行情況</p><p><a href="https://i.imgur.com/qrwA2om.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/qrwA2om.png" class="lazyload"></a></p><p>這樣就可以執行 <code>learnyounode verify exercise9.js</code> 來通過測驗了</p><h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>本篇所挑戰的第八題，主要是寫後端發送 request 請求的應用，要處理 Stream 物件還要處理 Buffer 物件，算是更加理解一般使用 Node.js 核心模組的操作細節，如果直接使用框架，如 express.js，可能就會少一點點處理這些細節的過程，當然未來勢必要用更加省事的方式，不過在了解更多 Node.js 基底就有機會在踩雷時有更多的觀念可以解決發生的問題</p><p>第九題則是處理多筆非同步 function 回傳的技巧，筆者自己是習慣用 Promise.all 來處理，如果要額外裝好用的函式庫處理非同步，RxJS 是個不錯的選擇</p></body></html>]]></content>
      
      
      <categories>
          
          <category> w3HexSchool </category>
          
          <category> node.js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> w3HexSchool </tag>
            
            <tag> node.js </tag>
            
            <tag> learnyounode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>E2E Testing（jest + puppeteer 環境設置）</title>
      <link href="/2020/05/17/2020-puppeteer-jest-first/"/>
      <url>/2020/05/17/2020-puppeteer-jest-first/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><p>Hi，大家好，最近想要用爬蟲來做一些重複的網頁操作動作，預期要做的動作是進入網頁，輸入帳密登入，然後操作表單，最後送出表單</p><p>本篇是接續著前一篇 <a href="https://littlehorseboy.github.io/2020/05/10/2020-puppeteer-beginner/">Puppeteer，簡單易用的 Node.js 爬蟲</a>，裡面安裝了 Puppeteer，撰寫小小的腳本，來讓爬蟲自動操作了 Google 搜尋首頁，打字到 input 裡，並按下 Enter 鍵，完成搜尋的動作</p><p>那怎麼會講到 E2E Testing 呢？筆者是認為 E2E Testing 實際上就是 <code>爬蟲 + 測試函式庫</code> 的組合技，那既然都要玩爬蟲，那乾脆就把測試函式庫也 + 上去吧！正好最近也在一點一點的琢磨測試的技能，想必遲早會用得上</p><p>這篇文主要是敘述將 <code>Jest</code> + <code>Puppeteer</code> + <code>TypeScript</code> 的專案環境建置起來</p><hr><h2 id="首先是建立一個-TypeScript-的-Node-js-專案配置"><a href="#首先是建立一個-TypeScript-的-Node-js-專案配置" class="headerlink" title="首先是建立一個 TypeScript 的 Node.js 專案配置"></a>首先是建立一個 TypeScript 的 Node.js 專案配置</h2><p>如果想要一個有 ESLint + Jest + TypeScript 的 Node.js 配置，剛好最近發現，可以參考 <a href="https://nestjs.com/">NestJS</a> 的專案配置，NestJS 就是一個用 TypeScript 組織架構起來的 Node.js 後端框架，所以就裝了 @nestjs/cli 來創一個專案，然後開始抄走配置 XD，去蕪存菁留下需要的（其實是只留下能理解的，還有超多不懂得怎麼用 XD）</p><h3 id="專案配置設定的參考來源"><a href="#專案配置設定的參考來源" class="headerlink" title="專案配置設定的參考來源"></a>專案配置設定的參考來源</h3><ol><li><p>@nestjs/cli 安裝後使用指令 <code>nest new [project-name]</code> 產生的專案架構</p><p><a href="https://i.imgur.com/gy72yxB.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/gy72yxB.png" class="lazyload"></a></p></li><li><p>@nestjs/schematics，從 cli 新建專案裡的 package.json 挖到的配置</p><p><a href="https://github.com/nestjs/schematics">https://github.com/nestjs/schematics</a></p></li><li><p><a href="https://jestjs.io/docs/en/puppeteer">Jest 官方說明</a></p><p>Jest 官方中有使用 Jest + Puppeteer 的說明，這也是我會選擇使用 Puppeteer 的原因，第一段說明要安裝 jest-puppeteer，不過因為有 TypeScript 相關的設定需求，還得進到 Jest Puppeteer 的 github 看 README.md 才有</p><p><a href="https://github.com/smooth-code/jest-puppeteer">https://github.com/smooth-code/jest-puppeteer</a></p></li></ol><h3 id="最後在專案中裝的所有東西"><a href="#最後在專案中裝的所有東西" class="headerlink" title="最後在專案中裝的所有東西"></a>最後在專案中裝的所有東西</h3><table><thead><tr><th>Node Package</th><th>說明</th></tr></thead><tbody><tr><td>@types/jest</td><td>（TypeScript 類型定義檔） 斷言函式庫 <a href="https://github.com/facebook/jest">jest</a></td></tr><tr><td>@types/expect-puppeteer</td><td>（TypeScript 類型定義檔） 專為 Puppeteer 測試而設計的斷言函式庫 <a href="https://github.com/smooth-code/jest-puppeteer/tree/master/packages/expect-puppeteer">expect-puppeteer</a></td></tr><tr><td>@types/jest-environment-puppeteer</td><td>（TypeScript 類型定義檔） 整合 Jest + Puppeteer <a href="https://github.com/smooth-code/jest-puppeteer/tree/master/packages/jest-environment-puppeteer">jest-environment-puppeteer</a>，可以直接 global 取用 Puppeteer 提供的屬性，例如 browser、page 等等</td></tr><tr><td>@types/node</td><td>（TypeScript 類型定義檔） Node.js 核心模組定義</td></tr><tr><td>@types/puppeteer</td><td>（TypeScript 類型定義檔） Puppeteer API 定義</td></tr><tr><td>@typescript-eslint/eslint-plugin</td><td>搭配 @typescript-eslint/parser，用於 ESLint 的 TypeScript 規則集</td></tr><tr><td>@typescript-eslint/parser</td><td>ESLint 解析器</td></tr><tr><td>eslint</td><td>靜態代碼分析工具</td></tr><tr><td>eslint-plugin-import</td><td>ESLint 標配的規則集</td></tr><tr><td>jest</td><td>JavaScript 測試框架</td></tr><tr><td>jest-puppeteer</td><td>Jest + Puppeteer</td></tr><tr><td><a href="mailto:puppeteer@1.20.0">puppeteer@1.20.0</a></td><td>簡單易用的 Node.js 爬蟲</td></tr><tr><td>ts-jest</td><td>讓 Jest 能夠執行 TypeScript 的 .ts 檔案</td></tr><tr><td>typescript</td><td>JavaScript 嚴格超集</td></tr></tbody></table><h3 id="npm-i-安裝一堆"><a href="#npm-i-安裝一堆" class="headerlink" title="npm i 安裝一堆"></a>npm i 安裝一堆</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -D @types/jest @types/expect-puppeteer @types/jest-environment-puppeteer @types/node</span><br></pre></td></tr></tbody></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -D @types/puppeteer @typescript-eslint/eslint-plugin @typescript-eslint/parser</span><br></pre></td></tr></tbody></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -D eslint eslint-plugin-import jest jest-puppeteer</span><br></pre></td></tr></tbody></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -D puppeteer@1.20.0 ts-jest typescript</span><br></pre></td></tr></tbody></table></figure></div><h3 id="為什麼是指定安裝-x70-117-x70-112-101-116-101-x65-114-64-x31-x2e-50-x30-46-x30-呢？"><a href="#為什麼是指定安裝-x70-117-x70-112-101-116-101-x65-114-64-x31-x2e-50-x30-46-x30-呢？" class="headerlink" title="為什麼是指定安裝 puppeteer@1.20.0 呢？"></a>為什麼是指定安裝 <a href="mailto:puppeteer@1.20.0">puppeteer@1.20.0</a> 呢？</h3><p>撰寫這篇文時，能安裝的到 Puppeteer 最新版本是 3.0.4 版，但是筆者剛好發現有些電腦在安裝後無法正常啟動 chromium，以及搭配 jest-puppeteer 的時候，會發生測試總是 fail 的奇怪情況，兩種情況都在直接降版後解決 XD，如果有讀者知道為什麼會發生這種怪事，就要靠你分享一下啦~</p><h3 id="安裝了所有需要的套件之後"><a href="#安裝了所有需要的套件之後" class="headerlink" title="安裝了所有需要的套件之後"></a>安裝了所有需要的套件之後</h3><p>部分套件要配置相應的設定檔</p><ol><li>.eslintrc.js</li><li>.gitignore</li><li>jest.config.js</li><li>tsconfig.json</li></ol><p>就這四個，參考著更上面 ↑ 寫到的專案配置設定的參考來源，來撰寫設定檔，大多是整個抄，有些綜合起來，有些微微照喜好調整</p><h4 id="eslintrc-js"><a href="#eslintrc-js" class="headerlink" title=".eslintrc.js"></a>.eslintrc.js</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// .eslintrc.js</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = {</span><br><span class="line">  <span class="attr">parser</span>: <span class="string">'@typescript-eslint/parser'</span>,</span><br><span class="line">  <span class="attr">parserOptions</span>: {</span><br><span class="line">    <span class="attr">sourceType</span>: <span class="string">'module'</span>,</span><br><span class="line">  },</span><br><span class="line">  <span class="attr">plugins</span>: [<span class="string">'@typescript-eslint/eslint-plugin'</span>],</span><br><span class="line">  <span class="attr">extends</span>: [</span><br><span class="line">    <span class="string">'eslint:recommended'</span>,</span><br><span class="line">    <span class="string">'plugin:@typescript-eslint/eslint-recommended'</span>,</span><br><span class="line">    <span class="string">'plugin:@typescript-eslint/recommended'</span>,</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">root</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">env</span>: {</span><br><span class="line">    <span class="attr">node</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">jest</span>: <span class="literal">true</span>,</span><br><span class="line">  },</span><br><span class="line">  <span class="attr">rules</span>: {</span><br><span class="line">    <span class="string">'@typescript-eslint/interface-name-prefix'</span>: <span class="string">'off'</span>,</span><br><span class="line">  },</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure></div><h4 id="gitignore"><a href="#gitignore" class="headerlink" title=".gitignore"></a>.gitignore</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">// .gitignore</span><br><span class="line"></span><br><span class="line"><span class="comment"># compiled output</span></span><br><span class="line">/dist</span><br><span class="line">/node_modules</span><br><span class="line"></span><br><span class="line"><span class="comment"># Logs</span></span><br><span class="line">logs</span><br><span class="line">*.<span class="built_in">log</span></span><br><span class="line">npm-debug.log*</span><br><span class="line">yarn-debug.log*</span><br><span class="line">yarn-error.log*</span><br><span class="line">lerna-debug.log*</span><br><span class="line"></span><br><span class="line"><span class="comment"># OS</span></span><br><span class="line">.DS_Store</span><br><span class="line"></span><br><span class="line"><span class="comment"># Tests</span></span><br><span class="line">/coverage</span><br><span class="line">/.nyc_output</span><br><span class="line"></span><br><span class="line"><span class="comment"># IDEs and editors</span></span><br><span class="line">/.idea</span><br><span class="line">.project</span><br><span class="line">.classpath</span><br><span class="line">.c9/</span><br><span class="line">*.launch</span><br><span class="line">.settings/</span><br><span class="line">*.sublime-workspace</span><br><span class="line"></span><br><span class="line"><span class="comment"># IDE - VSCode</span></span><br><span class="line">.vscode/*</span><br><span class="line">!.vscode/settings.json</span><br><span class="line">!.vscode/tasks.json</span><br><span class="line">!.vscode/launch.json</span><br><span class="line">!.vscode/extensions.json</span><br></pre></td></tr></tbody></table></figure></div><h4 id="jest-config-js"><a href="#jest-config-js" class="headerlink" title="jest.config.js"></a>jest.config.js</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jest.config.js</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = {</span><br><span class="line">  <span class="attr">moduleFileExtensions</span>: [</span><br><span class="line">    <span class="string">'js'</span>,</span><br><span class="line">    <span class="string">'json'</span>,</span><br><span class="line">    <span class="string">'ts'</span>,</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">rootDir</span>: <span class="string">'./src'</span>,</span><br><span class="line">  <span class="attr">testEnvironment</span>: <span class="string">'node'</span>,</span><br><span class="line">  <span class="attr">transform</span>: {</span><br><span class="line">    <span class="string">'^.+\\.(t|j)s$'</span>: <span class="string">'ts-jest'</span>,</span><br><span class="line">  },</span><br><span class="line">  <span class="attr">testRegex</span>: [<span class="string">'.(test|spec).ts$'</span>],</span><br><span class="line">  <span class="attr">coverageDirectory</span>: <span class="string">'../coverage'</span>,</span><br><span class="line">  <span class="attr">verbose</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">bail</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">testPathIgnorePatterns</span>: [</span><br><span class="line">    <span class="string">'./node_modules/'</span>,</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">preset</span>: <span class="string">'jest-puppeteer'</span>,</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure></div><h4 id="tsconfig-json"><a href="#tsconfig-json" class="headerlink" title="tsconfig.json"></a>tsconfig.json</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">json</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// tsconfig.json</span></span><br><span class="line"></span><br><span class="line">{</span><br><span class="line">  <span class="attr">"compilerOptions"</span>: {</span><br><span class="line">    <span class="attr">"module"</span>: <span class="string">"commonjs"</span>,</span><br><span class="line">    <span class="attr">"declaration"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"removeComments"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"emitDecoratorMetadata"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"experimentalDecorators"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"target"</span>: <span class="string">"es2017"</span>,</span><br><span class="line">    <span class="attr">"sourceMap"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"outDir"</span>: <span class="string">"./dist"</span>,</span><br><span class="line">    <span class="attr">"baseUrl"</span>: <span class="string">"./"</span>,</span><br><span class="line">    <span class="attr">"incremental"</span>: <span class="literal">true</span></span><br><span class="line">  },</span><br><span class="line">  <span class="attr">"exclude"</span>: [<span class="string">"node_modules"</span>, <span class="string">"dist"</span>]</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>還要將 package.json 的 scripts 改一下</p><p><a href="https://i.imgur.com/7ZQvnFm.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/7ZQvnFm.png" class="lazyload"></a></p><p>之後就用 <code>npm run test</code> 來執行測試</p><p>那目前，專案的整個環境配置都已經 OK 了</p><p><a href="https://i.imgur.com/I8OY98F.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/I8OY98F.png" class="lazyload"></a></p><h2 id="是時候要撰寫爬蟲-測試的程式碼了"><a href="#是時候要撰寫爬蟲-測試的程式碼了" class="headerlink" title="是時候要撰寫爬蟲 + 測試的程式碼了"></a>是時候要撰寫爬蟲 + 測試的程式碼了</h2><p>這次還是要利用 Google 搜尋來展示爬蟲，但不同的是這次有測試的功能</p><p>動作是要在 Google 進行關鍵字搜尋 ‘horse’，然後檢查是不是有得到預期的查詢結果</p><p>新增一個 src/google.spec.ts</p><p>以下就直接貼上程式碼</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">typescript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight typescript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// google.spec.ts</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> { launch, Browser, Page } <span class="keyword">from</span> <span class="string">'puppeteer'</span>;</span><br><span class="line"></span><br><span class="line">describe(<span class="string">'Google 首頁進行搜尋 horse'</span>, <span class="function">() =></span> {</span><br><span class="line">  <span class="keyword">let</span> browser: Browser;</span><br><span class="line">  <span class="keyword">let</span> page: Page;</span><br><span class="line"></span><br><span class="line">  beforeAll(<span class="keyword">async</span> () => {</span><br><span class="line">    browser = <span class="keyword">await</span> launch({</span><br><span class="line">      <span class="attr">headless</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="attr">slowMo</span>: <span class="number">100</span>,</span><br><span class="line">    });</span><br><span class="line">    page = <span class="keyword">await</span> browser.newPage();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">await</span> page.goto(<span class="string">'https://google.com'</span>);</span><br><span class="line">  });</span><br><span class="line"></span><br><span class="line">  afterAll(<span class="keyword">async</span> () => {</span><br><span class="line">    <span class="keyword">await</span> browser.close();</span><br><span class="line">  });</span><br><span class="line"></span><br><span class="line">  test(<span class="string">'搜尋欄位輸入 "horse"，然後測試有沒有成功輸入'</span>, <span class="keyword">async</span> () => {</span><br><span class="line">    <span class="keyword">const</span> input = <span class="keyword">await</span> page.$(<span class="string">'#tsf > div:nth-child(2) > div.A8SBwf > div.RNNXgb > div > div.a4bIc > input'</span>);</span><br><span class="line">    <span class="keyword">await</span> input?.type(<span class="string">'horse'</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> titleValue = <span class="keyword">await</span> page.evaluate(<span class="function">(<span class="params">el: HTMLInputElement</span>) =></span> el.value, input);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">await</span> expect(titleValue).toBe(<span class="string">'horse'</span>);</span><br><span class="line">  });</span><br><span class="line"></span><br><span class="line">  test(<span class="string">'成功輸入後，按下 enter，到搜尋結果的頁面，測試看看有沒有翻譯出 "馬"'</span>, <span class="keyword">async</span> () => {</span><br><span class="line">    <span class="keyword">await</span> page.keyboard.press(<span class="string">'Enter'</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">await</span> page.waitForNavigation();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> span = <span class="keyword">await</span> page.$(<span class="string">'#tw-target-text > span'</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> spanText = <span class="keyword">await</span> page.evaluate(<span class="function">(<span class="params">el: HTMLSpanElement</span>) =></span> el.textContent, span);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">await</span> expect(spanText).toBe(<span class="string">'馬'</span>);</span><br><span class="line">  });</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure></div><p>這段是可以通過測試的喔</p><p><a href="https://i.imgur.com/YDdMNS9.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/YDdMNS9.png" class="lazyload"></a></p><h2 id="附上原始碼"><a href="#附上原始碼" class="headerlink" title="附上原始碼"></a>附上原始碼</h2><p><a href="https://github.com/littlehorseboy/puppeteer-jest">https://github.com/littlehorseboy/puppeteer-jest</a></p><h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>在這篇文主要能了解的是 <code>Jest</code> + <code>Puppeteer</code> + <code>TypeScript</code> 的 Node.js 專案環境配置</p><p>寫的比預想的還要長，只是配置個專案 XD，不過目前離達成目標越來越近了，目標就是要省下重複的網頁操作動作</p></body></html>]]></content>
      
      
      <categories>
          
          <category> w3HexSchool </category>
          
          <category> Puppeteer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> w3HexSchool </tag>
            
            <tag> Puppeteer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Puppeteer，簡單易用的 Node.js 爬蟲</title>
      <link href="/2020/05/10/2020-puppeteer-beginner/"/>
      <url>/2020/05/10/2020-puppeteer-beginner/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><p>Hi，大家好，最近想要用爬蟲來做一些重複的網頁操作動作，所以就來玩玩看 Google 的 <a href="https://pptr.dev/">Puppeteer</a>，預期要做的動作是進入網頁，輸入帳密登入，然後操作表單，最後送出表單</p><hr><h2 id="Puppeteer"><a href="#Puppeteer" class="headerlink" title="Puppeteer"></a><a href="https://pptr.dev/">Puppeteer</a></h2><p>Puppeteer 是 Google 出的 Node.js 爬蟲，用來操作 Chrome 或是 Chromium，Firefox 也有，不過<a href="https://github.com/puppeteer/puppeteer/tree/master/experimental/puppeteer-firefox">依官方說法應該是不太推</a></p><h3 id="建立一個-puppeteer-專案"><a href="#建立一個-puppeteer-專案" class="headerlink" title="建立一個 puppeteer 專案"></a>建立一個 puppeteer 專案</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm i -D puppeteer</span><br></pre></td></tr></tbody></table></figure></div><p>下載過程中，他會順便幫你下載 Chromium 到 node_modules\puppeteer 底下，然後就可以開一隻 js 檔，直接撰寫爬蟲的腳本了</p><h3 id="爬蟲腳本"><a href="#爬蟲腳本" class="headerlink" title="爬蟲腳本"></a>爬蟲腳本</h3><p>筆者在根目錄建立一個 google.js，裡面要引用 puppeteer 來實作輸入 input，而後按下鍵盤 Enter 的動作</p><p>示範的網頁就是 Google 的搜尋首頁啦～</p><p><a href="https://google.com/">https://google.com/</a></p><p><a href="https://i.imgur.com/UBH71Si.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/UBH71Si.png" class="lazyload"></a></p><p>這邊我們要先取得用來輸入搜尋關鍵字的 input 的 selector 語法</p><p><a href="https://i.imgur.com/mZQh255.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/mZQh255.png" class="lazyload"></a></p><h3 id="取得-selector-語法的小技巧"><a href="#取得-selector-語法的小技巧" class="headerlink" title="取得 selector 語法的小技巧"></a>取得 selector 語法的小技巧</h3><p>因為要取得 HTML 元素，要先能夠挖出他 HTML 的層級關係或是 id、class 來拼出 selector 語法，不過其實 DevTools 有很方便的功能，大多數的瀏覽器都有這功能</p><h4 id="滑鼠右鍵-gt-檢查"><a href="#滑鼠右鍵-gt-檢查" class="headerlink" title="滑鼠右鍵 -> 檢查"></a>滑鼠右鍵 -> 檢查</h4><p><a href="https://i.imgur.com/sY0L6XA.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/sY0L6XA.png" class="lazyload"></a></p><h4 id="滑鼠右鍵-gt-Copy-gt-Copy-selector"><a href="#滑鼠右鍵-gt-Copy-gt-Copy-selector" class="headerlink" title="滑鼠右鍵 -> Copy -> Copy selector"></a>滑鼠右鍵 -> Copy -> Copy selector</h4><p><a href="https://i.imgur.com/w0va8vU.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/w0va8vU.png" class="lazyload"></a></p><p>就 copy 了 selector 的字串，直接在程式碼中貼上使用即可</p><h3 id="回到-google-js-進行撰寫"><a href="#回到-google-js-進行撰寫" class="headerlink" title="回到 google.js 進行撰寫"></a>回到 google.js 進行撰寫</h3><p>以下就是完整的腳本</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> puppeteer = <span class="built_in">require</span>(<span class="string">'puppeteer'</span>);</span><br><span class="line"></span><br><span class="line">(<span class="keyword">async</span> () => {</span><br><span class="line">  <span class="keyword">const</span> browser = <span class="keyword">await</span> puppeteer.launch({</span><br><span class="line">    <span class="attr">headless</span>: <span class="literal">false</span>, <span class="comment">// 不使用 headless 模式，就會開啟瀏覽器來實際動作</span></span><br><span class="line">    <span class="attr">slowMo</span>: <span class="number">150</span>, <span class="comment">// 每個動作的間隔時間，方便觀察實際動作</span></span><br><span class="line">  });</span><br><span class="line">  <span class="keyword">const</span> page = <span class="keyword">await</span> browser.newPage(); <span class="comment">// 開啟新分頁</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">await</span> page.goto(<span class="string">'https://google.com'</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> input = <span class="keyword">await</span> page.$(<span class="string">'#tsf > div:nth-child(2) > div.A8SBwf > div.RNNXgb > div > div.a4bIc > input'</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (input) {</span><br><span class="line">    <span class="keyword">await</span> input.focus();</span><br><span class="line">    <span class="keyword">await</span> input.type(<span class="string">'horse'</span>);</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="keyword">await</span> page.keyboard.press(<span class="string">'Escape'</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">await</span> page.keyboard.press(<span class="string">'Enter'</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// browser.close();</span></span><br><span class="line">})();</span><br></pre></td></tr></tbody></table></figure></div><h3 id="用-node-指令執行腳本"><a href="#用-node-指令執行腳本" class="headerlink" title="用 node 指令執行腳本"></a>用 node 指令執行腳本</h3><p>直接輸入 node google.js 就可以看到成果啦！～</p><p><a href="https://i.imgur.com/LhJp7l3.gif" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/LhJp7l3.gif" class="lazyload"></a></p><h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>是不是很簡單呢？如果有一些要用網頁操作的重複動作或大量的動作，就能寫好腳本，輕鬆執行啦～，除了本篇文中用到的表單動作、鍵盤輸入以外，Puppeteer 還有提供易用的網頁截圖功能、擷取成 PDF 的功能，另外就是你可能想得到的，到不同網站撈取大量資料或是圖片？</p><p>打算在之後要用 Puppeteer 來實作 E2E Testing，筆者是認為，E2E Testing 實際上就是 <code>爬蟲 + 測試函式庫</code> 的組合技，所以…敬請期待囉～ XD</p></body></html>]]></content>
      
      
      <categories>
          
          <category> w3HexSchool </category>
          
          <category> Puppeteer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> w3HexSchool </tag>
            
            <tag> Puppeteer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Angular Testing（Part 4）- Service Test</title>
      <link href="/2020/05/03/2020-angular-testing-part-4/"/>
      <url>/2020/05/03/2020-angular-testing-part-4/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><p>Hi，大家好，我的前一篇文章簡單的敘述了 Angular 的 Service 服務，並且 <code>ng generate service Value</code> 來產生一個 value.service.ts，並為它加上了一些 method，有同步的，非同步的 Observable 以及 Promise 共三種來進行測試，今天會延續上一次的程式來了解有依賴的 service，以及將依賴給隔離所使用到的 spy 技巧</p><hr><h2 id="ng-generate-service"><a href="#ng-generate-service" class="headerlink" title="ng generate service"></a>ng generate service</h2><p>再新建一個 service！直接在終端機輸入 <code>ng generate service Master</code>，要利用它來實作依賴其他服務的測試</p><p><a href="https://i.imgur.com/cpM3iwP.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/cpM3iwP.png" class="lazyload"></a></p><h2 id="將-ValueService-注入-MasterService"><a href="#將-ValueService-注入-MasterService" class="headerlink" title="將 ValueService 注入 MasterService"></a>將 ValueService 注入 MasterService</h2><p><a href="https://i.imgur.com/S9F5kv1.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/S9F5kv1.png" class="lazyload"></a></p><h2 id="使用依賴的服務來撰寫-method-並設置值到-this-realValue"><a href="#使用依賴的服務來撰寫-method-並設置值到-this-realValue" class="headerlink" title="使用依賴的服務來撰寫 method 並設置值到 this.realValue"></a>使用依賴的服務來撰寫 method 並設置值到 this.realValue</h2><p>回顧一下 ValueService 的 getValue()，回傳 <code>'real value'</code></p><p><a href="https://i.imgur.com/yXKIYU4.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/yXKIYU4.png" class="lazyload"></a></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">typescript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight typescript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// master.service.ts</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Injectable</span>({</span><br><span class="line">  <span class="attr">providedIn</span>: <span class="string">'root'</span></span><br><span class="line">})</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">MasterService</span> </span>{</span><br><span class="line">  <span class="keyword">public</span> realValue = <span class="string">''</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="keyword">private</span> valueService: ValueService,</span></span></span><br><span class="line"><span class="params"><span class="function">  </span>)</span> { }</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="title">setValue</span>(<span class="params"></span>)</span> {</span><br><span class="line">    <span class="built_in">this</span>.realValue = <span class="built_in">this</span>.valueService.getValue();</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><h2 id="測試-MasterService-執行-setValue-後是否成功設置"><a href="#測試-MasterService-執行-setValue-後是否成功設置" class="headerlink" title="測試 MasterService 執行 setValue 後是否成功設置"></a>測試 MasterService 執行 setValue 後是否成功設置</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">typescript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight typescript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// master.service.spec.ts</span></span><br><span class="line"></span><br><span class="line">describe(<span class="string">'MasterService'</span>, <span class="function">() =></span> {</span><br><span class="line">  <span class="keyword">let</span> service: MasterService;</span><br><span class="line"></span><br><span class="line">  beforeEach(<span class="function">() =></span> {</span><br><span class="line">    TestBed.configureTestingModule({});</span><br><span class="line">    service = TestBed.inject(MasterService);</span><br><span class="line">  });</span><br><span class="line"></span><br><span class="line">  it(<span class="string">'setValue 後 this.value 是否有正常得到值'</span>, <span class="function">() =></span> {</span><br><span class="line">    service.setValue();</span><br><span class="line">    expect(service.realValue).toBe(<span class="string">'real value'</span>);</span><br><span class="line">  });</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure></div><h3 id="執行結果"><a href="#執行結果" class="headerlink" title="執行結果"></a>執行結果</h3><p><a href="https://i.imgur.com/hbAnXQL.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/hbAnXQL.png" class="lazyload"></a></p><p>還沒用到非同步的情境就可以很單純的直接判斷影響的變數</p><hr><h2 id="訂閱依賴的服務中的-getObservableValue-來設置值到-this-observableValue"><a href="#訂閱依賴的服務中的-getObservableValue-來設置值到-this-observableValue" class="headerlink" title="訂閱依賴的服務中的 getObservableValue() 來設置值到 this.observableValue"></a>訂閱依賴的服務中的 getObservableValue() 來設置值到 this.observableValue</h2><p>回顧一下 ValueService 的 getObservableValue()，用了 setTimeout 也就是固定在一秒之後會回傳結果</p><p><a href="https://i.imgur.com/R7DSqim.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/R7DSqim.png" class="lazyload"></a></p><p>在 MasterService 撰寫 setObservableValue() 訂閱它並設置到 this.observableValue</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">typescript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight typescript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// master.service.ts</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Injectable</span>({</span><br><span class="line">  <span class="attr">providedIn</span>: <span class="string">'root'</span></span><br><span class="line">})</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">MasterService</span> </span>{</span><br><span class="line">  <span class="keyword">public</span> realValue = <span class="string">''</span>;</span><br><span class="line">  <span class="keyword">public</span> observableValue = <span class="string">''</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="keyword">private</span> valueService: ValueService,</span></span></span><br><span class="line"><span class="params"><span class="function">  </span>)</span> { }</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="title">setValue</span>(<span class="params"></span>)</span> {</span><br><span class="line">    <span class="built_in">this</span>.realValue = <span class="built_in">this</span>.valueService.getValue();</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> setObservableValue(): <span class="built_in">void</span> {</span><br><span class="line">    <span class="built_in">this</span>.valueService.getObservableValue()</span><br><span class="line">      .subscribe(</span><br><span class="line">        <span class="function">(<span class="params">value</span>) =></span> <span class="built_in">this</span>.observableValue = value,</span><br><span class="line">      );</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><h2 id="測試-MasterService-執行-setObservableValue-後是否成功設置"><a href="#測試-MasterService-執行-setObservableValue-後是否成功設置" class="headerlink" title="測試 MasterService 執行 setObservableValue 後是否成功設置"></a>測試 MasterService 執行 setObservableValue 後是否成功設置</h2><h3 id="錯誤的方式，無法正常的取得值"><a href="#錯誤的方式，無法正常的取得值" class="headerlink" title="錯誤的方式，無法正常的取得值"></a>錯誤的方式，無法正常的取得值</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">typescript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight typescript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">'setObservableValue 後 this.observableValue 是否有正常得到值'</span>, <span class="function">() =></span> {</span><br><span class="line">  service.setObservableValue();</span><br><span class="line">  expect(service.observableValue).toBe(<span class="string">'observable value'</span>);</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure></div><h3 id="執行結果-1"><a href="#執行結果-1" class="headerlink" title="執行結果"></a>執行結果</h3><p><a href="https://i.imgur.com/bskQKET.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/bskQKET.png" class="lazyload"></a></p><p>它建議你使用 fakeAsync 來處理這個測試，因為有用到 setTimeout 一秒，所以在調用 setObservableValue() 後，使用 <code>tick(1000)</code> 來暫緩測試的進行一秒鐘，就能測試成功</p><h2 id="使用-fakeAsync-tick"><a href="#使用-fakeAsync-tick" class="headerlink" title="使用 fakeAsync() + tick()"></a>使用 fakeAsync() + tick()</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">typescript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight typescript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// master.service.spec.ts</span></span><br><span class="line"></span><br><span class="line">describe(<span class="string">'MasterService'</span>, <span class="function">() =></span> {</span><br><span class="line">  <span class="keyword">let</span> service: MasterService;</span><br><span class="line"></span><br><span class="line">  beforeEach(<span class="function">() =></span> {</span><br><span class="line">    TestBed.configureTestingModule({});</span><br><span class="line">    service = TestBed.inject(MasterService);</span><br><span class="line">  });</span><br><span class="line"></span><br><span class="line">  it(<span class="string">'setValue 後 this.value 是否有正常得到值'</span>, <span class="function">() =></span> {</span><br><span class="line">    service.setValue();</span><br><span class="line">    expect(service.realValue).toBe(<span class="string">'real value'</span>);</span><br><span class="line">  });</span><br><span class="line"></span><br><span class="line">  it(<span class="string">'setObservableValue 後 this.observableValue 是否有正常得到值'</span>, fakeAsync(<span class="function">() =></span> {</span><br><span class="line">    service.setObservableValue();</span><br><span class="line">    tick(<span class="number">1000</span>);</span><br><span class="line">    expect(service.observableValue).toBe(<span class="string">'observable value'</span>);</span><br><span class="line">  }));</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure></div><h3 id="執行結果-2"><a href="#執行結果-2" class="headerlink" title="執行結果"></a>執行結果</h3><p><a href="https://i.imgur.com/OxlHR02.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/OxlHR02.png" class="lazyload"></a></p><h2 id="call-依賴的服務中的-setPromiseValue-來設置值到-this-promiseValue"><a href="#call-依賴的服務中的-setPromiseValue-來設置值到-this-promiseValue" class="headerlink" title="call 依賴的服務中的 setPromiseValue() 來設置值到 this.promiseValue"></a>call 依賴的服務中的 setPromiseValue() 來設置值到 this.promiseValue</h2><p>回顧一下 ValueService 的 getPromiseValue()，用了 setTimeout 也就是固定在一秒之後會回傳結果，不過待會筆者會將它 Mock 成沒有 setTimeout 的 resolve 結果</p><p><a href="https://i.imgur.com/OYdzUio.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/OYdzUio.png" class="lazyload"></a></p><p>在 MasterService 撰寫 setPromiseValue() 訂閱它並設置到 this.promiseValue</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">typescript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight typescript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// master.service.ts</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Injectable</span>({</span><br><span class="line">  <span class="attr">providedIn</span>: <span class="string">'root'</span></span><br><span class="line">})</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">MasterService</span> </span>{</span><br><span class="line">  <span class="comment">// 中間省略...</span></span><br><span class="line">  <span class="keyword">public</span> promiseValue = <span class="string">''</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="keyword">private</span> valueService: ValueService,</span></span></span><br><span class="line"><span class="params"><span class="function">  </span>)</span> { }</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 中間省略...</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> setPromiseValue(): <span class="built_in">void</span> {</span><br><span class="line">    <span class="built_in">this</span>.valueService.getPromiseValue()</span><br><span class="line">      .then(<span class="function">(<span class="params">value</span>) =></span> {</span><br><span class="line">        <span class="built_in">this</span>.promiseValue = value;</span><br><span class="line">      });</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><h2 id="用-spyOn-把無法確定回傳時機的-method-給模擬出-假-的回傳結果"><a href="#用-spyOn-把無法確定回傳時機的-method-給模擬出-假-的回傳結果" class="headerlink" title="用 spyOn 把無法確定回傳時機的 method 給模擬出 假 的回傳結果"></a>用 spyOn 把無法確定回傳時機的 method 給模擬出 <code>假</code> 的回傳結果</h2><p>上面提到的 fakeAsync() + tick(1000) 只適合在確定一秒內會回傳結果的情境上使用，在真實的 api 回傳通常就不可能都有那麼剛好在一秒內會回傳東西給你，這時就可以用上 spyOn，將某個無法確切知道回傳時機的 method，做點小小的 return 值改動</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">typescript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight typescript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">describe(<span class="string">'MasterService'</span>, <span class="function">() =></span> {</span><br><span class="line">  <span class="keyword">let</span> service: MasterService;</span><br><span class="line">  <span class="keyword">let</span> valueServiceStub: Partial<valueservice>; <span class="comment">// 型別就算不加 Partial 也可以的</span></valueservice></span><br><span class="line"></span><br><span class="line">  beforeEach(<span class="function">() =></span> {</span><br><span class="line">    valueServiceStub = <span class="keyword">new</span> ValueService();</span><br><span class="line"></span><br><span class="line">    spyOn(valueServiceStub, <span class="string">'getPromiseValue'</span>).and.returnValue(</span><br><span class="line">      <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =></span> {</span><br><span class="line">        resolve(<span class="string">'promise value stub'</span>);</span><br><span class="line">      }),</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    TestBed.configureTestingModule({</span><br><span class="line">      <span class="attr">providers</span>: [</span><br><span class="line">        { <span class="attr">provide</span>: ValueService, <span class="attr">useValue</span>: valueServiceStub },</span><br><span class="line">      ],</span><br><span class="line">    });</span><br><span class="line">    service = TestBed.inject(MasterService);</span><br><span class="line">  });</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 中間省略...</span></span><br><span class="line"></span><br><span class="line">  it(<span class="string">'setPromiseValue 後 this.promiseValue 是否有正常得到值'</span>, fakeAsync(<span class="function">() =></span> {</span><br><span class="line">    service.setPromiseValue();</span><br><span class="line">    tick();</span><br><span class="line"></span><br><span class="line">    expect(service.promiseValue).toBe(<span class="string">'promise value stub'</span>);</span><br><span class="line">    expect(valueServiceStub.getPromiseValue).toHaveBeenCalledTimes(<span class="number">1</span>);</span><br><span class="line">  }));</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure></div><p>利用 <code>spyOn(valueServiceStub, 'getPromiseValue').and.returnValue()</code> 來將 getPromiseValue 給改成直接 resolve 結果的 Promise，測試程式碼的部分就能直接用 tick()，來確保 Promise.then 執行結束，後續的測試就都能正常完成了</p><blockquote><p>補充：為什麼用了 tick() 後，就能夠確保 Promise.then 執行完畢了呢？<br>這部分推薦各位 google 關鍵字 <strong>javascript event loop</strong>，應該就能找到一些用 JavaScript 單執行緒解釋一些同步執行，microtasks 還有 macrotasks 之類的說明，就能夠理解這個問題的答案了</p></blockquote><h3 id="執行結果-3"><a href="#執行結果-3" class="headerlink" title="執行結果"></a>執行結果</h3><p><a href="https://i.imgur.com/SVZnGp7.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/SVZnGp7.png" class="lazyload"></a></p><h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>對注入依賴服務的 service 進行測試，如果是非同步執行的 method，就會用到各種技巧來撰寫測試，畢竟是在測試環境上引入你的單元來跑測試，一些依賴關係複雜的情況就會仰賴測試替身的技巧</p><p>service 測試的部分應該就到這篇結束了，下一篇要針對 component 來進行測試的撰寫練習</p></body></html>]]></content>
      
      
      <categories>
          
          <category> w3HexSchool </category>
          
          <category> Angular </category>
          
      </categories>
      
      
        <tags>
            
            <tag> w3HexSchool </tag>
            
            <tag> Angular </tag>
            
            <tag> Unit Test </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Angular Testing（Part 3）- Service Test</title>
      <link href="/2020/04/26/2020-angular-testing-part-3/"/>
      <url>/2020/04/26/2020-angular-testing-part-3/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><p>Hi，大家好，前兩篇文章簡單介紹了 Angular CLI 一手裝好裝滿的單元測試環境，分別淺淺的講了 Jasmine 及 Karma，如何啟動測試，Angular CLI 大概的單元測試配置檔，以及 TestBed.configureTestingModule() 定義了類似 @NgModule 應用的來打造測試環境，今天要針對 service 的測試進行練習</p><h2 id="Service-服務"><a href="#Service-服務" class="headerlink" title="Service 服務"></a>Service 服務</h2><p>服務是定義了特殊用途的 class，從伺服器獲取資料、驗證使用者輸入或直接往控制檯中寫日誌等工作會委託給各種服務</p><p>服務就是一個 class，只是在 Angular 之中此 class 帶有 @Injectable 這個 <a href="https://www.typescriptlang.org/docs/handbook/decorators.html">decorator</a>，利用 Angular 獨有的模組化方式來使用這個服務，透過依賴注入來幫你更容易地將應用邏輯分解為服務</p><h2 id="ng-generate-service"><a href="#ng-generate-service" class="headerlink" title="ng generate service"></a>ng generate service</h2><p>就來建立一個 service 吧！直接在終端機輸入 <code>ng generate service Value</code> 即可</p><p><a href="https://i.imgur.com/ekCbWFJ.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/ekCbWFJ.png" class="lazyload"></a></p><p>就會得到這兩個 .ts 檔</p><p><a href="https://i.imgur.com/BYfvrND.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/BYfvrND.png" class="lazyload"></a></p><p><a href="https://i.imgur.com/XWhzrkM.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/XWhzrkM.png" class="lazyload"></a></p><p>service 產生後的初始狀態就是這樣，帶有 @Injectable 的 class，就可以直接對 class 填進所需要的 property 或 method 來進行設計，測試檔的部分寫好了 TestBed 設定完並 inject 進 ValueService 的實體，能直接進行撰寫測試項目</p><h3 id="對同步執行的-pure-function-回傳值進行測試"><a href="#對同步執行的-pure-function-回傳值進行測試" class="headerlink" title="對同步執行的 pure function 回傳值進行測試"></a>對同步執行的 pure function 回傳值進行測試</h3><p>在 value.service.ts 撰寫一個 method</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">typescript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight typescript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> getValue(): <span class="built_in">string</span> {</span><br><span class="line">  <span class="keyword">return</span> <span class="string">'real value'</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>在 value.service.spec.ts 撰寫相應的測試</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">typescript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight typescript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">'getValue should return real value'</span>, <span class="function">() =></span> {</span><br><span class="line">  expect(service.getValue()).toBe(<span class="string">'real value'</span>);</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure></div><p>執行測試</p><p><a href="https://i.imgur.com/GriS5Hh.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/GriS5Hh.png" class="lazyload"></a></p><h3 id="對非同步執行的-Observable-回傳值進行測試"><a href="#對非同步執行的-Observable-回傳值進行測試" class="headerlink" title="對非同步執行的 Observable 回傳值進行測試"></a>對非同步執行的 Observable 回傳值進行測試</h3><p>在 value.service.ts 撰寫一個假裝 1 秒後回傳值的 Observable</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">typescript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight typescript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> getObservableValue(): Observable<<span class="built_in">string</span>> {</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> Observable((subsriber: Subscriber<<span class="built_in">string</span>>): <span class="function"><span class="params">void</span> =></span> {</span><br><span class="line">    <span class="built_in">setTimeout</span>((): <span class="function"><span class="params">void</span> =></span> {</span><br><span class="line">      subsriber.next(<span class="string">'observable value'</span>);</span><br><span class="line">      subsriber.complete();</span><br><span class="line">    }, <span class="number">1000</span>);</span><br><span class="line">  });</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>在 value.service.spec.ts 撰寫相應的測試</p><p>因為是非同步回傳的行為，必須要在測試的函式中使用 <code>done: DoneFn</code> 這個參數進行 callback 呼叫來告知測試要結束的時機</p><p>測試 Observable 就直接訂閱 subscribe 下去，在 done、error 或 complete 的函式中進行測試</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">typescript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight typescript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">'getObservableValue should return value from observable'</span>, <span class="function">(<span class="params">done: DoneFn</span>) =></span> {</span><br><span class="line">  service.getObservableValue().subscribe(</span><br><span class="line">    <span class="function">(<span class="params">value</span>) =></span> {</span><br><span class="line">      expect(value).toBe(<span class="string">'observable value'</span>);</span><br><span class="line">      done();</span><br><span class="line">    },</span><br><span class="line">  );</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure></div><p>執行測試</p><p><a href="https://i.imgur.com/wvOklnG.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/wvOklnG.png" class="lazyload"></a></p><h3 id="對非同步執行的-Promise-回傳值進行測試"><a href="#對非同步執行的-Promise-回傳值進行測試" class="headerlink" title="對非同步執行的 Promise 回傳值進行測試"></a>對非同步執行的 Promise 回傳值進行測試</h3><p>在 value.service.ts 撰寫一個假裝 1 秒後回傳值的 Promise</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">typescript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight typescript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> getPromiseValue(): <span class="built_in">Promise</span><<span class="built_in">string</span>> {</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>((resolve): <span class="function"><span class="params">void</span> =></span> {</span><br><span class="line">    <span class="built_in">setTimeout</span>((): <span class="function"><span class="params">void</span> =></span> {</span><br><span class="line">      resolve(<span class="string">'promise value'</span>);</span><br><span class="line">    }, <span class="number">1000</span>);</span><br><span class="line">  });</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>在 value.service.spec.ts 撰寫相應的測試</p><p>跟剛才的 Observable 一樣有非同步回傳的行為，在測試函式中使用 <code>done: DoneFn</code> 來告知測試要結束的時機</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">typescript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight typescript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">'getPromiseValue should return value from a promise'</span>, <span class="function">(<span class="params">done: DoneFn</span>) =></span> {</span><br><span class="line">  service.getPromiseValue()</span><br><span class="line">    .then(<span class="function">(<span class="params">value</span>) =></span> {</span><br><span class="line">      expect(value).toBe(<span class="string">'promise value'</span>);</span><br><span class="line">      done();</span><br><span class="line">    });</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure></div><p>執行測試</p><p><a href="https://i.imgur.com/bZjiJkv.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/bZjiJkv.png" class="lazyload"></a></p><h3 id="非同步行為如果測試沒有執行到-done"><a href="#非同步行為如果測試沒有執行到-done" class="headerlink" title="非同步行為如果測試沒有執行到 done()"></a>非同步行為如果測試沒有執行到 done()</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">typescript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight typescript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">'getPromiseValue should return value from a promise'</span>, <span class="function">(<span class="params">done: DoneFn</span>) =></span> {</span><br><span class="line">  service.getPromiseValue()</span><br><span class="line">    .then(<span class="function">(<span class="params">value</span>) =></span> {</span><br><span class="line">      expect(value).toBe(<span class="string">'promise value'</span>);</span><br><span class="line">      <span class="comment">// done();</span></span><br><span class="line">    });</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure></div><p>執行的測試會跑了 5 秒後告訴你測試 timeout 並失敗了</p><p><a href="https://i.imgur.com/gWw2xTG.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/gWw2xTG.png" class="lazyload"></a></p><p>所以非同步行為的測試撰寫要特別注意，偏偏網頁前端通常都有大量的非同步行為，要撰寫針對非同步行為來寫測試的這種情形一定會常常遇到</p><h3 id="非同步行為的測試有一個-雷-！？"><a href="#非同步行為的測試有一個-雷-！？" class="headerlink" title="非同步行為的測試有一個 雷 ！？"></a>非同步行為的測試有一個 <strong>雷</strong> ！？</h3><p>這裡把測試項目中的 done() 給拿掉，並且連測試函式的參數 <code>done: DoneFn</code> 都不放</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">typescript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight typescript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">'getPromiseValue should return value from a promise'</span>, <span class="function">() =></span> {</span><br><span class="line">  service.getPromiseValue()</span><br><span class="line">    .then(<span class="function">(<span class="params">value</span>) =></span> {</span><br><span class="line">      expect(value).toBe(<span class="string">'promise value'</span>);</span><br><span class="line">    });</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure></div><p>結果…</p><p><a href="https://i.imgur.com/7KegQC8.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/7KegQC8.png" class="lazyload"></a></p><p>測試居然綠油油的通過了！？</p><p>等等等，仔細看一下瀏覽器上那一列顯示的文字</p><p><a href="https://i.imgur.com/GgDacB1.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/GgDacB1.png" class="lazyload"></a></p><p>有一條測試項目標明 <code>SPEC HAS NO EXPECTATIONS</code>，代表這個測試項目完全沒執行到任何 expect 的函式，等於是一段無效的測試，這應該會是未來需要特別留意的，不確定為何沒有設計成跳 failure 並顯示紅色來讓它更容易察覺，也可能有其他地方可以更改設置，留待未來覺得這種顯示雷到受不了時就會解決它</p><h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>今天只簡單的對最基本會使用的 method 來撰寫測試，回顧一下今天這篇文的一些重點</p><ul><li>測試 service 要先用 TestBed 來 inject 取得 service 測試用的服務實體</li><li>對同步行為的 function 撰寫測試時就很一般逐行寫上測試需求，最後斷言，但對到有非同步行為的 function 時要記得在非同步回傳值後告知測試執行 done() 來結束測試，否則會 timeout 測試失敗</li><li>要注意 <code>SPEC HAS NO EXPECTATIONS</code> 這個關鍵字，雖然是測試項目列顯示是綠色的，但這可是無效的測試無誤</li></ul><p>下一篇還是寫對 service 進行測試，是關於有依賴的 service，有時會需要將依賴給隔離而用到 spy，為了讓單元測試能夠獨立執行而不會被其他依賴干擾所使用的技巧</p></body></html>]]></content>
      
      
      <categories>
          
          <category> w3HexSchool </category>
          
          <category> Angular </category>
          
      </categories>
      
      
        <tags>
            
            <tag> w3HexSchool </tag>
            
            <tag> Angular </tag>
            
            <tag> Unit Test </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Angular Testing（Part 2）- 環境說明</title>
      <link href="/2020/04/19/2020-angular-testing-part-2/"/>
      <url>/2020/04/19/2020-angular-testing-part-2/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><p>Hi，大家好，上一篇文章簡單介紹了 Angular CLI 一手裝好裝滿的單元測試環境，分別淺淺的講了 Jasmine 及 Karma，還有如何啟動測試，今天要先在更往 CLI 專案裡面看一看究竟放了什麼葫蘆什麼藥</p><h2 id="angular-json"><a href="#angular-json" class="headerlink" title="angular.json"></a>angular.json</h2><p>首先就從根目錄位置的 <code>angular.json</code> 開始看起，ng new 產生一個新專案後，打開 <code>angular.json</code> 應該會在 83 行的位置看到，有個 <code>"test"</code> 的設置</p><p><a href="https://i.imgur.com/MiZ0Rig.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/MiZ0Rig.png" class="lazyload"></a></p><p><code>"test"</code> 內的設置是測試時的建構選項預設值，並為 ng test 命令提供額外的預設值以供執行測試，其中特別要拿來說明的是 <code>"main": "src/test.ts"</code> 及 <code>"karmaConfig": "karma.conf.js"</code>，他們就是 Angular CLI 的單元測試設置檔</p><h2 id="src-test-ts"><a href="#src-test-ts" class="headerlink" title="src/test.ts"></a>src/test.ts</h2><p><a href="https://i.imgur.com/pZqFEio.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/pZqFEio.png" class="lazyload"></a></p><p>test.ts 的 getTestBed() 是用來動態建立一個模擬 @NgModule 的 Angular 測試模組，看起來這邊用 getTestBed() 打造出類似 app.module.ts 的基底</p><p>23 行 <code>require.context('./', true, /\.spec\.ts$/);</code> 再遞迴你整個專案的 xxx.spec.ts 來進行測試</p><h2 id="karma-conf-js"><a href="#karma-conf-js" class="headerlink" title="karma.conf.js"></a>karma.conf.js</h2><p><a href="https://i.imgur.com/Z671Vtm.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/Z671Vtm.png" class="lazyload"></a></p><p>karma.conf.js 寫著要整合的測試框架 jasmine、angular 相關的環境、測試覆蓋率產生配置，以及測試時使用的瀏覽器等等</p><h2 id="ng-generate-service-來觀察-service-spec-ts"><a href="#ng-generate-service-來觀察-service-spec-ts" class="headerlink" title="ng generate service 來觀察 service.spec.ts"></a>ng generate service 來觀察 service.spec.ts</h2><p>先 ng new 一個乾淨的專案</p><p>然後在終端機輸入 <code>ng generate service test</code></p><p><a href="https://i.imgur.com/8dMMmv3.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/8dMMmv3.png" class="lazyload"></a></p><p>就會產生 test.service.ts 以及 test.service.spec.ts</p><p><a href="https://i.imgur.com/WE40RC5.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/WE40RC5.png" class="lazyload"></a></p><p><a href="https://i.imgur.com/kl8vqxM.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/kl8vqxM.png" class="lazyload"></a></p><p>這時就直接執行 <code>npm run test</code> 就會得到測試的結果</p><p><a href="https://i.imgur.com/bBKPQhK.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/bBKPQhK.png" class="lazyload"></a></p><p>app.component.spec.ts 的程式碼目前都被我刪掉了，現在先專注在這一個 service 的檔案上</p><h3 id="configureTestingModule-定義"><a href="#configureTestingModule-定義" class="headerlink" title="configureTestingModule 定義"></a>configureTestingModule 定義</h3><p>傳給 configureTestingModule 的模組定義是 @NgModule 元資料屬性的子集</p><p>為了說明這點，筆者要將 test.service.ts 的 meta 中定義的 <code>providerIn: 'root'</code> 給刪掉</p><p><a href="https://i.imgur.com/bbtZTfH.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/bbtZTfH.png" class="lazyload"></a></p><p>這時就噴錯啦</p><p><a href="https://i.imgur.com/tIEU2wP.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/tIEU2wP.png" class="lazyload"></a></p><p>TestBed 無法正常的 inject 進 TestService，需要對 configureTestingModule 設定 providers 才行</p><p><a href="https://i.imgur.com/hki3JFV.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/hki3JFV.png" class="lazyload"></a></p><p><a href="https://i.imgur.com/sObwloZ.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/sObwloZ.png" class="lazyload"></a></p><p>所以 TestBed.configureTestingModule() 就類似定義了 @NgModule 這種配置來當單元測試的基礎，在寫 module.ts 所關注的細節在這裡也都必須注意到</p><h3 id="ngModel-amp-amp-FormsModule"><a href="#ngModel-amp-amp-FormsModule" class="headerlink" title="[(ngModel)] && FormsModule"></a>[(ngModel)] && FormsModule</h3><p>再舉個例子來說，測試一個 component 時有可能模板語法中會用到 [(ngModel)]，那在定義 configureTestingModule 時就必須要在 imports 中引入 FormsModule，測試案例才會看懂使用到 [(ngModel)] 的部分</p><h3 id="beforeEach"><a href="#beforeEach" class="headerlink" title="beforeEach()"></a>beforeEach()</h3><p><a href="https://i.imgur.com/9cQC7zP.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/9cQC7zP.png" class="lazyload"></a></p><p>最後要提一下這個 beforeEach()</p><p>beforeEach() 內呼叫 TestBed.configureTestingModule()，代表在每次執行測試之前都能重新建立初始環境，讓每次的測試彼此獨立，不會因為相互影響而造成測試的結果不同，這是單元測試時必須要做好的基本概念之一</p><h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>因為 Angular CLI 是一個一手裝好裝滿的工具，要理解它提供的單元測試環境也是研究了一番，karma 整合了 jasmine 以及 @angular-devkit/build-angular，筆者其實並不熟 jasmine 及 karma，可能得找點時間把這兩個給單獨研究一下</p><p>下一篇應該會從 Angular 中最好寫測試的 service 來撰寫，因為 service 應該就是以單純 class 來看它的 method 寫了什麼樣的邏輯，不過如果是有非同步行為的 method 還不知道會發生什麼樣的事 XD</p></body></html>]]></content>
      
      
      <categories>
          
          <category> w3HexSchool </category>
          
          <category> Angular </category>
          
      </categories>
      
      
        <tags>
            
            <tag> w3HexSchool </tag>
            
            <tag> Angular </tag>
            
            <tag> Unit Test </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Angular Testing（Part 1）- 環境說明</title>
      <link href="/2020/04/12/2020-angular-testing-part-1/"/>
      <url>/2020/04/12/2020-angular-testing-part-1/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><p>Hi，大家好，最近正好需要用 Angular 進行開發，目前還是個初心者 XD，好不容易將官方文檔的內容也看了個大概（才怪！一堆都還沒搞懂），就想挑戰看看自動測試，這篇就要用來記錄個寫測試的不同手段，因為 Angular 在使用 <code>ng generate</code> 就已經切分成各種不同的 Schematics，有最主要的元件 component、服務 service、還有 module、directive、pipe，目前以筆者這種初心者的觀點認為這幾種東西後續會很常用，尤其是 component、service、module，應該會把測試重點放在這幾樣東西上</p><h2 id="環境說明"><a href="#環境說明" class="headerlink" title="環境說明"></a>環境說明</h2><p>本文中主要是用 Angular CLI 9.0.7，一新建完專案後，就可以直接用 <code>npm run test</code> 來執行測試了，從 package.json 的 scripts 來看 <code>"test"</code> 是執行了 <code>ng test</code>，因為測試環境都已經被 CLI 一手裝好裝滿了，筆者接下來會直接用現有的測試環境來開始介紹</p><p>Angular CLI 預設使用的是 <a href="https://jasmine.github.io/">Jasmine</a>，及 <a href="https://karma-runner.github.io/">Karma</a> 來進行單元測試，用 <a href="https://www.protractortest.org/">protractor</a> 來進行 E2E 測試</p><p>主要會以單元測試為主來撰寫，E2E 的部分暫時不會詳細說明到</p><hr><h2 id="Jasmine"><a href="#Jasmine" class="headerlink" title="Jasmine"></a>Jasmine</h2><a href="https://jasmine.github.io/images/jasmine-white-horizontal.svg" data-fancybox="group" data-caption="undefined" class="fancybox"><img style="background-color: #8A4182; margin-bottom: 16px;" data-src="https://jasmine.github.io/images/jasmine-white-horizontal.svg" class="lazyload"></a><p>Jasmine test framework，它是用 JavaScript 來寫測試程式碼的測試框架</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">describe(<span class="string">'A suite'</span>, <span class="function">() =></span> {</span><br><span class="line">    it(<span class="string">'contains spec with an expecation'</span>, <span class="function">() =></span> {</span><br><span class="line">        expect(<span class="literal">true</span>).toBe(<span class="literal">true</span>);</span><br><span class="line">    });</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure></div><p>寫起來就是這種感覺，用一層 describe() 去描述此測試群組的總體目標</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">describe(<span class="string">'總體目標'</span>, <span class="function">() =></span> {</span><br><span class="line">  <span class="comment">// DO 測項</span></span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure></div><p>其內部的 it()，會依照測試的細項需求進行描述，並寫進測試程式碼</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">'用什麼東西來做什麼動作最後預期得到什麼結果'</span>, <span class="function">() =></span> {</span><br><span class="line">  <span class="keyword">const</span> a = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">const</span> b = <span class="number">1</span>;</span><br><span class="line">  expect(a === b).toBe(<span class="literal">true</span>);</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure></div><p>這部分一定要額外花時間去看過 Jasmine 的 <a href="https://jasmine.github.io/pages/docs_home.html">官方文檔</a> 來學習各種測試語法，因為你將會大量的用到它，而且還有一些的測試替身 stub、mock、spy 諸如此類的技術得搞懂，它能幫助你在測試 <code>單元</code> 時能隔離掉雜七雜八的依賴</p><hr><h2 id="Karma"><a href="#Karma" class="headerlink" title="Karma"></a>Karma</h2><a href="https://karma-runner.github.io/assets/img/banner.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img style="margin-bottom: 16px;" data-src="https://karma-runner.github.io/assets/img/banner.png" class="lazyload"></a><p>Karma 是一個建立測試環境的函式庫，它會整合真實的瀏覽器或設備等等，還有整合測試框架，讓你能在寫測試後讓測試程式碼在模擬的實際環境中運行，環境的部分就完全依靠 Karma 提供的各種選擇，是非常方便的整合工具</p><h2 id="測試方法"><a href="#測試方法" class="headerlink" title="測試方法"></a>測試方法</h2><p>Angular CLI 在 ng new 產生的一個專案，本身就已經有整合了完整的測試環境了，就是上述那個測試框架 Jasmine 及整合工具 Karma</p><h3 id="ng-generate"><a href="#ng-generate" class="headerlink" title="ng generate"></a>ng generate</h3><p>每一次使用 ng generate 來產生不同類型的檔案時（如 component 或 service），產生的檔案之中都會夾帶著 <code>xxx.spec.ts</code></p><p><a href="https://i.imgur.com/5BfjRFT.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/5BfjRFT.png" class="lazyload"></a><br>上圖是用 <code>ng g component Input</code> 來產生 component 帶出的檔案</p><h3 id="ng-test"><a href="#ng-test" class="headerlink" title="ng test"></a>ng test</h3><p>運行測試時會將整個專案的所有 <code>xxx.spec.ts</code> 進行測試，測試的方法就是輸入指令 <code>ng test</code> 或是 <code>npm run test</code> 皆可</p><p>執行後會啟動一個測試用的 Chrome，顯示你的測試結果，在終端機也會顯示，不過瀏覽器上顯示的是排版過的，好看 XD</p><p><a href="https://i.imgur.com/xsLyrCF.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/xsLyrCF.png" class="lazyload"></a></p><p><a href="https://i.imgur.com/LBz2rbJ.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/LBz2rbJ.png" class="lazyload"></a></p><p>這時它會一直持續的監控測試狀態，不會直接中止，可以立即修改程式碼讓它自動重新進行測試，想要停止監控測試狀態要按下 <code>ctrl + c</code> 來中斷</p><h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>結果這篇光是寫套件的說明就給它結束了 XD，還沒有實際的擬定需求案例，因應需求來撰寫測試程式碼，其實是筆者根本還沒想好要測試個什麼才比較能體會到測試的真諦 XD，就是那種改了 A 卻壞了 B，能依靠測試來直接抓到修改 code 時不經意的害其它地方發生錯誤的情況，如果能完善的掌握測試這個技能，一定能在專案開發流程中更有安全感！</p></body></html>]]></content>
      
      
      <categories>
          
          <category> w3HexSchool </category>
          
          <category> Angular </category>
          
      </categories>
      
      
        <tags>
            
            <tag> w3HexSchool </tag>
            
            <tag> Angular </tag>
            
            <tag> Unit Test </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>learnyounode（Exercise 6 - 模組化，Exercise 7 - HTTP 客戶端）</title>
      <link href="/2020/04/04/2020-learnyounode-exercise-6-7/"/>
      <url>/2020/04/04/2020-learnyounode-exercise-6-7/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><p>Hi，大家好，我是小馬彬，清明時節也要來繼續學習 Node.js，筆者挑選的練習素材為 <a href="https://nodeschool.io/zh-tw/">NODESCHOOL</a> 網站中的 learnyounode 所提供的題目，期望利用它來了解更多關於 Node.js 的基礎應用，如果不知道練習素材的題目是怎麼得來的朋友們，可以到我這系列的第一篇文章 <a href="https://littlehorseboy.github.io/2020/03/13/2020-learnyounode-exercise-1/">learnyounode (Exercise 1 of 13)</a> 看看</p><p>那麼就直接開始練習後續的題目吧</p><blockquote><p><strong>TIP</strong></p><p>以下內容會直接暴雷題目的解答，如果是想要先自己嘗試思考並解開題目的人，請斟酌觀看</p></blockquote><hr><h2 id="挑戰-Exercise-6"><a href="#挑戰-Exercise-6" class="headerlink" title="挑戰 Exercise 6"></a>挑戰 Exercise 6</h2><p>第六題是『模組化』</p><blockquote><p><strong>Q：</strong></p><p>這題主要是要練習拆模組，要建立兩個檔案，模組與主程式</p><p>撰寫一個以副檔名作為篩選條件，列出指定資料夾內檔案的程式</p><p>主程式的第一個參數是目錄的路徑，第二個參數則是篩選用的副檔名</p><p>如果第二個參數是「txt」，您將需要篩選出資料夾內 以 .txt 結尾的檔案</p><p>另外依需求撰寫的模組要提供一個函式，接受三個參數，目錄名稱、附檔名，以及一個 callback 函式</p><p>callback 函式必須符合一般的 Node.js 函式的慣例，傳給 callback 函式的第一個參數一定是 error 的內容，沒有 error 發生就會回傳 null，第二個參數回傳的是處理完邏輯後的資料</p></blockquote><h3 id="劃重點"><a href="#劃重點" class="headerlink" title="劃重點"></a>劃重點</h3><p>循著提示來了解幾個重點</p><ul><li>新建模組導出的函式接受三個參數，目錄名稱、附檔名，以及一個 callback 函式</li><li>導出的函式中使用內建核心模組的 fs 對檔案系統進行操作</li><li>導出的函式中使用內建核心模組的 path 對檔案名稱取得副檔名</li><li><code>fs.readdir()</code> 用來取得一個目錄下所有檔案的檔案名稱</li><li><code>path.extname()</code> 取得副檔名</li><li>對讀取到的檔案陣列用 <code>filter()</code> 篩選出與第二個參數完全符合的檔案</li><li>主程式中使用函式的第一個參數 process.argv[2] 是目錄的路徑</li><li>主程式中使用函式的第二個參數 process.argv[3] 是篩選用的副檔名</li><li>主程式中使用函式的第三個參數是一個函式，會接到 error 內容或是搜尋到的檔案陣列，將檔案陣列 forEach 來 log 出即為解答</li></ul><h3 id="程式碼"><a href="#程式碼" class="headerlink" title="程式碼"></a>程式碼</h3><p>新建一隻 js，筆者這邊將檔案取名為 exercise6.searchExt.js，撰寫一個接收目錄名稱，副檔名，callback 三個參數的函式，函式中用目錄名稱來讀取目錄底下的資料，而後用副檔名篩選出陣列，再用 callback 回傳結果，最後將整個函式用 module.exports 導出</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* exercise6.searchExt.js */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function">(<span class="params">folder, ext, callback</span>) =></span> {</span><br><span class="line">  fs.readdir(folder, <span class="function">(<span class="params">err, files</span>) =></span> {</span><br><span class="line">    <span class="keyword">if</span> (err) {</span><br><span class="line">      <span class="keyword">return</span> callback(err);</span><br><span class="line">    }</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">const</span> filteredFiles = files</span><br><span class="line">      .filter(<span class="function">(<span class="params">file</span>) =></span> path.extname(file) === <span class="string">`.<span class="subst">${ext}</span>`</span>);</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> callback(<span class="literal">null</span>, filteredFiles);</span><br><span class="line">  });</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure></div><p>主程式的部分新增了一個 exercise6.js，引入剛剛新建的模組，並將對應的參數塞進新建模組的函式，在 callback 的回傳結果中 log 出所有檔案名稱</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* exercise6.js */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> searchExt = <span class="built_in">require</span>(<span class="string">'./exercise6.searchExt'</span>);</span><br><span class="line"></span><br><span class="line">searchExt(process.argv[<span class="number">2</span>], process.argv[<span class="number">3</span>], <span class="function">(<span class="params">err, filteredFiles</span>) =></span> {</span><br><span class="line">  <span class="keyword">if</span> (err) {</span><br><span class="line">    <span class="built_in">console</span>.error(err);</span><br><span class="line">  }</span><br><span class="line">  filteredFiles.forEach(<span class="function">(<span class="params">file</span>) =></span> {</span><br><span class="line">    <span class="built_in">console</span>.log(file);</span><br><span class="line">  });</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure></div><p>手動輸入指令來看看執行情況</p><p><a href="https://i.imgur.com/BNexl30.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/BNexl30.png" class="lazyload"></a></p><p>第一個參數為 <code>.</code>，指定要搜尋的是當前目錄<br>第二個參數為 <code>txt</code>，指定要篩選的副檔名</p><p>筆者指定的目錄底下只有一個 txt 檔，所以輸出 exercise4.txt，輸出正確</p><p>這樣就可以執行 <code>learnyounode verify exercise6.js</code> 來通過測驗了</p><hr><h2 id="挑戰-Exercise-7"><a href="#挑戰-Exercise-7" class="headerlink" title="挑戰 Exercise 7"></a>挑戰 Exercise 7</h2><p>第七題是『HTTP 客戶端』</p><blockquote><p><strong>Q：</strong></p><p>撰寫一個會對第一個參數所提供之 URL 發出 HTTP GET 請求（request）的程式<br>這個程式會把每個回應「data」事件的字串內容以新的一行 log 到終端機上</p></blockquote><h3 id="劃重點-1"><a href="#劃重點-1" class="headerlink" title="劃重點"></a>劃重點</h3><p>循著提示來了解幾個重點</p><ul><li>第一個參數 process.argv[2] 是 url 網址，例如 <a href="http://google.com/">http://google.com</a> </li><li>使用 Node.js 內建核心模組的 http.get() 發出請求</li><li>callback 回傳的是 response 物件，它是一個 Node Stream 物件，可以對 Stream 掛上 data、error、end 事件來監聽以取得資料來進行處理</li><li>掛上 data 的監聽事件回傳的內容為 Buffer 物件，可以先將 Stream 物件 setEncoding(‘utf8’)，直接將回傳內容轉成 string </li></ul><h3 id="程式碼-1"><a href="#程式碼-1" class="headerlink" title="程式碼"></a>程式碼</h3><p>程式中引入 Node 核心模組 http，使用 http.get() 得到的回傳值為 Stream 物件，得再對 Stream 物件掛上 on(‘data’, (chunk) => { }) 進行處理，data 事件回傳值的是 Buffer 物件，也得要特別處理成字串</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"></span><br><span class="line">http</span><br><span class="line">  .get(process.argv[<span class="number">2</span>], <span class="function">(<span class="params">res</span>) =></span> {</span><br><span class="line">    res.setEncoding(<span class="string">'utf8'</span>);</span><br><span class="line">    res.on(<span class="string">'data'</span>, <span class="function">(<span class="params">chunk</span>) =></span> {</span><br><span class="line">      <span class="built_in">console</span>.log(chunk);</span><br><span class="line">    });</span><br><span class="line">    res.on(<span class="string">'error'</span>, <span class="function">(<span class="params">err</span>) =></span> {</span><br><span class="line">      <span class="built_in">console</span>.error(err);</span><br><span class="line">    });</span><br><span class="line">  })</span><br><span class="line">  .on(<span class="string">'error'</span>, <span class="built_in">console</span>.error);</span><br></pre></td></tr></tbody></table></figure></div><p>手動輸入指令來看看執行情況，網址是故意打錯的，剛好得到回傳內容不會太多</p><p><a href="https://i.imgur.com/6ABReJV.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/6ABReJV.png" class="lazyload"></a></p><p>這樣就可以執行 <code>learnyounode verify exercise7.js</code> 來通過測驗了</p><h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>本篇所挑戰的第六題，用到了 CommonJS 的模組約定，應該說一直有在用的 require() 就是 CommonJS 的模組引入方式，這裡是自己客製化了一個模組，利用 module.exports 來導出，導出的是一個函式，不過要知道其實不只能夠導出函式，連純值、物件或陣列都可以當成導出的內容，JS 就是這麼隨興</p><p>自定義的模組封裝了使用 fs 及 path 相關的邏輯操作，主程式只要將函式引入，餵進需求的參數，就能得到預期的結果，而不用關心邏輯的程式碼寫了什麼，模組可是在封裝性的程式設計中必定要精熟的技術</p><p>本篇所挑戰的第七題，主要是寫後端發送 request 請求的應用，要處理 Stream 物件還要處理 Buffer 物件，算是更加理解一般使用 Node.js 核心模組的操作細節，如果直接使用框架，如 express.js，可能就會少一點點處理這些細節的過程，當然未來一定要往更加省事的方向邁進，但了解更多基底在踩雷時就會有更多的想法可以實驗</p><p>終於到有網路應用相關的 Node.js 應用題了，看來接下來就快要能夠看到 Server 的相關應用</p></body></html>]]></content>
      
      
      <categories>
          
          <category> w3HexSchool </category>
          
          <category> node.js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> w3HexSchool </tag>
            
            <tag> node.js </tag>
            
            <tag> learnyounode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>learnyounode（Exercise 4 - 非同步輸入/輸出，Exercise 5 - 篩選）</title>
      <link href="/2020/03/29/2020-learnyounode-exercise-4-5/"/>
      <url>/2020/03/29/2020-learnyounode-exercise-4-5/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><p>Hi，大家好，我是小馬彬，今天要繼續來練習 <a href="https://nodeschool.io/zh-tw/">NODESCHOOL</a> 的 learnyounode 所提供的題目，如果不知道題目是怎麼得來的朋友們，可以到我的這篇文章 <a href="https://littlehorseboy.github.io/2020/03/13/2020-learnyounode-exercise-1/">learnyounode (Exercise 1 of 13)</a> 看看</p><p>那麼就直接開始練習後續的題目吧</p><blockquote><p><strong>TIP</strong></p><p>以下內容直接暴雷題目的解答，如果是想要先自己嘗試思考並解開題目的人，請斟酌觀看</p></blockquote><hr><h2 id="挑戰-Exercise-4"><a href="#挑戰-Exercise-4" class="headerlink" title="挑戰 Exercise 4"></a>挑戰 Exercise 4</h2><p>第四題是『非同步輸入/輸出』</p><blockquote><p><strong>Q：</strong></p><p>撰寫一個程式，使用非同步（Synchronous）的檔案操作系統<br> API</p><p>開啟指定檔案，然後讀取並計算該檔案內容的行(\n)數，最後 console 出計算結果<br>輸出的結果就像是使用下列終端機命令一樣：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat 檔案路徑 | wc -l</span><br></pre></td></tr></tbody></table></figure></div><p>輸入執行程式的指令時的第一個命令列參數將是檔案的完整路徑</p></blockquote><h3 id="劃重點"><a href="#劃重點" class="headerlink" title="劃重點"></a>劃重點</h3><p>循著提示來了解幾個重點</p><ul><li>要使用 Node.js 內建核心模組的 fs 來進行檔案系統的操作</li><li>需求要用『非同步』方式處理檔案，用 <code>fs.readFile</code> 而非 <del><code>fs.readFileSync</code></del></li><li>用 <code>fs.readFile</code> 讀取檔案會返回一個完整檔案內容的 <code>Buffer</code> 物件</li><li>Buffer 可以用本身的 toString() 將物件內容轉換成可見字串</li><li>要讀取換行符號並得知行數可以用 <code>split('\n')</code> 切割文字產生陣列，再計算陣列的長度就有可能是正確答案了</li><li>輸入執行程式的指令時的 <strong>第一個參數</strong> 是檔案路徑</li><li>測試檔案的最後一行不會以換行符號 \n 結尾，所以最後 Array 元素數目（也就是行數）將會比換行符號多一個。</li></ul><h3 id="程式碼"><a href="#程式碼" class="headerlink" title="程式碼"></a>程式碼</h3><p>因為要讀取檔案，所以先建立一個 txt 檔，並隨意填上幾行文字，然後來執行題目需求的指令看會輸出什麼</p><p><a href="https://i.imgur.com/gVmKDWp.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/gVmKDWp.png" class="lazyload"></a></p><p><a href="https://i.imgur.com/Yo92CGj.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/Yo92CGj.png" class="lazyload"></a></p><p>輸出是 3，代表指令計算出這個檔案內容有 3 行，雖然檔案內容的第 4 行有空白，不過並不會計算進去</p><p>那麼待會要注意在 js 用 <code>split('\n')</code> 切割出來的陣列內容是什麼</p><p><a href="https://i.imgur.com/xYDRxCH.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/xYDRxCH.png" class="lazyload"></a></p><p><a href="https://i.imgur.com/T2snBLv.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/T2snBLv.png" class="lazyload"></a></p><p>可以看到讀取檔案來 <code>split('\n')</code> 後得到的陣列長度有 4，多一個是因為陣列內容的最後有一個空白的值，這個是不需要的，所以為了讓測驗通過，需要將 <code>length - 1</code></p><p>最終通過的程式碼會是這樣</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"></span><br><span class="line">fs.readFile(process.argv[<span class="number">2</span>], <span class="string">'utf8'</span>, <span class="function">(<span class="params">err, data</span>) =></span> {</span><br><span class="line">  <span class="keyword">if</span> (err) {</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">console</span>.error(err);</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(data.split(<span class="string">'\n'</span>).length - <span class="number">1</span>);</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure></div><hr><h2 id="挑戰-Exercise-5"><a href="#挑戰-Exercise-5" class="headerlink" title="挑戰 Exercise 5"></a>挑戰 Exercise 5</h2><p>第五題是『篩選』</p><blockquote><p><strong>Q：</strong></p><p>撰寫一個以副檔名作為篩選條件，列出指定資料夾內檔案的程式</p><p>程式的第一個參數是目錄的路徑，第二個參數則是篩選用的副檔名</p><p>如果第二個參數是「txt」，您將需要篩選出資料夾內 以 .txt 結尾的檔案</p></blockquote><h3 id="劃重點-1"><a href="#劃重點-1" class="headerlink" title="劃重點"></a>劃重點</h3><p>循著提示來了解幾個重點</p><ul><li>第一個參數 process.argv[2] 是目錄的路徑</li><li>第二個參數 process.argv[3] 是篩選用的副檔名</li><li>使用 Node.js 內建核心模組的 fs 對檔案系統進行操作</li><li>使用 Node.js 內建核心模組的 path 對檔案名稱取得副檔名</li><li><code>fs.readdir()</code> 用來取得一個目錄下所有檔案的檔案名稱</li><li><code>path.extname()</code> 取得副檔名</li><li>對讀取到的檔案陣列用 <code>filter()</code> 篩選出與第二個參數完全符合的檔案</li></ul><h3 id="程式碼-1"><a href="#程式碼-1" class="headerlink" title="程式碼"></a>程式碼</h3><p>首先要有個目錄結構，筆者以當前的專案目錄來當作要查詢的目標</p><p>目前專案目錄下有著副檔名是 .js 以及 .txt 的檔案</p><p><a href="https://i.imgur.com/ysLC7aq.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/ysLC7aq.png" class="lazyload"></a></p><p>撰寫後並通過的完整程式碼是這樣</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"></span><br><span class="line">fs.readdir(process.argv[<span class="number">2</span>], <span class="function">(<span class="params">err, files</span>) =></span> {</span><br><span class="line">  <span class="keyword">if</span> (err) {</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">console</span>.error(err);</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> filteredFiles = files</span><br><span class="line">    .filter(<span class="function">(<span class="params">file</span>) =></span> path.extname(file) === <span class="string">`.<span class="subst">${process.argv[<span class="number">3</span>]}</span>`</span>);</span><br><span class="line"></span><br><span class="line">  filteredFiles.forEach(<span class="function">(<span class="params">file</span>) =></span> {</span><br><span class="line">    <span class="built_in">console</span>.log(file);</span><br><span class="line">  });</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure></div><p>手動執行看看是否有篩選出正確的結果，用 node 指令執行 exercise5.js，並設第一個參數為 <code>./</code>，第二個參數為 <code>txt</code> 或 <code>js</code></p><p><a href="https://i.imgur.com/MqmcXnQ.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/MqmcXnQ.png" class="lazyload"></a></p><p><a href="https://i.imgur.com/VvyrvVG.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/VvyrvVG.png" class="lazyload"></a></p><h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>這一篇所挑戰的題目，加深了對 Node.js 檔案系統模組的運用，讀取檔案會取得 Buffer，簡單轉換過就是可以理解且檢視的檔案內容，以及讀取指定目錄內的所有檔案的檔案名稱，而後利用路徑模組取得副檔名來做篩選，如果要對篩選後的檔案進行內容處理就可以在迴圈內接續的用讀取檔案的模組來撰寫功能</p><p>這樣就解完了四題了！第一題 hello world 也算的話那就是五題 XD，連續好幾題都是關於檔案系統的運用，看來檔案操作對後端來說非常的重要呢！</p></body></html>]]></content>
      
      
      <categories>
          
          <category> w3HexSchool </category>
          
          <category> node.js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> w3HexSchool </tag>
            
            <tag> node.js </tag>
            
            <tag> learnyounode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>learnyounode（Exercise 2 - 印出命令列參數總和，Exercise 3 - 檔案輸入/輸出）</title>
      <link href="/2020/03/21/2020-learnyounode-exercise-2-3/"/>
      <url>/2020/03/21/2020-learnyounode-exercise-2-3/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><p>Hi，大家好，我是小馬彬，今天要繼續來練習 <a href="https://nodeschool.io/zh-tw/">NODESCHOOL</a> 的 learnyounode 所提供的題目，如果不知道題目是怎麼得來的朋友們，可以到我的這篇文章 <a href="https://littlehorseboy.github.io/2020/03/13/2020-learnyounode-exercise-1/">learnyounode (Exercise 1 of 13)</a> 看看</p><p>那麼就直接開始練習後續的題目吧</p><blockquote><p><strong>TIP</strong></p><p>以下內容直接暴雷題目的解答，如果是想要先自己嘗試思考並解開題目的人，請斟酌觀看</p></blockquote><h2 id="挑戰-Exercise-2"><a href="#挑戰-Exercise-2" class="headerlink" title="挑戰 Exercise 2"></a>挑戰 Exercise 2</h2><p>第二題是『第一步』</p><blockquote><p><strong>Q：</strong></p><p>撰寫一個可以印出命令列參數總和的程式</p></blockquote><h3 id="劃重點"><a href="#劃重點" class="headerlink" title="劃重點"></a>劃重點</h3><p>循著提示來了解幾個重點</p><ul><li>Node.js 的 global 環境中有 <code>process</code> 物件可以直接存取</li><li>process.argv 會接收完整的命令列內的指令</li><li>假設輸入指令為 <code>node program.js 1 2 3</code>，process.argv 的內容為 <code>['node', '/path/to/your/program.js', '1', '2', '3']</code>，必定為一個 <strong>Array</strong></li><li>從指令的 <strong>第三個參數</strong> 開始才是你要的取用來加總成參數的</li><li>process.argv 的陣列元素皆為 <strong>字串</strong>，需要轉成 <strong>數字</strong> 才能加總</li></ul><h3 id="程式碼"><a href="#程式碼" class="headerlink" title="程式碼"></a>程式碼</h3><p>因為 process.argv 必為陣列，還有真的要用的參數是從第三個開始，所以筆者會先對陣列進行 <code>slice(2)</code>，只取陣列中第三個以後的元素</p><p>而後用 <code>reduce((a, b) => a + b, 0)</code> 將剩餘的參數加總起來，過程中一定要記得將 String 轉成 Number</p><blockquote><p><strong>TIP</strong></p><p>reduce 的第二個參數是用來設置預設值的，如果沒有設定預設值，在陣列沒有任何元素時使用 reduce 是會直接爆炸的，筆者被這雷過不少次 XD</p></blockquote><p><a href="https://i.imgur.com/TcsOA1E.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/TcsOA1E.png" class="lazyload"></a></p><p>那麼以下就是我撰寫提交並且有通過的程式碼</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(</span><br><span class="line">  process.argv</span><br><span class="line">    .slice(<span class="number">2</span>)</span><br><span class="line">    .reduce(<span class="function">(<span class="params">a, b</span>) =></span> <span class="built_in">Number</span>(a) + <span class="built_in">Number</span>(b), <span class="number">0</span>),</span><br><span class="line">);</span><br></pre></td></tr></tbody></table></figure></div><p>另外附上官方給的參考解答</p><p><a href="https://i.imgur.com/U44eBIK.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/U44eBIK.png" class="lazyload"></a></p><h2 id="挑戰-Exercise-3"><a href="#挑戰-Exercise-3" class="headerlink" title="挑戰 Exercise 3"></a>挑戰 Exercise 3</h2><p>第三題是『輸入/輸出』</p><blockquote><p><strong>Q：</strong></p><p>撰寫一個程式，使用 同步（Synchronous） 操作方式的檔案系統 API</p><p>開啟指定檔案，然後讀取並計算該檔案內容的行(\n)數，最後 console 出計算結果<br>輸出的結果就像是使用下列終端機命令一樣：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat 檔案路徑 | wc -l</span><br></pre></td></tr></tbody></table></figure></div><p>輸入執行程式的指令時的第一個命令列參數將是檔案的完整路徑</p></blockquote><h3 id="劃重點-1"><a href="#劃重點-1" class="headerlink" title="劃重點"></a>劃重點</h3><p>循著提示來了解幾個重點</p><ul><li>要使用 Node.js 內建的 fs 核心模組來進行檔案系統的操作</li><li>需求要用『同步』方式處理檔案，用 <code>fs.readFileSync</code> 而非 <del><code>fs.readFile</code></del></li><li>用 <code>fs.readFileSync</code> 讀取檔案會返回一個完整檔案內容的 <code>Buffer</code> 物件</li><li>Buffer 可以用本身的 toString() 將物件內容轉換成可見字串</li><li>要讀取換行符號並得知行數可以用 <code>split('\n')</code> 切割文字產生陣列，再計算陣列的長度就有可能是正確答案了</li><li>輸入執行程式的指令時的 <strong>第一個參數</strong> 是檔案路徑</li><li>測試檔案的最後一行不會以換行符號 \n 結尾，所以最後 Array 元素數目（也就是行數）將會比換行符號多一個。</li></ul><h3 id="程式碼-1"><a href="#程式碼-1" class="headerlink" title="程式碼"></a>程式碼</h3><p>先用上一題的檔案內容來測試 <code>cat 檔案路徑 | wc -l</code></p><p><a href="https://i.imgur.com/08M6iQs.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/08M6iQs.png" class="lazyload"></a></p><p><a href="https://i.imgur.com/ANt8MeM.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/ANt8MeM.png" class="lazyload"></a></p><p>輸出是 5，雖然檔案內容的第 6 行有空白，不過並不會計算進去</p><p>待會要注意用 split 切割出來的陣列內容是什麼</p><p><a href="https://i.imgur.com/tj0AVQM.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/tj0AVQM.png" class="lazyload"></a></p><p><a href="https://i.imgur.com/XN7ZC8D.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/XN7ZC8D.png" class="lazyload"></a></p><p>最後要因應劃重點中的最後一項，會將 length - 1</p><p>最終有通過的程式碼會是這樣</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> data = fs.readFileSync(process.argv[<span class="number">2</span>]);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(data.toString().split(<span class="string">'\n'</span>).length);</span><br></pre></td></tr></tbody></table></figure></div><p>解答參考中提到可以省去使用 toString()，只要把 ‘utf8’ 作為 readFileSync 的第二個輸入參數</p><p>改寫過後</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> data = fs.readFileSync(process.argv[<span class="number">2</span>], <span class="string">'utf8'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(data.split(<span class="string">'\n'</span>).length - <span class="number">1</span>);</span><br></pre></td></tr></tbody></table></figure></div><h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>雖然才解完了應該算比較不複雜的兩題，不過筆者相信這種主動去思考且動手做看看，定能對這些應用留下更深的印象，將基礎給訓練札實，後續才更加能靈活適應變化</p><p>後續的題目不知道會不會越來越難，應該不至於吧 XD</p></body></html>]]></content>
      
      
      <categories>
          
          <category> w3HexSchool </category>
          
          <category> node.js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> w3HexSchool </tag>
            
            <tag> node.js </tag>
            
            <tag> learnyounode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>learnyounode（Exercise 1 - HELLO WORLD）</title>
      <link href="/2020/03/13/2020-learnyounode-exercise-1/"/>
      <url>/2020/03/13/2020-learnyounode-exercise-1/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><p>Hi，大家好，我是小馬彬，最近想要把 Node.js 的應用知識給補起來，本來想要買一本中文書，不過查了查博X來發現好像沒有喜歡的，應該說真的用了關鍵字查到想買的是 2016 年出版的 XD，不過因為版本更迭應該差蠻多的，毅然決然地開始尋找其他資源，最後就在 Node.js 的官方網站上發現這個</p><h2 id="NODESCHOOL"><a href="#NODESCHOOL" class="headerlink" title="NODESCHOOL"></a>NODESCHOOL</h2><p><a href="https://nodeschool.io/zh-tw/">https://nodeschool.io/zh-tw/</a></p><p><a href="https://i.imgur.com/9rDGOSy.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/9rDGOSy.png" class="lazyload"></a></p><p>居然還有中文呢，絕對不是因為筆者英文不行，只是怕看英文會吸收得太慢而且不良於學（不就是英文不行嗎 XD）</p><h2 id="安裝說明"><a href="#安裝說明" class="headerlink" title="安裝說明"></a>安裝說明</h2><p>在瀏覽過後看起來資源非常豐富，有各種不同的主題的挑戰</p><p><a href="https://i.imgur.com/knqX4gN.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/knqX4gN.png" class="lazyload"></a></p><p>就先來裝個 Node.js 的基礎來試手看看了</p><p><code>npm install -g learnyounode</code></p><p>安裝完成後就能直接輸入指令 <code>learnyounode</code> 來開啟挑戰</p><p>筆者是用 Windows 10 家用版來開啟，最一開始執行 <code>learnyounode</code> 的時候顯示了現有執行策略不允許執行的說明</p><p><a href="https://i.imgur.com/aklw3pr.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/aklw3pr.png" class="lazyload"></a></p><p>learnyounode 是 .ps1 檔，筆者爬文後知道得設定了 <code>Set-ExecutionPolicy RemoteSigned</code>（使用此設置需要以系統管理員身分）後就可以正常執行程式，更詳細的設定參數可以參考 <a href="https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.security/set-executionpolicy?view=powershell-7">官方 Docs</a></p><h2 id="執行及切換-Language"><a href="#執行及切換-Language" class="headerlink" title="執行及切換 Language"></a>執行及切換 Language</h2><p>那麼再次輸入 <code>learnyounode</code>，就會看到如下的畫面</p><p><a href="https://i.imgur.com/TYShS3W.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/TYShS3W.png" class="lazyload"></a></p><p>已經偷跑了三題 XD，不過這篇文會只講第一題</p><p>先改成中文才方便閱讀題目（覺得很重要，但或許只有筆者會需要 XD）</p><p>選擇 <code>CHOOSE LANGUAGE</code> 之後選擇 <code>Taiwanese (繁體中文)</code> 得到全繁體中文啦～～</p><p><a href="https://i.imgur.com/GRisEzb.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/GRisEzb.png" class="lazyload"></a></p><p>接下來因為操作這個介面的步驟並不難，就不會每個步驟都將畫面上的內容給完整截圖下來貼上</p><h2 id="挑戰開始-Exercise-1"><a href="#挑戰開始-Exercise-1" class="headerlink" title="挑戰開始 Exercise 1"></a>挑戰開始 Exercise 1</h2><p>第一題要做的是輸出 『HELLO WORLD』 到終端機，沒錯！一開始總是要 HELLO WORLD 一下</p><p>開啟一隻 js 來撰寫程式碼</p><p><a href="https://i.imgur.com/OvHsb2C.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/OvHsb2C.png" class="lazyload"></a></p><p>就這樣，依照他提供的指令對你寫出來的檔案進行操作</p><p><a href="https://i.imgur.com/LgxvKtG.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/LgxvKtG.png" class="lazyload"></a></p><p>就能看到通過的結果了</p><p><a href="https://i.imgur.com/0IzgFV5.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/0IzgFV5.png" class="lazyload"></a></p><h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>筆者覺得這個資源是適合我的，或許也適合大家，剛好在尋找學習 Node.js 的資源時發現的，算是小小推坑文，後續幾篇文會陸續將其他題解題的過程給紀錄下來</p></body></html>]]></content>
      
      
      <categories>
          
          <category> w3HexSchool </category>
          
          <category> node.js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> w3HexSchool </tag>
            
            <tag> node.js </tag>
            
            <tag> learnyounode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C#，又來找你玩了！ - MSTest 的 Assert 提供了哪些 method？</title>
      <link href="/2020/03/06/2020-csharp-VisualStudio-MSTest-Assert/"/>
      <url>/2020/03/06/2020-csharp-VisualStudio-MSTest-Assert/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><p>Hi，大家好，我是小馬彬，今天要將 <code>Microsoft.VisualStudio.TestTools.UnitTesting</code> 的 Assert 所提供的 method 逐個來玩玩，首先要開啟測試專案，直接建一個 TestClass 來實驗，如果不知道如何建立 MSTest 測試專案，可以到我的上一篇文章看看 <a href="https://littlehorseboy.github.io/2020/03/01/2020-csharp-VisualStudio-MSTest/">C#，又來找你玩了！ - MSTest 測試專案初體驗</a>，那麼就直接開始逐個了解</p><h2 id="Assert-AreEqual"><a href="#Assert-AreEqual" class="headerlink" title="Assert.AreEqual"></a>Assert.AreEqual</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">csharp</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight csharp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 測試指定的值是否相等</span></span><br><span class="line"><span class="comment"> * 說明上還寫著不同型態的數值會視為不相等</span></span><br><span class="line"><span class="comment"> * 不過倒還是有可以 pass 的情況，是不是搞錯了什麼 XD</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">[<span class="meta">TestMethod()</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">AreEqual</span>(<span class="params"></span>)</span></span><br><span class="line">{</span><br><span class="line">    Assert.AreEqual(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">    Assert.AreEqual(<span class="literal">true</span>, <span class="literal">true</span>);</span><br><span class="line">    Assert.AreEqual(<span class="string">"string"</span>, <span class="string">"string"</span>);</span><br><span class="line">    Assert.AreEqual(<span class="number">1.0</span>, <span class="number">1.0f</span>); <span class="comment">// 此為特殊的相等情況，但如果是用 (1.1, 1.1f) 就會 fail</span></span><br><span class="line">    Assert.AreEqual(<span class="number">1</span>, <span class="number">1.0</span>m);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><h2 id="Assert-AreNotEqual"><a href="#Assert-AreNotEqual" class="headerlink" title="Assert.AreNotEqual"></a>Assert.AreNotEqual</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">csharp</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight csharp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 測試指定的值是否『不』相等</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">[<span class="meta">TestMethod()</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">AreNotEqual</span>(<span class="params"></span>)</span></span><br><span class="line">{</span><br><span class="line">    Assert.AreNotEqual(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">    Assert.AreNotEqual(<span class="string">"one"</span>, <span class="string">"two"</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><h2 id="Assert-AreNotSame"><a href="#Assert-AreNotSame" class="headerlink" title="Assert.AreNotSame"></a>Assert.AreNotSame</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">csharp</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight csharp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 測試指定的物件是否參照『不同』物件</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">[<span class="meta">TestMethod()</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">AreNotSame</span>(<span class="params"></span>)</span></span><br><span class="line">{</span><br><span class="line">    Assert.AreNotSame(<span class="keyword">new</span>[] { <span class="number">1</span>, <span class="number">2</span> }, <span class="keyword">new</span>[] { <span class="number">1</span>, <span class="number">2</span> });</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><h2 id="Assert-AreSame"><a href="#Assert-AreSame" class="headerlink" title="Assert.AreSame"></a>Assert.AreSame</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">csharp</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight csharp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 測試指定的物件是否參照『相同』物件</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">[<span class="meta">TestMethod()</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">AreSame</span>(<span class="params"></span>)</span></span><br><span class="line">{</span><br><span class="line">    <span class="built_in">int</span>[] array = <span class="keyword">new</span>[] { <span class="number">1</span>, <span class="number">2</span> };</span><br><span class="line">    Assert.AreSame(array, array);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p><strong>Assert.Equals</strong> 沒搞懂這個是怎麼回事 XD</p><h2 id="Assert-Fail"><a href="#Assert-Fail" class="headerlink" title="Assert.Fail"></a>Assert.Fail</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">csharp</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight csharp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 擲回 AssertFailedException</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">[<span class="meta">TestMethod()</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Fail</span>(<span class="params"></span>)</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    {</span><br><span class="line">        Assert.Fail();</span><br><span class="line">    }</span><br><span class="line">    catch (Exception)</span><br><span class="line">    {</span><br><span class="line">        Assert.AreEqual(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><h2 id="Assert-Inconclusive"><a href="#Assert-Inconclusive" class="headerlink" title="Assert.Inconclusive"></a>Assert.Inconclusive</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">csharp</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight csharp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 擲回 AssertInconclusiveException</span></span><br><span class="line"><span class="comment"> * 一個沒有定論，介於有斷言成功與沒有斷言成功之間，沒啦，他其實是『跳過』</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">[<span class="meta">TestMethod()</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Inconclusive</span>(<span class="params"></span>)</span></span><br><span class="line">{</span><br><span class="line">    Assert.Inconclusive();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><h2 id="Assert-IsFalse"><a href="#Assert-IsFalse" class="headerlink" title="Assert.IsFalse"></a>Assert.IsFalse</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">csharp</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight csharp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 測試指定的條件是否為 false</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">[<span class="meta">TestMethod()</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">IsFalse</span>(<span class="params"></span>)</span></span><br><span class="line">{</span><br><span class="line">    Assert.IsFalse(<span class="number">1</span> == <span class="number">2</span>);</span><br><span class="line">    Assert.IsFalse(<span class="literal">false</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><h2 id="Assert-IsInstanceOfType"><a href="#Assert-IsInstanceOfType" class="headerlink" title="Assert.IsInstanceOfType"></a>Assert.IsInstanceOfType</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">csharp</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight csharp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 測試指定的物件是否為預期類型的執行個體</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">[<span class="meta">TestMethod()</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">IsInstanceOfType</span>(<span class="params"></span>)</span></span><br><span class="line">{</span><br><span class="line">    Assert.IsInstanceOfType(<span class="number">1</span>, <span class="keyword">typeof</span>(<span class="built_in">int</span>));</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><h2 id="Assert-IsNotInstanceOfType"><a href="#Assert-IsNotInstanceOfType" class="headerlink" title="Assert.IsNotInstanceOfType"></a>Assert.IsNotInstanceOfType</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">csharp</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight csharp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 測試指定的物件是否不是錯誤類型的執行個體</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">[<span class="meta">TestMethod()</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">IsNotInstanceOfType</span>(<span class="params"></span>)</span></span><br><span class="line">{</span><br><span class="line">    Assert.IsNotInstanceOfType(<span class="number">1</span>, <span class="keyword">typeof</span>(<span class="built_in">string</span>));</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><h2 id="Assert-IsNotNull"><a href="#Assert-IsNotNull" class="headerlink" title="Assert.IsNotNull"></a>Assert.IsNotNull</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">csharp</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight csharp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 測試指定的物件是否為非 null</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">[<span class="meta">TestMethod()</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">IsNotNull</span>(<span class="params"></span>)</span></span><br><span class="line">{</span><br><span class="line">    Assert.IsNotNull(<span class="number">1</span> == <span class="number">1</span>);</span><br><span class="line">    Assert.IsNotNull(<span class="literal">false</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><h2 id="Assert-IsNull"><a href="#Assert-IsNull" class="headerlink" title="Assert.IsNull"></a>Assert.IsNull</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">csharp</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight csharp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 測試指定的物件是否為 null</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">[<span class="meta">TestMethod()</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">IsNull</span>(<span class="params"></span>)</span></span><br><span class="line">{</span><br><span class="line">    Assert.IsNull(<span class="literal">null</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><h2 id="Assert-IsTrue"><a href="#Assert-IsTrue" class="headerlink" title="Assert.IsTrue"></a>Assert.IsTrue</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">csharp</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight csharp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 測試指定的條件是否為 true</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">[<span class="meta">TestMethod()</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">IsTrue</span>(<span class="params"></span>)</span></span><br><span class="line">{</span><br><span class="line">    Assert.IsTrue(<span class="number">1</span> == <span class="number">1</span>);</span><br><span class="line">    Assert.IsTrue(<span class="literal">true</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p><strong>Assert.ReferenceEquals</strong> 沒搞懂這個是怎麼回事 XD</p><p><strong>Assert.ReplaceNullChars</strong> 沒搞懂這個是怎麼回事 XD</p><h2 id="Assert-ThrowsException"><a href="#Assert-ThrowsException" class="headerlink" title="Assert.ThrowsException"></a>Assert.ThrowsException</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">csharp</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight csharp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 測試委派 action 所指定的程式碼會擲回 T 類型的確切指定例外狀況</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">[<span class="meta">TestMethod()</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ThrowsException</span>(<span class="params"></span>)</span></span><br><span class="line">{</span><br><span class="line">    Assert.ThrowsException<argumentnullexception>(() => <span class="keyword">new</span> Regex(<span class="literal">null</span>));</argumentnullexception></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>將 Assert 給大致上玩過了一遍，除了有幾個完全沒搞懂，爬文是說好像完全不能用 = =，不能用還會放在裡面也蠻奇怪的 XD，其實 MSTest 除了 Assert 的核心 class 可用以外，還有 <code>StringAssert</code> 以及 <code>CollectionAssert</code>，不過筆者就不通通擠在這篇裡面介紹了，等之後有機會將 class 運用得更嫻熟的時候再來玩玩吧！</p></body></html>]]></content>
      
      
      <categories>
          
          <category> w3HexSchool </category>
          
          <category> C# </category>
          
      </categories>
      
      
        <tags>
            
            <tag> w3HexSchool </tag>
            
            <tag> Unit Test </tag>
            
            <tag> C# </tag>
            
            <tag> Visual Studio </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C#，又來找你玩了！ - MSTest 測試專案初體驗</title>
      <link href="/2020/03/01/2020-csharp-VisualStudio-MSTest/"/>
      <url>/2020/03/01/2020-csharp-VisualStudio-MSTest/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><p>Hi，大家好，我是小馬彬，單元測試能夠使你對你寫的程式碼更有信心，像遇到需求變更，或是維護解 bug 時，已經撰寫好的單元測試就能夠在你更動程式碼時，幫助了解有沒有改壞東西，不過撰寫『好的』或是『完備的』單元測試，絕對是需要一番勤學苦練的。</p><p>其實筆者目前算是 C# 的生手，好幾年前的菜鳥時期碰過，但只知其一，不知其二，OOP 及設計模式都還沒熟識，所以這篇文會紀錄筆者用一個非常基礎的 class，然後創建一個 MSTest 測試專案來測試該 class，以及一些 IDE 使用方式，對 class 玩轉自如的重構這邊應該短期內看不到 XD，後幾篇期望能將 <code>Microsoft.VisualStudio.TestTools.UnitTesting</code> 做更深入的研究</p><h2 id="新建主控台應用程式"><a href="#新建主控台應用程式" class="headerlink" title="新建主控台應用程式"></a>新建主控台應用程式</h2><p>選擇主控台應用程式後按下一步</p><p><a href="https://i.imgur.com/o1owz4i.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/o1owz4i.png" class="lazyload"></a></p><p>輸入專案名稱選擇好存放位置後按建立</p><p><a href="https://i.imgur.com/b8n9cdd.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/b8n9cdd.png" class="lazyload"></a></p><p>得到 Hello World!</p><p><a href="https://i.imgur.com/dcybXVX.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/dcybXVX.png" class="lazyload"></a></p><p>建立 Stack.cs</p><p><a href="https://i.imgur.com/CrWI8Kj.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/CrWI8Kj.png" class="lazyload"></a></p><p>程式碼取自官方文檔中的 <a href="https://docs.microsoft.com/zh-tw/dotnet/csharp/language-reference/language-specification/introduction#program-structure">C# 6.0 草稿規格</a> 內容</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">csharp</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight csharp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Stack.cs */</span></span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleAppClassTests_practice</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Stack</span></span><br><span class="line">    {</span><br><span class="line">        Entry top;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Push</span>(<span class="params"><span class="built_in">object</span> data</span>)</span></span><br><span class="line">        {</span><br><span class="line">            top = <span class="keyword">new</span> Entry(top, data);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="built_in">object</span> <span class="title">Pop</span>(<span class="params"></span>)</span></span><br><span class="line">        {</span><br><span class="line">            <span class="keyword">if</span> (top == <span class="literal">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> InvalidOperationException();</span><br><span class="line">            <span class="built_in">object</span> result = top.data;</span><br><span class="line">            top = top.next;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">class</span> <span class="title">Entry</span></span><br><span class="line">        {</span><br><span class="line">            <span class="keyword">public</span> Entry next;</span><br><span class="line">            <span class="keyword">public</span> <span class="built_in">object</span> data;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="title">Entry</span>(<span class="params">Entry next, <span class="built_in">object</span> data</span>)</span></span><br><span class="line">            {</span><br><span class="line">                <span class="keyword">this</span>.next = next;</span><br><span class="line">                <span class="keyword">this</span>.data = data;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></div><p>主程式 Program.cs 操作這個堆疊 class 來輸出看看</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">csharp</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight csharp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Program.cs */</span></span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleAppClassTests</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    {</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        {</span><br><span class="line">            Stack s = <span class="keyword">new</span> Stack();</span><br><span class="line"></span><br><span class="line">            s.Push(<span class="string">"one"</span>);</span><br><span class="line">            s.Push(<span class="string">"two"</span>);</span><br><span class="line">            s.Push(<span class="string">"three"</span>);</span><br><span class="line"></span><br><span class="line">            Console.WriteLine(<span class="string">"three"</span>, s.Pop());</span><br><span class="line">            Console.WriteLine(<span class="string">"two"</span>, s.Pop());</span><br><span class="line">            Console.WriteLine(<span class="string">"one"</span>, s.Pop());</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>執行並觀察輸出，Push one two three，Pop three two one，如果在堆疊內還沒 Push 進任何內容，就先寫 Pop 的話會被拋出例外</p><p><a href="https://i.imgur.com/nmwOKLN.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/nmwOKLN.png" class="lazyload"></a></p><h2 id="建立測試專案"><a href="#建立測試專案" class="headerlink" title="建立測試專案"></a>建立測試專案</h2><p>接下來就是要寫測試的程式碼了，建立測試專案的起手式，有兩種</p><h3 id="第一種，手動建立測試專案"><a href="#第一種，手動建立測試專案" class="headerlink" title="第一種，手動建立測試專案"></a>第一種，手動建立測試專案</h3><p>對解決方案點右鍵來新增專案</p><p><a href="https://i.imgur.com/8b49ShA.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/8b49ShA.png" class="lazyload"></a></p><p>搜尋 MSTest，選擇 MSTest 測試專案，並輸入專案名稱後按下建立</p><p><a href="https://i.imgur.com/eXXYYE1.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/eXXYYE1.png" class="lazyload"></a></p><p>建立後會在右側方案總管對測試專案的相依性點右鍵，將要測試專案加入參考，因為這兩個專案的 RootNamespace 是不一樣的，沒有加入參考會存取不到</p><p><a href="https://i.imgur.com/qS7zAnY.gif" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/qS7zAnY.gif" class="lazyload"></a></p><h3 id="第二種，用-IDE-對要測試的目標-class-點右鍵"><a href="#第二種，用-IDE-對要測試的目標-class-點右鍵" class="headerlink" title="第二種，用 IDE 對要測試的目標 class 點右鍵"></a>第二種，用 IDE 對要測試的目標 class 點右鍵</h3><p>先將剛剛建立的專案刪除，要記得的就是，從 IDE 上刪除專案，並不會刪到真正的檔案，而是刪除該專案與這個解決方案 .sln 的相依性，還需要額外到資料夾進行刪除，至少在筆者的 Windows 10 Visual Studio 2019 是這樣，不同作業系統或版本可能會有差異</p><p>只剩原本的主控台應用程式專案</p><p><a href="https://i.imgur.com/iQn6Yxy.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/iQn6Yxy.png" class="lazyload"></a></p><p>選擇 Stack.cs，直接 class 名稱點右鍵，選單選擇建立單元測試</p><p><a href="https://i.imgur.com/nzGMJWu.gif" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/nzGMJWu.gif" class="lazyload"></a></p><p>這個功能就能直接幫你蓋一個 MSTest 的專案及測試檔，名稱預設會依照你現在指定要測試的專案檔案來產生，還有相依性都幫你準備好，懶人（如我）必用</p><p><a href="https://i.imgur.com/aAIMFuC.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/aAIMFuC.png" class="lazyload"></a></p><p>按下確定後就會幫你建好新專案，以及對應原本 class 的 TestMethod</p><p><a href="https://i.imgur.com/57XbwwW.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/57XbwwW.png" class="lazyload"></a></p><h2 id="來直接進行測試吧！"><a href="#來直接進行測試吧！" class="headerlink" title="來直接進行測試吧！"></a>來直接進行測試吧！</h2><p>選擇最上排選單的『測試』，然後執行所有測試，這時會開啟 Test Explorer 的小視窗</p><p><a href="https://i.imgur.com/LmnsqQl.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/LmnsqQl.png" class="lazyload"></a></p><p><a href="https://i.imgur.com/nYPl7f5.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/nYPl7f5.png" class="lazyload"></a></p><p>測試失敗了！當然，剛剛建立完測試檔案後什麼都沒有改動，TestMethod 中直接寫著讓測試 fail 的 <code>Assert.Fail()</code></p><h2 id="想想我要測試什麼樣的情境"><a href="#想想我要測試什麼樣的情境" class="headerlink" title="想想我要測試什麼樣的情境"></a>想想我要測試什麼樣的情境</h2><p>現在的 class 是一個 Stack 堆疊的功能，那麼…</p><ol><li>首先當然是測堆疊 Push 後有資料時進行 Pop 能否正常後進先出的取得資料</li></ol><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">csharp</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight csharp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">TestMethod()</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">StackPushPopIntTest</span>(<span class="params"></span>)</span></span><br><span class="line">{</span><br><span class="line">    <span class="comment">// arrange</span></span><br><span class="line">    Stack s = <span class="keyword">new</span> Stack();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// act</span></span><br><span class="line">    s.Push(<span class="number">1</span>);</span><br><span class="line">    s.Push(<span class="number">10</span>);</span><br><span class="line">    s.Push(<span class="string">"100"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// assert</span></span><br><span class="line">    Assert.AreEqual(<span class="string">"100"</span>, s.Pop());</span><br><span class="line">    Assert.AreEqual(<span class="number">10</span>, s.Pop());</span><br><span class="line">    Assert.AreEqual(<span class="number">1</span>, s.Pop());</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><ol start="2"><li>測堆疊在沒有任何資料時進行 Pop() 會拋出例外</li></ol><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">csharp</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight csharp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">ExpectedException(typeof(InvalidOperationException))</span>]</span><br><span class="line">[<span class="meta">TestMethod()</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">StackPopInvalidOperationException</span>(<span class="params"></span>)</span></span><br><span class="line">{</span><br><span class="line">    <span class="comment">// arrange</span></span><br><span class="line">    Stack s = <span class="keyword">new</span> Stack();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// act</span></span><br><span class="line">    s.Pop();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>測試拋出例外要用 decorator 的 [ExpectedException()]</p><h2 id="執行測試"><a href="#執行測試" class="headerlink" title="執行測試"></a>執行測試</h2><p>用剛剛開啟的 Test Explorer，直接點他左上角的執行所有測試（兩個三角形的按紐）</p><p><a href="https://i.imgur.com/ybRNXLP.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/ybRNXLP.png" class="lazyload"></a></p><p>就能看到測試完全成功了，都是綠色勾勾，代表堆疊功能正常，堆疊沒資料時進行 Pop 會拋出例外</p><h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>以上就是依靠 Visual Studio 提供的功能來建立一個最基礎的測試專案，只有一個 class 及測試的 class，還不知道複雜的專案會怎麼去玩轉這些 XD，不過就還是一樣繼續刻意練習吧，C# 的基礎應該要先盡力提升起來</p></body></html>]]></content>
      
      
      <categories>
          
          <category> w3HexSchool </category>
          
          <category> C# </category>
          
      </categories>
      
      
        <tags>
            
            <tag> w3HexSchool </tag>
            
            <tag> Unit Test </tag>
            
            <tag> C# </tag>
            
            <tag> Visual Studio </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C#，又來找你玩了！ - Visual Studio 重新認識</title>
      <link href="/2020/02/22/2020-csharp-VisualStudio-beginner/"/>
      <url>/2020/02/22/2020-csharp-VisualStudio-beginner/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><p>Hi，大家好，我是小馬彬，最近心血來潮的想要重溫 C#，想想過去在開發 ASP.NET MVC 網站時都是硬幹，新建專案，跟著專案架構亂打一通，有問題就 google 找到解就貼上去，也不管那些解到底使用了什麼樣的核心模組，所以一整個網站中有非常多程式碼是在不清不楚，但是可以 run 的狀況下完成的，這樣說起來好像很危險 XD，留下了一堆不明不白，不過其實算是依靠 C# 強型別的特性，以及 IDE 的強大，穩定性應該還是有的，只是可讀性以及日後如果要維護去修改時，一定會很容易改 A 壞 B，最近重新拜讀了 SOLID，加上這幾年在寫 JS 的模組化也算小有心得，毅然決然地想要把過去搞得很不順手的 C# 給重新研究一番</p><h2 id="古人有云：「工欲善其-code，必先利其-IDE」（明明是我瞎掰的）"><a href="#古人有云：「工欲善其-code，必先利其-IDE」（明明是我瞎掰的）" class="headerlink" title="古人有云：「工欲善其 code，必先利其 IDE」（明明是我瞎掰的）"></a>古人有云：「工欲善其 code，必先利其 IDE」（明明是我瞎掰的）</h2><p>所以就是好好的了解 IDE 一番，也就是 Visual Studio 啦，官方文檔要瞄過一遍，每次有改版的說明也得好好了解，其實是因為看過別人實際重構的方式，點來點去就能拆解組合，抽出介面等等，覺得 IDE 真的很有投資價值</p><h2 id="站在巨人的肩膀上（抱-Visual-studio-Docs-的大腿？）"><a href="#站在巨人的肩膀上（抱-Visual-studio-Docs-的大腿？）" class="headerlink" title="站在巨人的肩膀上（抱 Visual studio Docs 的大腿？）"></a>站在巨人的肩膀上（抱 Visual studio Docs 的大腿？）</h2><p>這篇應該是記錄非常基礎的 C# 練習過程，會從 Visual Studio 安裝頁面上的連結開始<a href="https://docs.microsoft.com/en-us/visualstudio/get-started/visual-studio-ide?view=vs-2019">讀</a>（當然還是會選擇性的挑跟 C# 或是 Web 較相關的來讀），裝好了最新的 Visual Studio 2019，現在開始要狠狠的將基礎給打好，好好地將官方文檔給讀過一遍，這種讀文件的習慣在寫前端的時期才真的有養成，且確實在開發時省掉了非常多的麻煩，不過也有可能在菜鳥時期的我，想要看官方文檔反而更是霧煞煞，因為對於程式碼通常可以做到什麼事情都還沒有通盤了解 XD</p><h2 id="開始刻意練習"><a href="#開始刻意練習" class="headerlink" title="開始刻意練習"></a>開始刻意練習</h2><p>首先建立新專案，要開個主控台應用程式</p><p><a href="https://i.imgur.com/DM2QCQC.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/DM2QCQC.png" class="lazyload"></a></p><p>設定專案名稱及存放位置</p><p><a href="https://i.imgur.com/Z7XtAmD.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/Z7XtAmD.png" class="lazyload"></a></p><p>建立後就會看到這個畫面了</p><p><a href="https://i.imgur.com/RhkZNRO.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/RhkZNRO.png" class="lazyload"></a></p><p>馬上來改寫基本的 Console.WriteLine() Console.ReadLine()</p><p><a href="https://i.imgur.com/L9DkNyp.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/L9DkNyp.png" class="lazyload"></a></p><p>ctrl + F5 啟動後就能與黑黑的指令介面互動了</p><p><a href="https://i.imgur.com/RERUKsE.gif" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/RERUKsE.gif" class="lazyload"></a></p><hr><h2 id="特殊-IDE-使用技巧"><a href="#特殊-IDE-使用技巧" class="headerlink" title="特殊 IDE 使用技巧"></a>特殊 IDE 使用技巧</h2><p>以前根本不以為意的重構技巧</p><h3 id="變數的命名修改"><a href="#變數的命名修改" class="headerlink" title="變數的命名修改"></a>變數的命名修改</h3><p><a href="https://i.imgur.com/Ttz30Z4.gif" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/Ttz30Z4.gif" class="lazyload"></a></p><hr><p>繼續跟著官方文檔增加取得 DateTime 的程式碼</p><p><a href="https://i.imgur.com/tKobL8D.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/tKobL8D.png" class="lazyload"></a></p><p>執行結果</p><p><a href="https://i.imgur.com/NwLvMTZ.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/NwLvMTZ.png" class="lazyload"></a></p><p>這樣排好像不太好看，我要讓時間的顯示文字成為一行</p><hr><h2 id="快捷鍵，相符文字新增至多重選取再一起修改"><a href="#快捷鍵，相符文字新增至多重選取再一起修改" class="headerlink" title="快捷鍵，相符文字新增至多重選取再一起修改"></a>快捷鍵，相符文字新增至多重選取再一起修改</h2><p>程式碼中的三行 <code>Console.WriteLine</code> 要改成 <code>Console.Write</code></p><p>懶人如我不想要一個一個改，在 VSCode 中有個 <code>ctrl + d</code> 超方便能用相符文字來往下選取</p><p>在 Visual Studio 查到一樣的功能的快捷鍵是 <code>Shift + Alt + .</code></p><p>對要更改的單字目標，按三次 <code>Shift + Alt + .</code>（如果滑鼠不是雙擊來選是按四次）</p><p><a href="https://i.imgur.com/d4x1WZ8.gif" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/d4x1WZ8.gif" class="lazyload"></a></p><hr><h2 id="利用-IDE-的功能來重構"><a href="#利用-IDE-的功能來重構" class="headerlink" title="利用 IDE 的功能來重構"></a>利用 IDE 的功能來重構</h2><p>左方有個螺絲起子，點開來就能選取 IDE 所建議的重構方式</p><p><a href="https://i.imgur.com/DTFh2oF.gif" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/DTFh2oF.gif" class="lazyload"></a></p><p>重構後不影響整體行為，還有剛剛 WriteLine 更改成 Write 的效果也一併在這呈現</p><p><a href="https://i.imgur.com/1kB0Cym.gif" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/1kB0Cym.gif" class="lazyload"></a></p><h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>今天就寫到這邊，之後會繼續跟著官方文檔的其他篇幅來實作，一方面是精進 Visual Studio 的寫 code 技巧，也更多的去了解 C# 的 class 或核心模組，目標是要將 SOLID 給理解的更透徹，這篇寫的 code 當然完全沒有去管那些原則 XD，還有最終目標就是要能寫單元測試，了解什麼樣是可測試的 code</p></body></html>]]></content>
      
      
      <categories>
          
          <category> w3HexSchool </category>
          
          <category> C# </category>
          
      </categories>
      
      
        <tags>
            
            <tag> w3HexSchool </tag>
            
            <tag> C# </tag>
            
            <tag> Visual Studio </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue 子組件更新父組件資料 - 特別篇，provide / inject</title>
      <link href="/2020/02/16/2020-vue-component-provide-inject/"/>
      <url>/2020/02/16/2020-vue-component-provide-inject/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><p>Hi，大家好，我是小馬彬，前兩篇展示了子組件如何有效的將資料更新回父組件，如果還沒看過各種不同的父子組件溝通的方式，可以先看看上一篇『<a href="https://littlehorseboy.github.io/2020/02/08/2020-vue-component-v-model-part2/">Vue 子組件更新父組件資料的『五種』方式（Part 2）</a>』，這篇要來介紹 provide / inject，它主要的功能就是能讓跨組件的資料傳遞更為方便</p><p>如果子組件想要得到父組件的資料，就得用 props 來接，那如果得跨越很多層才到目標的組件，那中間每一層組件都得寫上 props 的程式碼來向下傳，有時候就會覺得中間的組件明明沒用到，程式碼已經一大堆，卻又要每一個都多補上這一段實在很不划算</p><h2 id="一般-props-的方式向子組件傳遞資料"><a href="#一般-props-的方式向子組件傳遞資料" class="headerlink" title="一般 props 的方式向子組件傳遞資料"></a>一般 props 的方式向子組件傳遞資料</h2><p>那麼今天<strong>曾祖父組件</strong>的資料，要讓子組件來使用呢？</p><p>曾祖父 -> 祖父 -> 父 -> 子</p><p>假使 Vue 專案為以下的結構</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">plaintext</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">app</span><br><span class="line">├── pages</span><br><span class="line">│   └── Page.vue           (曾祖父)</span><br><span class="line">├── components</span><br><span class="line">│   ├── ListContainer.vue  (祖父)</span><br><span class="line">│   ├── ListSection.vue    (父)</span><br><span class="line">│   └── List.vue           (子)</span><br><span class="line">└── App.vue</span><br></pre></td></tr></tbody></table></figure></div><p>曾祖父組件準備了資料 list，而後交給了祖父組件</p><p><em>Page.vue</em></p><p><a href="https://i.imgur.com/bqkTJZH.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/bqkTJZH.png" class="lazyload"></a></p><p>祖父組件拿到了 list 資料，再轉交給父組件</p><p><em>Page.vue</em><br>↓<br><em>ListContainer.vue</em></p><p><a href="https://i.imgur.com/6pVwMFh.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/6pVwMFh.png" class="lazyload"></a></p><p>父組件拿到了 list 資料，最後的轉交給了子組件</p><p><em>Page.vue</em><br>↓<br><em>ListContainer.vue</em><br>↓<br><em>ListSection.vue</em></p><p><a href="https://i.imgur.com/TC2gIpP.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/TC2gIpP.png" class="lazyload"></a></p><p>子組件終於得到了 list，可以來把資料列舉出來</p><p><em>Page.vue</em><br>↓<br><em>ListContainer.vue</em><br>↓<br><em>ListSection.vue</em><br>↓<br><em>List.vue</em></p><p><a href="https://i.imgur.com/6lRGYFj.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/6lRGYFj.png" class="lazyload"></a></p><p>曾祖父所傳達的東西意境深遠，看來是想要告訴我要享受當下，亦或是我們家族有個仇人叫東東？</p><p><a href="https://i.imgur.com/YcyS8Ex.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/YcyS8Ex.png" class="lazyload"></a></p><hr><h2 id="用-provide-inject-來向子組件傳遞資料"><a href="#用-provide-inject-來向子組件傳遞資料" class="headerlink" title="用 provide / inject 來向子組件傳遞資料"></a>用 provide / inject 來向子組件傳遞資料</h2><p>回到 Vue，現在筆者不想要經過這麼多組件才能得到 list，這時就能用上 provide / inject 的方式來傳遞</p><p>專案結構與剛剛一樣</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">plaintext</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">app</span><br><span class="line">├── pages</span><br><span class="line">│   └── Page.vue</span><br><span class="line">├── components</span><br><span class="line">│   ├── ListContainer.vue</span><br><span class="line">│   ├── ListSection.vue</span><br><span class="line">│   └── List.vue</span><br><span class="line">└── App.vue</span><br></pre></td></tr></tbody></table></figure></div><p><em>Page.vue</em></p><p>將 this.list 裝到 <code>provide()</code> 中</p><p><a href="https://i.imgur.com/lDEEshX.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/lDEEshX.png" class="lazyload"></a></p><p>這樣資料就能讓子組件輕鬆的拿到</p><p>以下 ListContainer.vue 及 ListSection.vue 就沒有寫任何 props</p><p><em>ListContainer.vue</em></p><p><a href="https://i.imgur.com/NEpYB8m.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/NEpYB8m.png" class="lazyload"></a></p><p><em>ListSection.vue</em></p><p><a href="https://i.imgur.com/d9aSZYP.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/d9aSZYP.png" class="lazyload"></a></p><p>最後 List.vue 直接 <code>inject</code> list 進來就能直接使用囉</p><p><em>List.vue</em></p><p><a href="https://i.imgur.com/Dsx81bm.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/Dsx81bm.png" class="lazyload"></a></p><p>最後的畫面跟剛剛的一樣</p><p><a href="https://i.imgur.com/YcyS8Ex.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/YcyS8Ex.png" class="lazyload"></a></p><hr><p>只要在較上層的組件中用 provide() 裝資料，這樣不管經過了幾代的子組件，都能直接用 inject，就能將上層組件的 provide() 提供的資料拿到手</p><p>這邊要注意的是，這種傳資料方式，就沒有強制型別的宣告了，所以使用上要特別小心，筆者其實也很少用到，是剛好有次因為組件都已經分散得七零八落，需要傳遞很多層才到子組件，就要多寫很多 props 的程式碼，就偷懶用了這個 XD</p><h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>筆者認為一定要非常確定這個資料僅僅是在這個 page 中獨立使用（或是一個完全獨立可拆分的複雜組件），才適合 provide / inject，如果胡亂使用反而可能會造成維護較困難的情況，或是使用的目的會被混淆，不過當然可以透過變數命名改善 XD，如果是更多更多 page 要共用數據，還是會比較建議用 Vuex，在撰寫跟後續維護上會比較容易得到可預期的結果</p></body></html>]]></content>
      
      
      <categories>
          
          <category> w3HexSchool </category>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> w3HexSchool </tag>
            
            <tag> vue </tag>
            
            <tag> component </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue 子組件更新父組件資料的『五種』方式（Part 2）</title>
      <link href="/2020/02/08/2020-vue-component-v-model-part2/"/>
      <url>/2020/02/08/2020-vue-component-v-model-part2/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><p>Hi，大家好，我是小馬彬，延續上一篇紀錄 Vue 的 Component 在 props 到子組件時，如何有效的更新 props 回到父組件，如果還沒看過基本的兩種父子組件溝通的方式，可以先看看上一篇『<a href="https://littlehorseboy.github.io/2020/02/02/2020-vue-component-v-model-part1/">Vue 子組件更新父組件資料的『五種』方式（Part 1）</a>』，這篇要來繼續把剩下的三種方式補完，其實可以都算是從基礎的方式衍生下來的，包括下一篇可能會介紹到的 provide / inject，都可以用類似的概念去理解，好，就來開始介紹組件溝通的不同方式吧！</p><h2 id="3-父組件在使用子組件時寫上-sync"><a href="#3-父組件在使用子組件時寫上-sync" class="headerlink" title="3. 父組件在使用子組件時寫上 .sync"></a>3. 父組件在使用子組件時寫上 .sync</h2><p>.sync 是在 Vue 2.3.0+ 時新增的，筆者認為主要是想要讓子組件在更新父組件時，能夠用一個好閱讀並理解的更新 props 的事件，假使我用 <code><child :title.sync="value"></child></code> 將值用這種方式傳遞給 Child，那我就可以直接在 Child 組件裡面直接使用 <code>this.$emit('update:title', newTitle)</code> 這種方式來改變父組件資料，這樣就能一眼看出 $emit 是更新了哪一個 props，這是 Vue 後來推出的方式</p><h5 id="子組件-InputThree-vue"><a href="#子組件-InputThree-vue" class="headerlink" title="子組件 InputThree.vue"></a>子組件 InputThree.vue</h5><p><a href="https://i.imgur.com/bPQaUWi.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/bPQaUWi.png" class="lazyload"></a></p><h5 id="父組件-Home-vue"><a href="#父組件-Home-vue" class="headerlink" title="父組件 Home.vue"></a>父組件 Home.vue</h5><p><a href="https://i.imgur.com/PlIMbhL.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/PlIMbhL.png" class="lazyload"></a></p><p>在父組件直接使用 <code>:innputValue.sync="inputValue"</code>，子組件就會有對應的事件 <code>update:inputValue</code></p><p>.sync 語法糖轉換後的寫法是這樣</p><p><a href="https://i.imgur.com/y4U9aOD.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/y4U9aOD.png" class="lazyload"></a></p><p><a href="https://i.imgur.com/7vOPmiB.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/7vOPmiB.png" class="lazyload"></a></p><h5 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h5><p><a href="https://i.imgur.com/VHxJw0P.gif" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/VHxJw0P.gif" class="lazyload"></a></p><h2 id="4-父組件使用-v-model，子組件使用-emit"><a href="#4-父組件使用-v-model，子組件使用-emit" class="headerlink" title="4. 父組件使用 v-model，子組件使用 $emit"></a>4. 父組件使用 v-model，子組件使用 $emit</h2><p>這裡要展示 <code><child v-model="value"></child></code> 的使用方式，首先要先知道 <code>v-model</code> 這個語法糖的意義</p><p><code>v-model="inputValue"</code></p><p>v-model 會轉成 :value 及 @input 互相搭配，如下</p><p><code>:value="inputValue" @input="inputValue = $event"</code></p><p>通常是給 input 使用，所以使用在父子組件溝通上，筆者覺得算是特殊的用法</p><h5 id="子組件-InputFive-vue"><a href="#子組件-InputFive-vue" class="headerlink" title="子組件 InputFive.vue"></a>子組件 InputFive.vue</h5><p><a href="https://i.imgur.com/pIsgqU7.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/pIsgqU7.png" class="lazyload"></a></p><h5 id="父組件-Home-vue-1"><a href="#父組件-Home-vue-1" class="headerlink" title="父組件 Home.vue"></a>父組件 Home.vue</h5><p><a href="https://i.imgur.com/or9mfu3.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/or9mfu3.png" class="lazyload"></a></p><p>v-model 語法糖轉換後的寫法是這樣</p><p><a href="https://i.imgur.com/W7x8Heo.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/W7x8Heo.png" class="lazyload"></a></p><p><a href="https://i.imgur.com/M50u33c.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/M50u33c.png" class="lazyload"></a></p><h5 id="demo-1"><a href="#demo-1" class="headerlink" title="demo"></a>demo</h5><p><a href="https://i.imgur.com/xvIfP3b.gif" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/xvIfP3b.gif" class="lazyload"></a></p><h2 id="5-父組件使用-v-model，子組件用-computed-v-model"><a href="#5-父組件使用-v-model，子組件用-computed-v-model" class="headerlink" title="5. 父組件使用 v-model，子組件用 computed + v-model"></a>5. 父組件使用 v-model，子組件用 computed + v-model</h2><p>這又是更變形的做法，利用 computed 的 get、set 將改動值時的結果傳回父組件</p><h5 id="子組件-InputSeven-vue"><a href="#子組件-InputSeven-vue" class="headerlink" title="子組件 InputSeven.vue"></a>子組件 InputSeven.vue</h5><p><a href="https://i.imgur.com/1xij7lg.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/1xij7lg.png" class="lazyload"></a></p><h5 id="父組件-Home-vue-2"><a href="#父組件-Home-vue-2" class="headerlink" title="父組件 Home.vue"></a>父組件 Home.vue</h5><p><a href="https://i.imgur.com/j0Q4vsI.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/j0Q4vsI.png" class="lazyload"></a></p><h5 id="demo-2"><a href="#demo-2" class="headerlink" title="demo"></a>demo</h5><p><a href="https://i.imgur.com/UeUU2ae.gif" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/UeUU2ae.gif" class="lazyload"></a></p><hr><p>以上的父子組件溝通都是在傳遞 String，如果是在傳遞 Array 或是 Object 時，就得更加小心，因為傳址及傳值的差異，一不小心可能會造成無法預期的結果出現，這五種，我想我最推薦的應該會是第三種 .sync 的方式，語意上比較明瞭</p><p>之後應該還會講到 provide / inject，讓父子組件的溝通在跨更多層的情形，能更方便的傳遞要使用的數據</p></body></html>]]></content>
      
      
      <categories>
          
          <category> w3HexSchool </category>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> w3HexSchool </tag>
            
            <tag> vue </tag>
            
            <tag> component </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue 子組件更新父組件資料的『五種』方式（Part 1）</title>
      <link href="/2020/02/02/2020-vue-component-v-model-part1/"/>
      <url>/2020/02/02/2020-vue-component-v-model-part1/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><p>Hi，大家好，我是小馬彬，這篇是想要紀錄 Vue 的 Component 在 props 到子組件時，如何有效的更新 props 回到父組件，雖然可以單純的說，就是要從父組件對子組件傳一個可以更新 data 的 function 綁到子組件上，只是 Vue 的語法糖實在太多了阿，一開始看到還真是搞混我，最後總共歸納有五種可變的方式用來讓父子組件溝通屬性</p><h2 id="1-父組件定義更新-data-的-method-直接傳給子組件使用（官方不推薦）"><a href="#1-父組件定義更新-data-的-method-直接傳給子組件使用（官方不推薦）" class="headerlink" title="1. 父組件定義更新 data 的 method 直接傳給子組件使用（官方不推薦）"></a>1. 父組件定義更新 data 的 method 直接傳給子組件使用（官方不推薦）</h2><p>第一種在 React 是非常常見的更新父組件 data 的方式，不過 Vue 官方並 <code>不推薦</code> 用這種方式</p><h4 id="子組件-Input-vue"><a href="#子組件-Input-vue" class="headerlink" title="子組件 Input.vue"></a>子組件 Input.vue</h4><p>接取父組件的 value 及更新父組件 data 的 Function</p><p><a href="https://i.imgur.com/KO8umuN.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/KO8umuN.png" class="lazyload"></a></p><h4 id="父組件-Home-vue"><a href="#父組件-Home-vue" class="headerlink" title="父組件 Home.vue"></a>父組件 Home.vue</h4><p>在這裡 import Component Input.vue，直接對它 props 更新 data 的 Function，這是 React 最常見的用法，不過 React 比起 Vue 語法糖數量實在少太多了，對一個 Component 的 data(state) 渲染機制也有些微的差異，總之在 Vue 是比較 <code>不推薦</code> 這樣子的寫法</p><p><a href="https://i.imgur.com/UJFAQhu.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/UJFAQhu.png" class="lazyload"></a></p><p>Vue <code>不推薦</code> 這樣子的寫法來傳遞更新 data 的事件 <code>:handleInputValue="handleInputValue"</code><br><a href="https://i.imgur.com/MBETGZ2.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/MBETGZ2.png" class="lazyload"></a></p><h4 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h4><p><a href="https://i.imgur.com/3XxNglE.gif" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/3XxNglE.gif" class="lazyload"></a></p><h2 id="2-父組件綁定-method-到子組件上，子組件使用-emit（官方推薦）"><a href="#2-父組件綁定-method-到子組件上，子組件使用-emit（官方推薦）" class="headerlink" title="2. 父組件綁定 method 到子組件上，子組件使用 $emit（官方推薦）"></a>2. 父組件綁定 method 到子組件上，子組件使用 <code>$emit</code>（官方推薦）</h2><h4 id="子組件-InputTwo-vue"><a href="#子組件-InputTwo-vue" class="headerlink" title="子組件 InputTwo.vue"></a>子組件 InputTwo.vue</h4><p>直接使用 <code>@input="$emit('handleInputValue', $event.target.value)"</code></p><p><a href="https://i.imgur.com/cP0xn45.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/cP0xn45.png" class="lazyload"></a></p><h4 id="父組件-Home-vue-1"><a href="#父組件-Home-vue-1" class="headerlink" title="父組件 Home.vue"></a>父組件 Home.vue</h4><p>用 <code>@handleInputValue="handleInputValue"</code> 掛上事件給子組件</p><p><a href="https://i.imgur.com/nQ4yta1.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/nQ4yta1.png" class="lazyload"></a></p><p>Vue <code>推薦</code> 這樣子的寫法來傳遞更新 data 的事件 <code>@handleInputValue="handleInputValue"</code><br><a href="https://i.imgur.com/2ml6hhu.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/2ml6hhu.png" class="lazyload"></a></p><h4 id="demo-1"><a href="#demo-1" class="headerlink" title="demo"></a>demo</h4><p><a href="https://i.imgur.com/zYc4Evp.gif" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/zYc4Evp.gif" class="lazyload"></a></p><p>今天就先介紹最基本的兩種就好，下一篇會再繼續介紹其他語法糖來達成父子組件溝通，直接破梗，就是 .aync 或是 v-model，也是直接對 Component 掛上去使用的寫法</p><p>下集待續</p></body></html>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> component </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Javascript 的 Boolean 居然能這樣用（搭配 Array）</title>
      <link href="/2020/01/24/2020-Javascript-Array-and-Boolean/"/>
      <url>/2020/01/24/2020-Javascript-Array-and-Boolean/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><p>Hi，大家新年快樂，我是小馬彬，趁著除夕夜深人靜時來把最近發現的特別 JS 用法整理一下，Javascript 的 Boolean 居然能夠直接用在 Array.filter() 內的函式</p><h2 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">'1'</span>, <span class="string">''</span>, <span class="string">'3'</span>].filter(<span class="built_in">Boolean</span>); <span class="comment">// ['1', '3']</span></span><br><span class="line"><span class="comment">// 等同於</span></span><br><span class="line">[<span class="string">'1'</span>, <span class="string">''</span>, <span class="string">'3'</span>].filter(<span class="function">(<span class="params">item</span>) =></span> item); <span class="comment">// ['1', '3']</span></span><br><span class="line"><span class="comment">// 亦或是</span></span><br><span class="line">[<span class="string">'1'</span>, <span class="string">''</span>, <span class="string">'3'</span>].filter(<span class="function">(<span class="params">item</span>) =></span> <span class="built_in">Boolean</span>(item)); <span class="comment">// ['1', '3']</span></span><br></pre></td></tr></tbody></table></figure></div><p><a href="https://i.imgur.com/Wg0qt7l.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/Wg0qt7l.png" class="lazyload"></a></p><p>這樣就能少打一點點字，而且好像在程式碼閱讀上也算更直觀（前提是理解可以這樣用的情況下，不然一開始我看到的時候真的黑人問號），用來排除 <code>false, null, undefined, 0, NaN, ''</code></p><p><a href="https://i.imgur.com/ztcjBAV.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/ztcjBAV.png" class="lazyload"></a></p><p>順便好奇其他常用的 Array 函式在遇到 Boolean 會發生什麼事</p><h2 id="map"><a href="#map" class="headerlink" title="map"></a>map</h2><p>遇到 map 就會轉成 true 或 false</p><p><a href="https://i.imgur.com/SWJQcuV.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/SWJQcuV.png" class="lazyload"></a></p><h2 id="find"><a href="#find" class="headerlink" title="find"></a>find</h2><p>遇到 find 就會取得第一個比對後產生 true 的值</p><p><a href="https://i.imgur.com/RNTbcjY.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/RNTbcjY.png" class="lazyload"></a></p><h2 id="findIndex"><a href="#findIndex" class="headerlink" title="findIndex"></a>findIndex</h2><p>遇到 findIndex 就會取得第一個比對後產生 true 的 index</p><p><a href="https://i.imgur.com/JUR615T.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/JUR615T.png" class="lazyload"></a></p><h2 id="every"><a href="#every" class="headerlink" title="every"></a>every</h2><p>every 比對陣列內要全為 true，否則為 false</p><p><a href="https://i.imgur.com/Z1A4SMg.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/Z1A4SMg.png" class="lazyload"></a></p><h2 id="some"><a href="#some" class="headerlink" title="some"></a>some</h2><p>some 只要一個值為 true，最終就會回傳 true</p><p><a href="https://i.imgur.com/0ZaPT0Z.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/0ZaPT0Z.png" class="lazyload"></a></p><p>大略拿了一些可能會真實用得上的 Array 函式來寫</p><hr><p>以上就是發現 Boolean 居然能這樣用 filter，檢驗過後覺得似乎真的可以當不錯的簡寫方式，寫這篇時又突然一個想到還能夠搭配不同的 Array 函式，如果你很常用預設的寫法來判斷 <code>false, null, undefined, 0, NaN, ‘’</code>，那可能就可以考慮用這個 Boolean 來縮短一點點程式碼</p></body></html>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nuxt.js 利用 serverMiddleware 讓 page.vue 接 POST 來的資料</title>
      <link href="/2020/01/15/2020-nuxt-serverMiddleware/"/>
      <url>/2020/01/15/2020-nuxt-serverMiddleware/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><p>Hi，大家好，我是小馬彬，最近在公司都在玩 Nuxt.js，其實得說大部分的需求在官方文檔上都能找到解方，主要要區分好組件生命週期是後端渲染的部分還是前端渲染的部分，不過這次會寫這篇的主要目的就是因為標題上的敘述</p><blockquote><p>需求是想要讓某個 page 能夠接到從其他頁面的表單 POST 送出跳轉過來的資料</p></blockquote><hr><h2 id="2020-1-16-修正-2020-1-15-所述內容"><a href="#2020-1-16-修正-2020-1-15-所述內容" class="headerlink" title="2020/1/16 修正 2020/1/15 所述內容"></a>2020/1/16 修正 2020/1/15 所述內容</h2><p>其實可以直接用 Nuxt 提供的 context 來得到 POST 來的資料，根本不必特別玩 serverMiddleware 啦，不過就當補充知識吧！</p><p>直接在 pages/index.vue 即可</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">asyncData</span>(<span class="params">{ req }</span>)</span> {</span><br><span class="line">  <span class="built_in">console</span>.log(req.body);</span><br><span class="line">},</span><br></pre></td></tr></tbody></table></figure></div><hr><h2 id="以下為-2020-1-15-撰寫"><a href="#以下為-2020-1-15-撰寫" class="headerlink" title="以下為 2020/1/15 撰寫"></a>以下為 2020/1/15 撰寫</h2><p>起初還以為可以直接利用 Nuxt 提供的 context 來得到 POST 來的資料</p><p><a href="https://i.imgur.com/oasAHFN.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/oasAHFN.png" class="lazyload"></a></p><p>但是</p><p><strong>想得太美了！</strong></p><p>把這幾個看起來比較有可能跟接 POST 資料有關的 req, res 都 console 出來，結果是偏尋不著，原來還是得特別跟 node.js 打打交道</p><p>後來 google 到 serverMiddleware 這個解方，它可以將一隻類似 node.js http.createServer 的 function 掛給某一個 path 來使用</p><hr><h2 id="serverMiddleware"><a href="#serverMiddleware" class="headerlink" title="serverMiddleware"></a>serverMiddleware</h2><p>筆者當初創建 Nuxt 專案時沒有使用 express，所以以下紀錄的方式是一般的 node.js 使用方式</p><p>首先</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i querystring</span><br></pre></td></tr></tbody></table></figure></div><p>要利用 querystring 這個第三方函式庫來 parse 其他頁面所 POST 來的資料</p><p>創建一隻 js</p><p>~/middleware/postRequestHandler.js</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> querystring = <span class="built_in">require</span>(<span class="string">'querystring'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> (req, res, next) => {</span><br><span class="line">  <span class="keyword">let</span> body = <span class="string">''</span>;</span><br><span class="line"></span><br><span class="line">  req.on(<span class="string">'data'</span>, <span class="function">(<span class="params">data</span>) =></span> {</span><br><span class="line">    body += data;</span><br><span class="line">  });</span><br><span class="line"></span><br><span class="line">  req.on(<span class="string">'end'</span>, <span class="function">() =></span> {</span><br><span class="line">    req.body = querystring.parse(body) || {};</span><br><span class="line">    next();</span><br><span class="line">  });</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure></div><p>這段程式碼做的事情是讓接到 request 的時候，將 data 給塞進 req.body 中，body 的部分得依靠第三方函式 querystring.parse 過才能正常，就像使用 express 時也會用到 bodyParser.json() 來將 POST 資料 parse 過</p><p>然後要特別的到 nuxt.config.js 來設定 serverMiddleware</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">serverMiddleware: [</span><br><span class="line">  {</span><br><span class="line">    <span class="attr">path</span>: <span class="string">'/'</span>, <span class="attr">handler</span>: <span class="string">'~/middleware/postRequestHandler'</span>,</span><br><span class="line">  },</span><br><span class="line">],</span><br></pre></td></tr></tbody></table></figure></div><p>這樣在 pages/index.vue 中就能直接利用 asyncData 來取得 req.body 的內容</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">asyncData</span>(<span class="params">{ req }</span>)</span> {</span><br><span class="line">  <span class="built_in">console</span>.log(req.body.abc);</span><br><span class="line">},</span><br></pre></td></tr></tbody></table></figure></div><p>這邊接 abc 是因為筆者用 Postman 測試發 request 的測試資料就是 abc: 123 到我的 <code>/</code> path</p><p>這樣就能正常取得 POST 來的資料了</p><hr><p>回到 nuxt.config.js 的 serverMiddleware 的配置，似乎一個 path 只能配一個 handler，除了一些特殊的第三方函式庫，因為筆者有試著將不同 path 接同一個 handler 或是將 path 改用正規表示法來寫，似乎都只有第一個 path 會生效，而且還可能會讓第二個 path 直接當掉，這部分算是還不夠熟悉 Nuxt 的底層，其實也不打算熟悉啦，它蠻多架構的用法有搞清楚是真的省了些麻煩的，不過 google 了一下也沒看到有人用多個 path 給同一隻 handler 用，就當作它只能一個配一個吧！</p></body></html>]]></content>
      
      
      <categories>
          
          <category> nuxt </category>
          
          <category> serverMiddleware </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nuxt </tag>
            
            <tag> serverMiddleware </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最近讀完了一本 UX 的新手書（不是分享 XD）</title>
      <link href="/2020/01/06/2020-ux-beginner-100/"/>
      <url>/2020/01/06/2020-ux-beginner-100/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><p>Hi，大家好，我是小馬彬，標題的部分其實是一本書名的一半，最近筆者讀完了這一本書，「UX 從新手開始 使用者體驗的 100 堂必修課」，既然讀完了，就打算要來好好地整理一下讀書心得，才怪~，讀書心得有點太麻煩了，接下來是想要依照這本書提供給我的一些啟發，來歸納一下要繼續向 UX 邁進的話該走哪些大方向。</p><h2 id="使用者心理學"><a href="#使用者心理學" class="headerlink" title="使用者心理學"></a>使用者心理學</h2><ul><li>非常複雜，還無法歸納出心法，得吸收更多知識</li></ul><h2 id="可用性心理學"><a href="#可用性心理學" class="headerlink" title="可用性心理學"></a>可用性心理學</h2><ul><li>簡單說成是流程設計的清楚又直接</li></ul><h2 id="文案撰寫"><a href="#文案撰寫" class="headerlink" title="文案撰寫"></a>文案撰寫</h2><ul><li>一些文章寫手，小編等等這類人的專業，也是吸引人群閱讀的關鍵之一</li></ul><h2 id="使用者研究"><a href="#使用者研究" class="headerlink" title="使用者研究"></a>使用者研究</h2><ul><li>如何問問題？</li><li>如何觀察？分析？</li><li>問卷調查？</li><li>personas？</li></ul><h2 id="資訊架構"><a href="#資訊架構" class="headerlink" title="資訊架構"></a>資訊架構</h2><h2 id="UserStory"><a href="#UserStory" class="headerlink" title="UserStory"></a>UserStory</h2><h2 id="Functional-Map"><a href="#Functional-Map" class="headerlink" title="Functional Map"></a>Functional Map</h2><h2 id="線框圖"><a href="#線框圖" class="headerlink" title="線框圖"></a>線框圖</h2><h2 id="原型"><a href="#原型" class="headerlink" title="原型"></a>原型</h2><h2 id="設計模式"><a href="#設計模式" class="headerlink" title="設計模式"></a>設計模式</h2><h2 id="視覺設計"><a href="#視覺設計" class="headerlink" title="視覺設計"></a>視覺設計</h2><h2 id="統計數據"><a href="#統計數據" class="headerlink" title="統計數據"></a>統計數據</h2><h2 id="A-B-測試"><a href="#A-B-測試" class="headerlink" title="A/B 測試"></a>A/B 測試</h2><p>以上雖然洋洋灑灑列了一大堆，不過筆者會最先動作的部分應該是 UserStory  及其周遭的硬底子規劃知識相關，還有繪製成線框圖的部分，後續如果還有什麼心得也可能會再填到這篇文中，也可能不會 XD</p></body></html>]]></content>
      
      
      <categories>
          
          <category> UX </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UX </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>新年快樂，不過卻臥病在床的度過</title>
      <link href="/2020/01/01/2020-happy-new-year/"/>
      <url>/2020/01/01/2020-happy-new-year/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h3 id="大家好啊，新年快樂"><a href="#大家好啊，新年快樂" class="headerlink" title="大家好啊，新年快樂"></a>大家好啊，新年快樂</h3><p>新年的第一篇文章不是寫技術相關的內容，只是剛好筆者因為牙痛從隱隱作痛到劇烈疼痛至頭昏無力，突然好像能理解什麼是久病不起，或者是臥病在床的感受，後續會以一種日記的方式，寫下環繞著牙痛帶來了多少的麻煩</p><h3 id="2019-12-28"><a href="#2019-12-28" class="headerlink" title="2019-12-28"></a>2019-12-28</h3><p>這天筆者去參加了台中敏捷之旅，敏捷的核心概念；TDD 的實戰，先開測試項目，而後利用 IDE 的功能直接從測試的函式中建立類別，然後還有一大堆 OOP 的重構技術，看得眼花撩亂，有機會的話一定要學看看；下午場是一個扮演業者及智囊團的工作坊，傾聽業者想要解決企業或團隊的迫切想要解決的問題，然後透過一群智囊團提出建議，還有卡牌能夠輔助（上頭寫著一些大方向），講者們也提及了他們在自己的團隊之中推動這些概念，持續改善，遇到的阻礙等等的心得，還有提及 Working Agreement 的訂定，制定一些團隊守則，必須遵照的原則等等，像是要不要寫 unit test 之類的</p><p>好像還是跟技術有一點點相關呢，回到牙痛，發現牙痛的時機，就在最後的點心時間過後有感 XD，雖然這時很輕微，不以為意，晚上吃宵夜時，疼痛感又再加重，導致食慾普普</p><h3 id="2019-12-29"><a href="#2019-12-29" class="headerlink" title="2019-12-29"></a>2019-12-29</h3><p>很一般的禮拜日，這時疼痛感都還蠻輕微的，所以也都不太在意，也可能是自己太會安慰自己 XD，到了晚上才發現智齒旁邊的牙肉已經腫了一大包，不過是禮拜日，也只能忍到明天下班後才能去看牙醫了</p><h3 id="2019-12-30"><a href="#2019-12-30" class="headerlink" title="2019-12-30"></a>2019-12-30</h3><p>忍著牙痛撐完了一整天上班時間，真佩服我自己 XD，下班後就去看了牙醫，此時身體狀況已經又累又無力又牙疼，洗牙過程…更痛啊，也順便安排下次要來拔掉智齒一勞永逸</p><h3 id="2019-12-31"><a href="#2019-12-31" class="headerlink" title="2019-12-31"></a>2019-12-31</h3><p>今天一早醒來，就有一種暈眩感，不知道是因為牙齒痛太痛，還是因為牙痛所引發的發燒及全身無力所導致的，總之我是奮力的到了公司，但待了一小時後就決定請病假回家，完全沒辦法專注，感覺真的比想像中還嚴重，一回到家就直接躺，中間有醒來卻也沒體力起身，又繼續睡下去，真的蠻扯的，一躺就直接躺到隔天早上，還好元旦放假，也代表我犧牲了一次跨年娛樂活動 XD</p><h3 id="2020-01-01"><a href="#2020-01-01" class="headerlink" title="2020-01-01"></a>2020-01-01</h3><p>昨天整整躺了一天，真的認真體會到什麼是久病不起，或是臥病在床的感受，那些病人真是辛苦了，起床後似乎還是有些許的暈眩及無力，不過算是好非常多了，至少可以出個門買食物回來</p><h3 id="感想"><a href="#感想" class="headerlink" title="感想"></a>感想</h3><p>預防勝於治療，明明有注意到智齒長歪，又容易卡食物渣，早就該去拔掉，拖到了這種爆發的情形真是得不償失，整個好幾天都籠罩在不舒服的感覺之中，而且其中還有一整天是臥病在床沒起來過，躺在床上嚮往著自由，卻無力實現，牙痛真的是蠻可怕的</p></body></html>]]></content>
      
      
      
        <tags>
            
            <tag> 心路歷程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP 開發環境還有一個重要的東西還沒裝，那就是 Composer</title>
      <link href="/2019/12/11/composer-setup/"/>
      <url>/2019/12/11/composer-setup/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h2 id="Composer-下載"><a href="#Composer-下載" class="headerlink" title="Composer 下載"></a>Composer 下載</h2><p>首先進入這一頁</p><p><a href="https://getcomposer.org/download/">https://getcomposer.org/download/</a></p><p>因為筆者是 Windows 作業系統，所以找到 Windows 下載相關就直接點下去</p><p><a href="https://i.imgur.com/gSh9apw.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/gSh9apw.png" class="lazyload"></a></p><h2 id="Composer-安裝"><a href="#Composer-安裝" class="headerlink" title="Composer 安裝"></a>Composer 安裝</h2><p>安裝過程因為沒截到省略了 XD，簡單說就是點開安裝程式慢慢的點下一步（說明要看阿，雖然都沒有改動任何東西），中間有一個步驟會要指定你的 php.exe 路徑（自動會抓到），所以一定要先有載 PHP</p><p><a href="https://i.imgur.com/3jmYyNY.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/3jmYyNY.png" class="lazyload"></a></p><p>指令介面輸入 <code>composer</code> 檢查看看是否安裝成功</p><p><a href="https://i.imgur.com/D6FK3WN.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/D6FK3WN.png" class="lazyload"></a></p><p>成功！</p></body></html>]]></content>
      
      
      <categories>
          
          <category> composer </category>
          
          <category> php </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php </tag>
            
            <tag> composer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>設定 Xdebug，最後用 VSCode 的偵錯工具啟動</title>
      <link href="/2019/12/09/xdebug-vscode-setup/"/>
      <url>/2019/12/09/xdebug-vscode-setup/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h2 id="Xdebug-下載"><a href="#Xdebug-下載" class="headerlink" title="Xdebug 下載"></a>Xdebug 下載</h2><p>首先進入這一頁</p><p><a href="https://xdebug.org/wizard">https://xdebug.org/wizard</a></p><p><a href="https://i.imgur.com/sbslusN.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/sbslusN.png" class="lazyload"></a></p><p>將 phpinfo() 的內容全選複製貼到那個 textarea 之中，然後按下 Analyse</p><p><a href="https://i.imgur.com/jJ7tG3M.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/jJ7tG3M.png" class="lazyload"></a></p><p>這時檢測完各種版本號後，跟著最底下的使用說明動手做</p><p><a href="https://i.imgur.com/4gRPh6Z.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/4gRPh6Z.png" class="lazyload"></a></p><p><a href="https://i.imgur.com/hOKZoma.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/hOKZoma.png" class="lazyload"></a></p><p>1 ~ 2 下載然後丟到 ext 資料夾</p><p>3 要你修改 php.ini</p><p>但是還要再多補幾行</p><p><a href="https://i.imgur.com/ZAa0MGJ.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/ZAa0MGJ.png" class="lazyload"></a></p><h2 id="VSCode-偵錯工具啟動"><a href="#VSCode-偵錯工具啟動" class="headerlink" title="VSCode 偵錯工具啟動"></a>VSCode 偵錯工具啟動</h2><p>筆者是用 VSCode，這邊要設定 php.exe 的路徑到 settings.json 裡面</p><p><a href="https://i.imgur.com/m1GxAaR.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/m1GxAaR.png" class="lazyload"></a></p><p>就可以直接利用 VSCode 點個幾下來 debugger 了</p><p><a href="https://i.imgur.com/nL7AJzK.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/nL7AJzK.png" class="lazyload"></a></p><p><a href="https://i.imgur.com/RnwaMh1.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/RnwaMh1.png" class="lazyload"></a></p></body></html>]]></content>
      
      
      <categories>
          
          <category> apache </category>
          
          <category> php </category>
          
          <category> xdebug </category>
          
      </categories>
      
      
        <tags>
            
            <tag> apache </tag>
            
            <tag> php </tag>
            
            <tag> xdebug </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Apache 及 PHP 環境架設</title>
      <link href="/2019/12/09/apache-php-setup/"/>
      <url>/2019/12/09/apache-php-setup/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h2 id="Apache-2-4-41-下載"><a href="#Apache-2-4-41-下載" class="headerlink" title="Apache 2.4.41 下載"></a>Apache 2.4.41 下載</h2><p><a href="https://httpd.apache.org/docs/current/platform/windows.html#down">https://httpd.apache.org/docs/current/platform/windows.html#down</a></p><p><a href="https://i.imgur.com/Sbn80cY.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/Sbn80cY.png" class="lazyload"></a></p><p>載完得到壓縮檔後將 Apache24 的資料夾放在 C:</p><p><a href="https://i.imgur.com/U2ERwQm.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/U2ERwQm.png" class="lazyload"></a></p><h2 id="配置環境變數"><a href="#配置環境變數" class="headerlink" title="配置環境變數"></a>配置環境變數</h2><p><a href="https://i.imgur.com/aemnaIE.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/aemnaIE.png" class="lazyload"></a></p><h2 id="httpd-conf"><a href="#httpd-conf" class="headerlink" title="httpd.conf"></a>httpd.conf</h2><p>這裡要注意 Define SRVROOT 是不是指定著正確的路徑</p><p><a href="https://i.imgur.com/XmzKftK.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/XmzKftK.png" class="lazyload"></a></p><h2 id="將應用程式加進服務"><a href="#將應用程式加進服務" class="headerlink" title="將應用程式加進服務"></a>將應用程式加進服務</h2><p><a href="https://i.imgur.com/uWRdCFY.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/uWRdCFY.png" class="lazyload"></a></p><p>就能直接啟動它了</p><p><a href="https://i.imgur.com/SwkdQoH.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/SwkdQoH.png" class="lazyload"></a></p><p>然後到瀏覽器輸入 localhost 有 Apache Haus 的頁面就表示安裝成功了</p><hr><h2 id="PHP-7-4-0-下載"><a href="#PHP-7-4-0-下載" class="headerlink" title="PHP 7.4.0 下載"></a>PHP 7.4.0 下載</h2><p><a href="https://windows.php.net/download#php-7.4">https://windows.php.net/download#php-7.4</a></p><p><a href="https://i.imgur.com/CNmVXp6.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/CNmVXp6.png" class="lazyload"></a></p><p>在 C: 蓋的資料夾 PHP7.4.0，然後把壓縮檔內容放進去</p><h2 id="配置環境變數-1"><a href="#配置環境變數-1" class="headerlink" title="配置環境變數"></a>配置環境變數</h2><p><a href="https://i.imgur.com/CEox5v5.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/CEox5v5.png" class="lazyload"></a></p><p>就可到 PowerShell 測試 php -v 指令有沒有正常跳出訊息</p><h2 id="httpd-conf-1"><a href="#httpd-conf-1" class="headerlink" title="httpd.conf"></a>httpd.conf</h2><p>增加 php 相關的模組及設定到 httpd.conf</p><p><a href="https://i.imgur.com/zSKM1bJ.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/zSKM1bJ.png" class="lazyload"></a></p><p><a href="https://i.imgur.com/4TeXdSt.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/4TeXdSt.png" class="lazyload"></a></p><p><a href="https://i.imgur.com/rPmuYpr.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/rPmuYpr.png" class="lazyload"></a></p><h2 id="php-ini"><a href="#php-ini" class="headerlink" title="php.ini"></a>php.ini</h2><p>載下來的 php 資料夾內容裡面並沒有 php.ini</p><p>得用 php.ini-development 複製一份來修改檔案名稱</p><p><a href="https://i.imgur.com/uO50PmP.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/uO50PmP.png" class="lazyload"></a></p><p>打開 php.ini 來進行修改</p><p><a href="https://i.imgur.com/FR6tFKx.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/FR6tFKx.png" class="lazyload"></a></p><p><a href="https://i.imgur.com/YAalcTH.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/YAalcTH.png" class="lazyload"></a></p><h2 id="修改-localhost-指的路徑到自己想要存放網站的地方"><a href="#修改-localhost-指的路徑到自己想要存放網站的地方" class="headerlink" title="修改 localhost 指的路徑到自己想要存放網站的地方"></a>修改 localhost 指的路徑到自己想要存放網站的地方</h2><p>開啟 httpd.conf，原本的 ${SRVROOT}/htdocs 改成自己的目錄</p><p><a href="https://i.imgur.com/xdPVNSD.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/xdPVNSD.png" class="lazyload"></a></p><p>這樣就 OK 了，可以去該目錄底下玩一個 index.php 並 <code>echo phpinfo();</code> 來看看</p></body></html>]]></content>
      
      
      <categories>
          
          <category> apache </category>
          
          <category> php </category>
          
      </categories>
      
      
        <tags>
            
            <tag> apache </tag>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>你的觀點 | 使用者觀點（心態）的三個 `What`</title>
      <link href="/2019/12/08/ux-beginner-100-1/"/>
      <url>/2019/12/08/ux-beginner-100-1/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h2 id="LESSON-3-你的觀點"><a href="#LESSON-3-你的觀點" class="headerlink" title="LESSON 3 - 你的觀點"></a>LESSON 3 - 你的觀點</h2><p>UX 設計中，你看待問題的方式能夠成就你的作品，亦可以毀壞你的成果</p><h3 id="同理心"><a href="#同理心" class="headerlink" title="同理心"></a>同理心</h3><p>想要他們想要的東西</p><ul><li>如果你必須在「為使用者準備功能」與「為你的作品集增添設計」之間做選擇，你會怎麼做？</li><li>如果使用者不喜歡你的設計，什麼是可能的原因？</li><li>你實際試用過軟體，或者只是不斷點擊「下一步」，走馬看花？</li></ul><h3 id="你知道太多"><a href="#你知道太多" class="headerlink" title="你知道太多"></a>你知道太多</h3><p>針對知道得比你少的人們做設計</p><ul><li>如果不讀文字，你能夠明白嗎？</li><li>如果只需幾次點擊，使用者就能夠找到他們想要的東西，這樣的設計會不會是你的最佳選擇？</li><li>判斷某個功能是否奠基於建構所需的時間或對使用者的價值？</li><li>你假設只因為它存在，使用者就會點擊它？</li></ul><h2 id="LESSON-4-使用者觀點（心態）的三個-What"><a href="#LESSON-4-使用者觀點（心態）的三個-What" class="headerlink" title="LESSON 4 - 使用者觀點（心態）的三個 What"></a>LESSON 4 - 使用者觀點（心態）的三個 <code>What</code></h2><p>好設計傳達三件事：</p><ol><li>這是什麼？</li><li>使用者的利益為何？</li><li>他們接下來應該做什麼？</li></ol><h3 id="這是什麼？"><a href="#這是什麼？" class="headerlink" title="這是什麼？"></a>這是什麼？</h3><p>網站一進入就要利用簡單的文字或標題或圖像來讓使用者瞭解這個網站是做什麼的</p><h3 id="裡頭有什麼好康？（使用者的利益為何？）"><a href="#裡頭有什麼好康？（使用者的利益為何？）" class="headerlink" title="裡頭有什麼好康？（使用者的利益為何？）"></a>裡頭有什麼好康？（使用者的利益為何？）</h3><p>最好讓使用者看到他們會得到什麼，重要的是你描述裡頭有什麼好康的，而不是你為什麼想要他們註冊／購買／點擊</p><p>使用者動機的價值超過美觀或可用性<code>一千倍</code></p><h3 id="我要做什麼？（他們接下來應該做什麼？）"><a href="#我要做什麼？（他們接下來應該做什麼？）" class="headerlink" title="我要做什麼？（他們接下來應該做什麼？）"></a>我要做什麼？（他們接下來應該做什麼？）</h3><p>如果使用者理解目前的狀況，並且想要瞭解更多，那在設計中，他們的下一步動作應該是很明顯的</p><p>像是 <code>我現在點擊的是什麼？</code> <code>如何註冊？</code> <code>如何入門？</code> <code>如何購買？</code>，由你來決定及釐清使用者可能需要什麼，並且告訴他們如何得到</p></body></html>]]></content>
      
      
      <categories>
          
          <category> UX </category>
          
          <category> ux-beginner-100 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UX </tag>
            
            <tag> ux-beginner-100 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>什麼是 UX？ | UX 的五大成分</title>
      <link href="/2019/12/08/ux-beginner-100/"/>
      <url>/2019/12/08/ux-beginner-100/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h2 id="LESSON-1-什麼是-UX？"><a href="#LESSON-1-什麼是-UX？" class="headerlink" title="LESSON 1 - 什麼是 UX？"></a>LESSON 1 - 什麼是 UX？</h2><p>凡事皆有使用者體驗，你不是要創造使用者體驗，而是要讓它變「好」</p><p>讓使用者有效地完成工作</p><h2 id="LESSON-2-UX-的五大成分"><a href="#LESSON-2-UX-的五大成分" class="headerlink" title="LESSON 2 - UX 的五大成分"></a>LESSON 2 - UX 的五大成分</h2><p>時刻牢記這五件事</p><p><code>心理學</code> <code>可用性</code> <code>設計</code> <code>文案撰寫</code> <code>分析</code></p><ol><li><p>心理學</p><p> 使用者的心態頗為複雜，包括自己也是其中之一。有時候，設計師必須忽略自己的心理感受</p><ul><li>使用者一開始來到這裡的動機是什麼？</li><li>這讓他們感覺如何？</li><li>使用者必須做多少工作才能得到他們想要的東西？</li><li>如果他們一遍又一遍的這樣做，會養成什麼習慣？</li><li>當他們點擊這個東西時，會有什麼期待？</li><li>你是否假設他們知道接下來會發生什麼事情？</li><li>這是他們想要再做的事情嗎？為什麼？多常做？</li><li>你想要的是使用者或你自己的欲求或需求？</li><li>你如何獎勵良好的行為？</li></ul></li><li><p>可用性</p><p> 希望使用者能夠得到下意識且容易的使用體驗，令人困惑就不太適合，除非是為了設計遊戲而製造難度</p><ul><li>能否利用較少的使用者輸入就可以完成工作？</li><li>有任何使用者錯誤是你可以防止的嗎？</li><li>既清楚又直接，還是有點聰明過頭？</li><li>很容易找到（好），很不容易錯過（更好），或者自然而然就會如你預期的那樣做（最好）？</li><li>運作方式符合或違反使用者的假設嗎？</li><li>已經提供使用者需要知道的一切嗎？</li><li>透過比較普遍的做法也能夠解決這件事情嗎？</li><li>你的決策奠基於你自己的邏輯或分類，或者是使用者的直覺？你怎麼知道？</li><li>如果使用者未仔細閱讀說明文字，還是行得通嗎？還是符合常理嗎？</li></ul></li><li><p>設計</p><p> UX 領域中「設計」的定義遠比其他設計師不具藝術性，還有你是否「喜歡它」也並不要緊，UX 領域的設計關乎如何運作，並且是能夠證明的東西</p><ul><li>使用者覺得它看起來不錯？並且立刻獲得使用者的信任？</li><li>無須文字即可清楚地傳達目的與功能？</li><li>表現品牌的風格？感覺有符合整個網站的風格？</li><li>你的設計能夠將使用者的眼光引導到正確的地方？怎麼知道？</li><li>顏色、形狀和排版有助於人們找到他們想要的東西？並且提高細部的可用性？</li><li>可點擊的東西看起來跟不可點擊的東西不同嗎？</li></ul></li><li><p>文案撰寫</p><p> 直接而簡單地將操作體驗描述清楚</p><ul><li>內容明確且自信，清楚地告訴使用者要怎麼做？</li><li>鼓勵使用者完成他們的目標？那是我們想要的嗎？</li><li>花最多的篇幅在最重要的內容嗎？為什麼不是？</li><li>需要告知使用者，或是假設他們已經明白？</li><li>減少使用者的焦慮感？</li><li>清楚、直接、簡單且實用？</li></ul></li><li><p>分析</p><p> 使用者分析</p><ul><li>你有利用資料去證明你是對的，或者去瞭解真相嗎？</li><li>你在尋求主觀意見或客觀事實？</li><li>你已經收集可以提供你那類答案的資訊嗎？</li><li>你知道使用者為什麼那樣做，或者你在解讀他們的行為？</li><li>你看的是絕對的數字，還是相對的改善？</li><li>你會如何衡量這件事？你測量的是正確的東西嗎？</li><li>你是否也在尋找壞的結果？何不呢？</li><li>你如何利用這個分析進行改善？</li></ul></li></ol></body></html>]]></content>
      
      
      <categories>
          
          <category> UX </category>
          
          <category> ux-beginner-100 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UX </tag>
            
            <tag> ux-beginner-100 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nuxt 實作筆記，加上 scss</title>
      <link href="/2019/12/06/nuxt-third/"/>
      <url>/2019/12/06/nuxt-third/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><p>其實有一點簡單，就安裝完直接改 <code>style</code> 即可 XD</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -D node-sass sass-loader</span><br></pre></td></tr></tbody></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">html</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag"><<span class="name">style</span>></span><span class="xml"></span></span><br><span class="line"><span class="xml">/* 增加 lang 屬性 */</span></span><br><span class="line"><span class="xml"><span class="tag"><<span class="name">style</span> <span class="attr">lang</span>=<span class="string">"scss"</span>></span></span></span><br></pre></td></tr></tbody></table></figure></div></body></html>]]></content>
      
      
      <categories>
          
          <category> nuxt </category>
          
          <category> scss </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nuxt </tag>
            
            <tag> scss </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nuxt 實作筆記，掛上 eslint-config-airbnb-base</title>
      <link href="/2019/12/06/nuxt-second/"/>
      <url>/2019/12/06/nuxt-second/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h2 id="首先一定要記得-settings-json-要加入-vue"><a href="#首先一定要記得-settings-json-要加入-vue" class="headerlink" title="首先一定要記得 settings.json 要加入 vue"></a>首先一定要記得 settings.json 要加入 <code>vue</code></h2><p><a href="https://i.imgur.com/QEWfdT7.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/QEWfdT7.png" class="lazyload"></a></p><h2 id="下載-eslint-airbnb-base"><a href="#下載-eslint-airbnb-base" class="headerlink" title="下載 eslint airbnb base"></a>下載 eslint airbnb base</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx install-peerdeps --dev eslint-config-airbnb-base</span><br></pre></td></tr></tbody></table></figure></div><h2 id="修改-eslintrc-js"><a href="#修改-eslintrc-js" class="headerlink" title="修改 .eslintrc.js"></a>修改 .eslintrc.js</h2><p>除了把 airbnb-base 加入 extends 之中</p><p>也必須把 import/no-unresolved 改成 off</p><p>否則 <code>import Logo from '~/components/Logo.vue'</code> 的 ~/ 會被 ESLint 當成有問題的路徑</p><p><a href="https://i.imgur.com/p9MXMYK.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/p9MXMYK.png" class="lazyload"></a></p><h2 id="eslintignore"><a href="#eslintignore" class="headerlink" title=".eslintignore"></a>.eslintignore</h2><p>如果有上傳 dist 資料夾，就是把 .gitignore 的 dist 註解掉</p><p><a href="https://i.imgur.com/U3cdF4u.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/U3cdF4u.png" class="lazyload"></a></p><p>就必須要新增 .eslintignore 來 ignore 掉 dist 資料夾的內容</p><p><a href="https://i.imgur.com/n2yMD35.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/n2yMD35.png" class="lazyload"></a></p><p>package.json 的 scripts 之中的 lint 也要補上 .eslintignore，不然 –ignore-path 寫死的狀況下不會吃沒有寫到的檔案</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">json</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"lint"</span>: <span class="string">"eslint --ext .js,.vue --ignore-path .gitignore .eslintignore"</span>,</span><br></pre></td></tr></tbody></table></figure></div><p><a href="https://i.imgur.com/ujulaDE.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/ujulaDE.png" class="lazyload"></a></p><h2 id="lint"><a href="#lint" class="headerlink" title="lint"></a>lint</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run lint</span><br></pre></td></tr></tbody></table></figure></div><p><a href="https://i.imgur.com/8pBWNbG.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/8pBWNbG.png" class="lazyload"></a></p></body></html>]]></content>
      
      
      <categories>
          
          <category> nuxt </category>
          
          <category> ESLint </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nuxt </tag>
            
            <tag> ESLint </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nuxt 實作筆記，從 create-nuxt-app 到架上 github pages</title>
      <link href="/2019/12/06/nuxt-first/"/>
      <url>/2019/12/06/nuxt-first/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><p>因為工作上的需要，開發開始研究 nuxt ssr</p><p>所以特別在這邊紀錄要掛到 github pages 的過程</p><p>期望未來掛到 Production 環境時能夠起到作用</p><h2 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx create-nuxt-app nuxt-test20191206</span><br></pre></td></tr></tbody></table></figure></div><p>記錄一下 create-nuxt-app 的版本</p><p><a href="https://i.imgur.com/YkumpVf.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/YkumpVf.png" class="lazyload"></a></p><p>產生的整包專案結構</p><p><a href="https://i.imgur.com/ZN9IPrg.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/ZN9IPrg.png" class="lazyload"></a></p><h2 id="本地測試伺服器"><a href="#本地測試伺服器" class="headerlink" title="本地測試伺服器"></a>本地測試伺服器</h2><p>此時就可以 <code>npm run dev</code> 來隨意進行更動然後觀察變化了</p><h2 id="修改-pages-資料夾"><a href="#修改-pages-資料夾" class="headerlink" title="修改 pages 資料夾"></a>修改 pages 資料夾</h2><p><a href="https://i.imgur.com/YAuMOOH.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/YAuMOOH.png" class="lazyload"></a></p><p>增加 user 資料夾及 index.vue</p><p>內容除了原本的預設內容多放了互相連結的 <code>nuxt-link</code></p><h2 id="github-pages-設置"><a href="#github-pages-設置" class="headerlink" title="github pages 設置"></a>github pages 設置</h2><p>此時還不能直接丟上 github pages，會有一些毛病要修改</p><p>package.json 增加這兩段</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">json</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"build:gh-pages"</span>: <span class="string">"cross-env DEPLOY_ENV=GH_PAGES nuxt build"</span>,</span><br><span class="line"><span class="string">"generate:gh-pages"</span>: <span class="string">"cross-env DEPLOY_ENV=GH_PAGES nuxt generate"</span></span><br></pre></td></tr></tbody></table></figure></div><p>安裝 cross-env</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -D cross-env</span><br></pre></td></tr></tbody></table></figure></div><p>nuxt.config.js 增加 router base</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">router: {</span><br><span class="line">  <span class="attr">base</span>: process.env.DEPLOY_ENV === <span class="string">'GH_PAGES'</span> ? <span class="string">'/nuxt-landing-page/dist/'</span> : <span class="string">'/'</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>此時可以執行打包成靜態檔案的指令</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run generate:gh-pages</span><br></pre></td></tr></tbody></table></figure></div><p>.gitignore 記得把 dist 給註解掉</p><p>另外還要新增 404.md，讓首頁的路由可以正常</p><p><a href="https://i.imgur.com/XWvFWyz.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/XWvFWyz.png" class="lazyload"></a></p><h2 id="git-push"><a href="#git-push" class="headerlink" title="git push"></a>git push</h2><p>最後應該就能在 github pages 上看到兩頁互切</p><p><a href="https://i.imgur.com/563awVW.gif" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/563awVW.gif" class="lazyload"></a></p></body></html>]]></content>
      
      
      <categories>
          
          <category> nuxt </category>
          
          <category> github pages </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nuxt </tag>
            
            <tag> github pages </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>videojs-ima 實作筆記</title>
      <link href="/2019/12/03/videojs-ima/"/>
      <url>/2019/12/03/videojs-ima/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h1 id="videojs-ima-是用來讓播放器能方便引入-google-圖片或影片的廣告的函式庫"><a href="#videojs-ima-是用來讓播放器能方便引入-google-圖片或影片的廣告的函式庫" class="headerlink" title="videojs-ima 是用來讓播放器能方便引入 google 圖片或影片的廣告的函式庫"></a>videojs-ima 是用來讓播放器能方便引入 google 圖片或影片的廣告的函式庫</h1><h2 id="首先用-npm-來下載該載的東西"><a href="#首先用-npm-來下載該載的東西" class="headerlink" title="首先用 npm 來下載該載的東西"></a>首先用 npm 來下載該載的東西</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm i video.js</span><br><span class="line">npm i videojs-contrib.ads</span><br><span class="line">npm i videojs-ima</span><br></pre></td></tr></tbody></table></figure></div><h2 id="css-引入"><a href="#css-引入" class="headerlink" title="css 引入"></a>css 引入</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">html</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag"><<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"./node_modules/video.js/dist/video-js.css"</span>></span></span><br><span class="line"><span class="tag"><<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"./node_modules/videojs-contrib-ads/dist/videojs.ads.css"</span>></span></span><br><span class="line"><span class="tag"><<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"./node_modules/videojs-ima/dist/videojs.ima.css"</span>></span></span><br></pre></td></tr></tbody></table></figure></div><h2 id="js-引入"><a href="#js-引入" class="headerlink" title="js 引入"></a>js 引入</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">html</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag"><<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://imasdk.googleapis.com/js/sdkloader/ima3.js"</span>></span><span class="tag"><!--<span class="name"-->script</span>></span><br><span class="line"><span class="tag"><<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./node_modules/video.js/dist/video.js"</span>></span><span class="tag"><!--<span class="name"-->script</span>></span><br><span class="line"><span class="tag"><<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./node_modules/videojs-contrib-ads/dist/videojs.ads.js"</span>></span><span class="tag"><!--<span class="name"-->script</span>></span><br><span class="line"><span class="tag"><<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./node_modules/videojs-ima/dist/videojs.ima.js"</span>></span><span class="tag"><!--<span class="name"-->script</span>></span><br></pre></td></tr></tbody></table></figure></div><h2 id="html-全部裝起來的部分"><a href="#html-全部裝起來的部分" class="headerlink" title="html 全部裝起來的部分"></a>html 全部裝起來的部分</h2><p>最後寫上 <code>video</code> 並指定 source</p><p>script 初始化 videojs 套上 ima 廣告</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">html</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">html</span>></span><br><span class="line"><span class="tag"><<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>></span></span><br><span class="line"></span><br><span class="line"><span class="tag"><<span class="name">head</span>></span></span><br><span class="line">  <span class="tag"><<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>></span></span><br><span class="line">  <span class="tag"><<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>></span></span><br><span class="line">  <span class="tag"><<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>></span></span><br><span class="line">  <span class="tag"><<span class="name">title</span>></span>videojs.ima<span class="tag"><!--<span class="name"-->title</span>></span><br><span class="line">  <span class="tag"><<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"./node_modules/video.js/dist/video-js.css"</span>></span></span><br><span class="line">  <span class="tag"><<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"./node_modules/videojs-contrib-ads/dist/videojs.ads.css"</span>></span></span><br><span class="line">  <span class="tag"><<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"./node_modules/videojs-ima/dist/videojs.ima.css"</span>></span></span><br><span class="line"><span class="tag"><!--<span class="name"-->head</span>></span><br><span class="line"></span><br><span class="line"><span class="tag"><<span class="name">body</span>></span></span><br><span class="line">  <span class="tag"><<span class="name">video</span> <span class="attr">id</span>=<span class="string">"content_video"</span> <span class="attr">class</span>=<span class="string">"video-js vjs-default-skin"</span> <span class="attr">controls</span> <span class="attr">preload</span>=<span class="string">"auto"</span> <span class="attr">width</span>=<span class="string">"640"</span> <span class="attr">height</span>=<span class="string">"360"</span>></span></span><br><span class="line">    <span class="tag"><<span class="name">source</span> <span class="attr">src</span>=<span class="string">"https://storage.googleapis.com/gvabox/media/samples/android.mp4"</span> <span class="attr">type</span>=<span class="string">"video/mp4"</span> /></span></span><br><span class="line">  <span class="tag"><!--<span class="name"-->video</span>></span><br><span class="line"></span><br><span class="line">  <span class="tag"><<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://imasdk.googleapis.com/js/sdkloader/ima3.js"</span>></span><span class="tag"><!--<span class="name"-->script</span>></span><br><span class="line">  <span class="tag"><<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./node_modules/video.js/dist/video.js"</span>></span><span class="tag"><!--<span class="name"-->script</span>></span><br><span class="line">  <span class="tag"><<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./node_modules/videojs-contrib-ads/dist/videojs.ads.js"</span>></span><span class="tag"><!--<span class="name"-->script</span>></span><br><span class="line">  <span class="tag"><<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./node_modules/videojs-ima/dist/videojs.ima.js"</span>></span><span class="tag"><!--<span class="name"-->script</span>></span><br><span class="line"></span><br><span class="line">  <span class="tag"><<span class="name">script</span>></span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> player = videojs(<span class="string">'content_video'</span>);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> options = {</span></span><br><span class="line"><span class="javascript">      <span class="attr">id</span>: <span class="string">'content_video'</span>,</span></span><br><span class="line"><span class="javascript">      <span class="attr">adTagUrl</span>: <span class="string">'http://pubads.g.doubleclick.net/gampad/ads?sz=640x480&iu=/124319096/external/ad_rule_samples&ciu_szs=300x250&ad_rule=1&impl=s&gdfp_req=1&env=vp&output=xml_vmap1&unviewed_position_start=1&cust_params=sample_ar%3Dpremidpostpod%26deployment%3Dgmf-js&cmsid=496&vid=short_onecue&correlator='</span>,</span></span><br><span class="line"><span class="javascript">    };</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    player.ima(options);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    player.on(<span class="string">'ads-manager'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>{</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.dir(response);</span></span><br><span class="line"><span class="javascript">    });</span></span><br><span class="line"><span class="javascript">  </span><span class="tag"><!--<span class="name"-->script</span>></span><br><span class="line"><span class="tag"><!--<span class="name"-->body</span>></span><br><span class="line"></span><br><span class="line"><span class="tag"><!--<span class="name"-->html</span>></span><br></pre></td></tr></tbody></table></figure></div><h2 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h2><p><a href="https://i.imgur.com/NPJ1f2k.gif" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/NPJ1f2k.gif" class="lazyload"></a></p></body></html>]]></content>
      
      
      <categories>
          
          <category> google </category>
          
          <category> video </category>
          
      </categories>
      
      
        <tags>
            
            <tag> google </tag>
            
            <tag> video </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo 官網教學架上 github pages 的說明是不是有一點雷</title>
      <link href="/2019/12/01/hexo-setup/"/>
      <url>/2019/12/01/hexo-setup/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h2 id="原先照著-hexo-官網，也就是下面那個連結的說明過程總是失敗-XD"><a href="#原先照著-hexo-官網，也就是下面那個連結的說明過程總是失敗-XD" class="headerlink" title="原先照著 hexo 官網，也就是下面那個連結的說明過程總是失敗 XD"></a>原先照著 hexo 官網，也就是下面那個連結的說明過程總是失敗 XD</h2><p><a href="https://hexo.io/docs/github-pages">https://hexo.io/docs/github-pages</a></p><p>搭配 Travis CI 很棒棒是沒錯，但是我沒辦法做到第 10 點將 GitHub Pages 的 Source 給切換去用 gh-pages branch</p><p>也可能是我有什麼環節弄錯，總之最後我用以下的方式來做</p><h2 id="安裝"><a href="#安裝" class="headerlink" title="安裝"></a>安裝</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br><span class="line"></span><br><span class="line">hexo init blog</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> blog</span><br><span class="line"></span><br><span class="line">npm i</span><br><span class="line"></span><br><span class="line"><span class="comment"># 這邊特別要記得下載這個套件，才有辦法讓 hexo 正常的執行 git 指令</span></span><br><span class="line">npm i hexo-deployer-git</span><br></pre></td></tr></tbody></table></figure></div><hr><h2 id="github-操作步驟"><a href="#github-操作步驟" class="headerlink" title="github 操作步驟"></a>github 操作步驟</h2><p>這時到 github 蓋一個 <code><這邊是輸入你的帳號>.github.io</code> 的 Repository</p><p><a href="https://i.imgur.com/PjFgMVE.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/PjFgMVE.png" class="lazyload"></a></p><p>也蓋一個 <code>blog</code> 的 Repository</p><p><a href="https://i.imgur.com/g2zhYt4.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://i.imgur.com/g2zhYt4.png" class="lazyload"></a></p><p>共兩個 Repository</p><ul><li>一個放<code>編譯後的靜態檔案</code>(<code><這邊是輸入你的帳號>.github.io</code>)</li><li>一個放<code>未編譯前的檔案</code>(<code>blog</code>)</li></ul><hr><h2 id="專案資料夾操作步驟"><a href="#專案資料夾操作步驟" class="headerlink" title="專案資料夾操作步驟"></a>專案資料夾操作步驟</h2><p>回到專案資料夾</p><p>git remote add 的路徑是要放<code>未編譯的檔案</code>(<code>blog</code>)</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br><span class="line"></span><br><span class="line">git remote add origin https://github.com/<這邊是輸入你的帳號>/blog.git</span><br></pre></td></tr></tbody></table></figure></div><p>調整 _config.yml 的內容，約第 97 行，此時設定的是編譯後的靜態檔案部屬的位置(<code><這邊是輸入你的帳號>.github.io</code>)</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">yml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight yml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">https://github.com/<這邊是輸入你的帳號>/<這邊是輸入你的帳號>.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></tbody></table></figure></div><p>然後到 package.json 增加一個新的 script，把 清除檔案 + 產生靜態檔案 + 部屬到目標 的指令合成一行</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">json</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"release"</span>: <span class="string">"hexo clean && hexo generate && hexo deploy"</span></span><br></pre></td></tr></tbody></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run release</span><br></pre></td></tr></tbody></table></figure></div><p>此後打完文章只要一行指令就可以等他產生靜態檔案及丟上 github.io</p><hr><h2 id="新增文章操作步驟"><a href="#新增文章操作步驟" class="headerlink" title="新增文章操作步驟"></a>新增文章操作步驟</h2><p>新增文章時要輸入</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new <檔案名稱></span><br></pre></td></tr></tbody></table></figure></div><p>會自動產生 .md 檔到 source -> _posts 資料夾裡頭</p><p>文章打完後，就一行剛剛特別寫的 <code>npm run release</code></p><p>就會依照 _config.yml 寫的目標來 deploy 上靜態檔案</p><p>成功佈署後記得也要將未編譯的原始檔進行版控</p></body></html>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
